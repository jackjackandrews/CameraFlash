

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 13 23:26:05 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	smallconst
    71  001000                     __psmallconst:
    72                           	opt stack 0
    73  001000  00                 	db	0
    74  001001                     _dpowers:
    75                           	opt stack 0
    76  001001  0001               	dw	1
    77  001003  0000               	dw	0
    78  001005  000A               	dw	10
    79  001007  0000               	dw	0
    80  001009  0064               	dw	100
    81  00100B  0000               	dw	0
    82  00100D  03E8               	dw	1000
    83  00100F  0000               	dw	0
    84  001011  2710               	dw	10000
    85  001013  0000               	dw	0
    86  001015  86A0               	dw	34464
    87  001017  0001               	dw	1
    88  001019  4240               	dw	16960
    89  00101B  000F               	dw	15
    90  00101D  9680               	dw	38528
    91  00101F  0098               	dw	152
    92  001021  E100               	dw	57600
    93  001023  05F5               	dw	1525
    94  001025  CA00               	dw	51712
    95  001027  3B9A               	dw	15258
    96  001029                     __end_of_dpowers:
    97                           	opt stack 0
    98  001029                     __npowers_:
    99                           	opt stack 0
   100  001029  00                 	db	0
   101  00102A  80                 	db	128
   102  00102B  3F                 	db	63
   103  00102C  CD                 	db	205
   104  00102D  CC                 	db	204
   105  00102E  3D                 	db	61
   106  00102F  D7                 	db	215
   107  001030  23                 	db	35
   108  001031  3C                 	db	60
   109  001032  12                 	db	18
   110  001033  83                 	db	131
   111  001034  3A                 	db	58
   112  001035  B7                 	db	183
   113  001036  D1                 	db	209
   114  001037  38                 	db	56
   115  001038  C6                 	db	198
   116  001039  27                 	db	39
   117  00103A  37                 	db	55
   118  00103B  38                 	db	56
   119  00103C  86                 	db	134
   120  00103D  35                 	db	53
   121  00103E  C0                 	db	192
   122  00103F  D6                 	db	214
   123  001040  33                 	db	51
   124  001041  CC                 	db	204
   125  001042  2B                 	db	43
   126  001043  32                 	db	50
   127  001044  70                 	db	112
   128  001045  89                 	db	137
   129  001046  30                 	db	48
   130  001047  E7                 	db	231
   131  001048  DB                 	db	219
   132  001049  2E                 	db	46
   133  00104A  E5                 	db	229
   134  00104B  3C                 	db	60
   135  00104C  1E                 	db	30
   136  00104D  42                 	db	66
   137  00104E  A2                 	db	162
   138  00104F  0D                 	db	13
   139  001050                     __end_of__npowers_:
   140                           	opt stack 0
   141  001050                     __powers_:
   142                           	opt stack 0
   143  001050  00                 	db	0
   144  001051  80                 	db	128
   145  001052  3F                 	db	63
   146  001053  00                 	db	0
   147  001054  20                 	db	32
   148  001055  41                 	db	65
   149  001056  00                 	db	0
   150  001057  C8                 	db	200
   151  001058  42                 	db	66
   152  001059  00                 	db	0
   153  00105A  7A                 	db	122
   154  00105B  44                 	db	68
   155  00105C  40                 	db	64
   156  00105D  1C                 	db	28
   157  00105E  46                 	db	70
   158  00105F  50                 	db	80
   159  001060  C3                 	db	195
   160  001061  47                 	db	71
   161  001062  24                 	db	36
   162  001063  74                 	db	116
   163  001064  49                 	db	73
   164  001065  97                 	db	151
   165  001066  18                 	db	24
   166  001067  4B                 	db	75
   167  001068  BC                 	db	188
   168  001069  BE                 	db	190
   169  00106A  4C                 	db	76
   170  00106B  6B                 	db	107
   171  00106C  6E                 	db	110
   172  00106D  4E                 	db	78
   173  00106E  03                 	db	3
   174  00106F  15                 	db	21
   175  001070  50                 	db	80
   176  001071  79                 	db	121
   177  001072  AD                 	db	173
   178  001073  60                 	db	96
   179  001074  F3                 	db	243
   180  001075  49                 	db	73
   181  001076  71                 	db	113
   182  001077                     __end_of__powers_:
   183                           	opt stack 0
   184  001077                     STR_1:
   185  001077  43                 	db	67	;'C'
   186  001078  43                 	db	67	;'C'
   187  001079  50                 	db	80	;'P'
   188  00107A  20                 	db	32
   189  00107B  72                 	db	114	;'r'
   190  00107C  65                 	db	101	;'e'
   191  00107D  67                 	db	103	;'g'
   192  00107E  69                 	db	105	;'i'
   193  00107F  73                 	db	115	;'s'
   194  001080  74                 	db	116	;'t'
   195  001081  65                 	db	101	;'e'
   196  001082  72                 	db	114	;'r'
   197  001083  3A                 	db	58	;':'
   198  001084  20                 	db	32
   199  001085  00                 	db	0
   200  001086                     STR_2:
   201  001086  4C                 	db	76	;'L'
   202  001087  65                 	db	101	;'e'
   203  001088  6E                 	db	110	;'n'
   204  001089  67                 	db	103	;'g'
   205  00108A  74                 	db	116	;'t'
   206  00108B  68                 	db	104	;'h'
   207  00108C  2C                 	db	44
   208  00108D  20                 	db	32
   209  00108E  75                 	db	117	;'u'
   210  00108F  73                 	db	115	;'s'
   211  001090  3A                 	db	58	;':'
   212  001091  20                 	db	32
   213  001092  00                 	db	0
   214  001093                     STR_4:
   215  001093  41                 	db	65	;'A'
   216  001094  52                 	db	82	;'R'
   217  001095  4D                 	db	77	;'M'
   218  001096  45                 	db	69	;'E'
   219  001097  44                 	db	68	;'D'
   220  001098  20                 	db	32
   221  001099  20                 	db	32
   222  00109A  00                 	db	0
   223  00109B                     STR_3:
   224  00109B  55                 	db	85	;'U'
   225  00109C  4E                 	db	78	;'N'
   226  00109D  41                 	db	65	;'A'
   227  00109E  52                 	db	82	;'R'
   228  00109F  4D                 	db	77	;'M'
   229  0010A0  45                 	db	69	;'E'
   230  0010A1  44                 	db	68	;'D'
   231  0010A2  00                 	db	0
   232  0010A3                     STR_7:
   233  0010A3  25                 	db	37
   234  0010A4  2D                 	db	45
   235  0010A5  38                 	db	56	;'8'
   236  0010A6  2E                 	db	46
   237  0010A7  31                 	db	49	;'1'
   238  0010A8  66                 	db	102	;'f'
   239  0010A9  00                 	db	0
   240  0010AA                     STR_6:
   241  0010AA  25                 	db	37
   242  0010AB  2D                 	db	45
   243  0010AC  35                 	db	53	;'5'
   244  0010AD  75                 	db	117	;'u'
   245  0010AE  00                 	db	0
   246  0000                     
   247                           ; #config settings
   248  0010AF  00                 	db	0	; dummy byte at the end
   249  0000                     
   250                           	psect	nvCOMRAM
   251  00004A                     __pnvCOMRAM:
   252                           	opt stack 0
   253  00004A                     _systick_tmr_reload:
   254                           	opt stack 0
   255  00004A                     	ds	2
   256  00004C                     _systick_interrupt_priority:
   257                           	opt stack 0
   258  00004C                     	ds	1
   259  0000                     _CCP3CON	set	4023
   260  0000                     _CCPR3H	set	4025
   261  0000                     _CCPR3L	set	4024
   262  0000                     _INTCON2bits	set	4081
   263  0000                     _INTCONbits	set	4082
   264  0000                     _IPR3bits	set	4005
   265  0000                     _LATDbits	set	3980
   266  0000                     _LATGbits	set	3983
   267  0000                     _LATHbits	set	3984
   268  0000                     _LATJbits	set	3985
   269  0000                     _PIE3bits	set	4003
   270  0000                     _PIR3bits	set	4004
   271  0000                     _PORTB	set	3969
   272  0000                     _PORTBbits	set	3969
   273  0000                     _PORTGbits	set	3974
   274  0000                     _RCONbits	set	4048
   275  0000                     _T0CON	set	4053
   276  0000                     _T0CONbits	set	4053
   277  0000                     _T3CON	set	4017
   278  0000                     _T3CONbits	set	4017
   279  0000                     _TMR0H	set	4055
   280  0000                     _TMR0L	set	4054
   281  0000                     _TMR3H	set	4019
   282  0000                     _TMR3L	set	4018
   283  0000                     _TRISBbits	set	3987
   284  0000                     _TRISDbits	set	3989
   285  0000                     _TRISGbits	set	3992
   286  0000                     _TRISHbits	set	3993
   287  0000                     _TRISJbits	set	3994
   288                           
   289                           	psect	cinit
   290  003856                     __pcinit:
   291                           	opt stack 0
   292  003856                     start_initialization:
   293                           	opt stack 0
   294  003856                     __initialization:
   295                           	opt stack 0
   296                           
   297                           ; Clear objects allocated to BANK0 (1 bytes)
   298  003856  0100               	movlb	0
   299  003858  6BB5               	clrf	__pbssBANK0& (0+255),b
   300                           
   301                           ; Clear objects allocated to COMRAM (14 bytes)
   302  00385A  EE00  F03C         	lfsr	0,__pbssCOMRAM
   303  00385E  0E0E               	movlw	14
   304  003860                     clear_0:
   305  003860  6AEE               	clrf	postinc0,c
   306  003862  06E8               	decf	wreg,f,c
   307  003864  E1FD               	bnz	clear_0
   308  003866                     end_of_initialization:
   309                           	opt stack 0
   310  003866                     __end_of__initialization:
   311                           	opt stack 0
   312  003866  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   313  003868  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   314  00386A  0100               	movlb	0
   315  00386C  EF10  F013         	goto	_main	;jump to C main() function
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           
   319                           	psect	bssCOMRAM
   320  00003C                     __pbssCOMRAM:
   321                           	opt stack 0
   322  00003C                     _counter:
   323                           	opt stack 0
   324  00003C                     	ds	2
   325  00003E                     _buttons_interrupt_priority:
   326                           	opt stack 0
   327  00003E                     	ds	1
   328  00003F                     _buttons_use_interrupts:
   329                           	opt stack 0
   330  00003F                     	ds	1
   331  000040                     _enc_A:
   332                           	opt stack 0
   333  000040                     	ds	1
   334  000041                     _enc_A_prev:
   335                           	opt stack 0
   336  000041                     	ds	1
   337  000042                     _enc_B:
   338                           	opt stack 0
   339  000042                     	ds	1
   340  000043                     _enc_state:
   341                           	opt stack 0
   342  000043                     	ds	3
   343  000046                     _lcd_state:
   344                           	opt stack 0
   345  000046                     	ds	3
   346  000049                     _button_state_bits:
   347                           	opt stack 0
   348  000049                     	ds	1
   349                           postinc0	equ	0xFEE
   350                           wreg	equ	0xFE8
   351                           
   352                           	psect	bssBANK0
   353  0000B5                     __pbssBANK0:
   354                           	opt stack 0
   355  0000B5                     _done:
   356                           	opt stack 0
   357  0000B5                     	ds	1
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           
   361                           	psect	cstackBANK0
   362  000060                     __pcstackBANK0:
   363                           	opt stack 0
   364  000060                     _fround$2346:
   365                           	opt stack 0
   366  000060                     _scale$2347:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0x0
   370  000060                     	ds	3
   371  000063                     scale@scl:
   372                           	opt stack 0
   373  000063                     _fround$2345:
   374                           	opt stack 0
   375                           
   376                           ; 3 bytes @ 0x3
   377  000063                     	ds	1
   378  000064                     ?___fttol:
   379                           	opt stack 0
   380  000064                     ___fttol@f1:
   381                           	opt stack 0
   382                           
   383                           ; 3 bytes @ 0x4
   384  000064                     	ds	2
   385  000066                     fround@prec:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x6
   389  000066                     	ds	1
   390  000067                     ?___ftadd:
   391                           	opt stack 0
   392  000067                     ___ftadd@f1:
   393                           	opt stack 0
   394                           
   395                           ; 3 bytes @ 0x7
   396  000067                     	ds	1
   397  000068                     ??___fttol:
   398                           
   399                           ; 1 bytes @ 0x8
   400  000068                     	ds	2
   401  00006A                     ___ftadd@f2:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0xA
   405  00006A                     	ds	3
   406  00006D                     ___ftadd@sign:
   407                           	opt stack 0
   408  00006D                     ___fttol@sign1:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0xD
   412  00006D                     	ds	1
   413  00006E                     ___ftadd@exp2:
   414                           	opt stack 0
   415  00006E                     ___fttol@lval:
   416                           	opt stack 0
   417                           
   418                           ; 4 bytes @ 0xE
   419  00006E                     	ds	1
   420  00006F                     ___ftadd@exp1:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0xF
   424  00006F                     	ds	1
   425  000070                     ?___ftsub:
   426                           	opt stack 0
   427  000070                     ___ftsub@f1:
   428                           	opt stack 0
   429                           
   430                           ; 3 bytes @ 0x10
   431  000070                     	ds	2
   432  000072                     ___fttol@exp1:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x12
   436  000072                     	ds	1
   437  000073                     ___ftsub@f2:
   438                           	opt stack 0
   439                           
   440                           ; 3 bytes @ 0x13
   441  000073                     	ds	3
   442  000076                     ?_sprintf:
   443                           	opt stack 0
   444  000076                     sprintf@sp:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x16
   448  000076                     	ds	2
   449  000078                     sprintf@f:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x18
   453  000078                     	ds	5
   454  00007D                     ??_sprintf:
   455                           
   456                           ; 1 bytes @ 0x1D
   457  00007D                     	ds	6
   458  000083                     _sprintf$2348:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0x23
   462  000083                     	ds	3
   463  000086                     sprintf@ap:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x26
   467  000086                     	ds	2
   468  000088                     sprintf@val:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x28
   472  000088                     	ds	4
   473  00008C                     sprintf@tmpval:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x2C
   477  00008C                     	ds	4
   478  000090                     sprintf@exp:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x30
   482  000090                     	ds	2
   483  000092                     sprintf@flag:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x32
   487  000092                     	ds	2
   488  000094                     sprintf@fval:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x34
   492  000094                     	ds	3
   493  000097                     sprintf@width:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x37
   497  000097                     	ds	2
   498  000099                     sprintf@prec:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x39
   502  000099                     	ds	2
   503  00009B                     sprintf@c:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x3B
   507  00009B                     	ds	1
   508  00009C                     main@buff:
   509                           	opt stack 0
   510                           
   511                           ; 20 bytes @ 0x3C
   512  00009C                     	ds	20
   513  0000B0                     main@duration_us:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x50
   517  0000B0                     	ds	3
   518  0000B3                     main@timer_reg_value:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x53
   522  0000B3                     	ds	2
   523                           postinc0	equ	0xFEE
   524                           wreg	equ	0xFE8
   525                           
   526                           	psect	cstackCOMRAM
   527  000001                     __pcstackCOMRAM:
   528                           	opt stack 0
   529  000001                     ??i2_scan_buttons:
   530  000001                     i2WriteTimer0@timer0:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x0
   534  000001                     	ds	1
   535  000002                     
   536                           ; 1 bytes @ 0x1
   537  000002                     	ds	1
   538  000003                     i2WriteTimer0@timer:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x2
   542  000003                     	ds	2
   543  000005                     ??_ISR:
   544  000005                     
   545                           ; 1 bytes @ 0x4
   546  000005                     	ds	14
   547  000013                     ??_scan_buttons:
   548  000013                     ??_Delay10KTCYx:
   549  000013                     ??_isdigit:
   550  000013                     ??_write_port:
   551  000013                     ??_write_cmd:
   552  000013                     ??_write_data:
   553  000013                     ?_IO_Encoder_getCount:
   554                           	opt stack 0
   555  000013                     ?___awmod:
   556                           	opt stack 0
   557  000013                     ?___ftpack:
   558                           	opt stack 0
   559  000013                     ?___ftneg:
   560                           	opt stack 0
   561  000013                     ?__tdiv_to_l_:
   562                           	opt stack 0
   563  000013                     ?__div_to_l_:
   564                           	opt stack 0
   565  000013                     ?___lldiv:
   566                           	opt stack 0
   567  000013                     IO_Buttons_configureIO@interrupt_priority:
   568                           	opt stack 0
   569  000013                     WriteTimer0@timer0:
   570                           	opt stack 0
   571  000013                     WriteTimer3@timer3:
   572                           	opt stack 0
   573  000013                     ___awmod@dividend:
   574                           	opt stack 0
   575  000013                     __div_to_l_@f1:
   576                           	opt stack 0
   577  000013                     ___ftpack@arg:
   578                           	opt stack 0
   579  000013                     __tdiv_to_l_@f1:
   580                           	opt stack 0
   581  000013                     ___ftge@ff1:
   582                           	opt stack 0
   583  000013                     ___ftneg@f1:
   584                           	opt stack 0
   585  000013                     ___lldiv@dividend:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x12
   589  000013                     	ds	1
   590  000014                     IO_Buttons_configureIO@use_interrupts:
   591                           	opt stack 0
   592  000014                     IO_Buttons_getButton@button:
   593                           	opt stack 0
   594  000014                     write_port@data:
   595                           	opt stack 0
   596  000014                     Delay10KTCYx@unit:
   597                           	opt stack 0
   598  000014                     _isdigit$1890:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x13
   602  000014                     	ds	1
   603  000015                     write_cmd@cmd:
   604                           	opt stack 0
   605  000015                     write_data@data:
   606                           	opt stack 0
   607  000015                     isdigit@c:
   608                           	opt stack 0
   609  000015                     IO_Encoder_getCount@count:
   610                           	opt stack 0
   611  000015                     WriteTimer0@timer:
   612                           	opt stack 0
   613  000015                     WriteTimer3@timer:
   614                           	opt stack 0
   615  000015                     ___awmod@divisor:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x14
   619  000015                     	ds	1
   620  000016                     ??_IO_LCD_Init:
   621  000016                     IO_LCD_SetCursor@col:
   622                           	opt stack 0
   623  000016                     ___ftpack@exp:
   624                           	opt stack 0
   625  000016                     IO_LCD_puts@str:
   626                           	opt stack 0
   627  000016                     IO_LCD_putrs@str:
   628                           	opt stack 0
   629  000016                     __div_to_l_@f2:
   630                           	opt stack 0
   631  000016                     __tdiv_to_l_@f2:
   632                           	opt stack 0
   633  000016                     ___ftge@ff2:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x15
   637  000016                     	ds	1
   638  000017                     IO_LCD_SetCursor@row:
   639                           	opt stack 0
   640  000017                     TMR_SysTick_configure@interrupt_priority:
   641                           	opt stack 0
   642  000017                     ___awmod@counter:
   643                           	opt stack 0
   644  000017                     ___ftpack@sign:
   645                           	opt stack 0
   646  000017                     ___lldiv@divisor:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x16
   650  000017                     	ds	1
   651  000018                     ??___ftpack:
   652  000018                     ??_IO_LCD_putrs:
   653  000018                     IO_LCD_puts@i:
   654                           	opt stack 0
   655  000018                     ___awmod@sign:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x17
   659  000018                     	ds	1
   660  000019                     ??__tdiv_to_l_:
   661  000019                     ??___ftge:
   662  000019                     ?___awdiv:
   663                           	opt stack 0
   664  000019                     ___awdiv@dividend:
   665                           	opt stack 0
   666  000019                     __div_to_l_@quot:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x18
   670  000019                     	ds	1
   671  00001A                     IO_LCD_putrs@i:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x19
   675  00001A                     	ds	1
   676  00001B                     ?___lltoft:
   677                           	opt stack 0
   678  00001B                     ?___lwtoft:
   679                           	opt stack 0
   680  00001B                     ___awdiv@divisor:
   681                           	opt stack 0
   682  00001B                     ___lwtoft@c:
   683                           	opt stack 0
   684  00001B                     ___lldiv@quotient:
   685                           	opt stack 0
   686  00001B                     ___lltoft@c:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x1A
   690  00001B                     	ds	1
   691  00001C                     __tdiv_to_l_@quot:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x1B
   695  00001C                     	ds	1
   696  00001D                     ___awdiv@counter:
   697                           	opt stack 0
   698  00001D                     __div_to_l_@cntr:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x1C
   702  00001D                     	ds	1
   703  00001E                     ___awdiv@sign:
   704                           	opt stack 0
   705  00001E                     __div_to_l_@exp1:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x1D
   709  00001E                     	ds	1
   710  00001F                     ??___lltoft:
   711  00001F                     ___lldiv@counter:
   712                           	opt stack 0
   713  00001F                     ___awdiv@quotient:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x1E
   717  00001F                     	ds	1
   718  000020                     ?___llmod:
   719                           	opt stack 0
   720  000020                     __tdiv_to_l_@cntr:
   721                           	opt stack 0
   722  000020                     ___llmod@dividend:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x1F
   726  000020                     	ds	1
   727  000021                     ?___wmul:
   728                           	opt stack 0
   729  000021                     __tdiv_to_l_@exp1:
   730                           	opt stack 0
   731  000021                     ___wmul@multiplier:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x20
   735  000021                     	ds	2
   736  000023                     ___lltoft@exp:
   737                           	opt stack 0
   738  000023                     ___wmul@multiplicand:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x22
   742  000023                     	ds	1
   743  000024                     ___llmod@divisor:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x23
   747  000024                     	ds	1
   748  000025                     ___wmul@product:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x24
   752  000025                     	ds	2
   753  000027                     ?___ftmul:
   754                           	opt stack 0
   755  000027                     ___ftmul@f1:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x26
   759  000027                     	ds	1
   760  000028                     ___llmod@counter:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x27
   764  000028                     	ds	2
   765  00002A                     ___ftmul@f2:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x29
   769  00002A                     	ds	3
   770  00002D                     ??___ftmul:
   771                           
   772                           ; 1 bytes @ 0x2C
   773  00002D                     	ds	3
   774  000030                     ___ftmul@exp:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x2F
   778  000030                     	ds	1
   779  000031                     ___ftmul@f3_as_product:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x30
   783  000031                     	ds	3
   784  000034                     ___ftmul@cntr:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x33
   788  000034                     	ds	1
   789  000035                     ___ftmul@sign:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x34
   793  000035                     	ds	1
   794  000036                     ?_fround:
   795                           	opt stack 0
   796  000036                     ?_scale:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x35
   800  000036                     	ds	3
   801  000039                     ??___ftadd:
   802  000039                     
   803                           ; 1 bytes @ 0x38
   804  000039                     	ds	3
   805  00003C                     postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808                           ; 1 bytes @ 0x3B
   809 ;;
   810 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   811 ;;
   812 ;; *************** function _main *****************
   813 ;; Defined at:
   814 ;;		line 40 in file "test2.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  buff           20   60[BANK0 ] unsigned char [20]
   819 ;;  duration_us     3   80[BANK0 ] float 
   820 ;;  timer_reg_va    2   83[BANK0 ] unsigned int 
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;Total ram usage:       25 bytes
   835 ;; Hardware stack levels required when called:    8
   836 ;; This function calls:
   837 ;;		_Delay10KTCYx
   838 ;;		_IO_Buttons_configureIO
   839 ;;		_IO_Buttons_getButton
   840 ;;		_IO_Encoder_configureIO
   841 ;;		_IO_Encoder_getCount
   842 ;;		_IO_LCD_Init
   843 ;;		_IO_LCD_SetCursor
   844 ;;		_IO_LCD_configureIO
   845 ;;		_IO_LCD_putrs
   846 ;;		_IO_LCD_puts
   847 ;;		_IO_LED_configureIO
   848 ;;		_TMR_SysTick_configure
   849 ;;		_WriteTimer3
   850 ;;		___ftmul
   851 ;;		___lwtoft
   852 ;;		_sprintf
   853 ;; This function is called by:
   854 ;;		Startup code after reset
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text0
   859  002620                     __ptext0:
   860                           	opt stack 0
   861  002620                     _main:
   862                           	opt stack 23
   863                           
   864                           ;test2.c: 42: char buff[20];
   865                           ;test2.c: 43: unsigned int timer_reg_value = 0;
   866                           
   867                           ;incstack = 0
   868  002620  0E00               	movlw	0
   869  002622  0100               	movlb	0	; () banked
   870  002624  6FB4               	movwf	(main@timer_reg_value+1)& (0+255),b
   871  002626  0E00               	movlw	0
   872  002628  6FB3               	movwf	main@timer_reg_value& (0+255),b
   873                           
   874                           ; BSR set to: 0
   875                           ;test2.c: 44: float duration_us;
   876                           ;test2.c: 46: RCONbits.IPEN = 0;
   877  00262A  9ED0               	bcf	4048,7,c	;volatile
   878                           
   879                           ; BSR set to: 0
   880                           ;test2.c: 48: INTCONbits.PEIE = 1;
   881  00262C  8CF2               	bsf	intcon,6,c	;volatile
   882                           
   883                           ; BSR set to: 0
   884                           ;test2.c: 49: INTCONbits.GIE = 1;
   885  00262E  8EF2               	bsf	intcon,7,c	;volatile
   886                           
   887                           ; BSR set to: 0
   888                           ;test2.c: 51: PIE3bits.CCP3IE = 1;
   889  002630  80A3               	bsf	4003,0,c	;volatile
   890                           
   891                           ; BSR set to: 0
   892                           ;test2.c: 52: IPR3bits.CCP3IP = 0;
   893  002632  90A5               	bcf	4005,0,c	;volatile
   894                           
   895                           ; BSR set to: 0
   896                           ;test2.c: 54: TMR_SysTick_configure(0);
   897  002634  0E00               	movlw	0
   898  002636  ECA7  F01B         	call	_TMR_SysTick_configure
   899                           
   900                           ;test2.c: 55: IO_Buttons_configureIO(0, 0);
   901  00263A  0E00               	movlw	0
   902  00263C  6E13               	movwf	IO_Buttons_configureIO@interrupt_priority,c
   903  00263E  0E00               	movlw	0
   904  002640  EC8E  F01B         	call	_IO_Buttons_configureIO
   905                           
   906                           ;test2.c: 56: IO_LED_configureIO();
   907  002644  EC7B  F01C         	call	_IO_LED_configureIO	;wreg free
   908                           
   909                           ;test2.c: 57: IO_LCD_configureIO();
   910  002648  EC52  F01C         	call	_IO_LCD_configureIO	;wreg free
   911                           
   912                           ;test2.c: 58: IO_Encoder_configureIO();
   913  00264C  EC01  F01C         	call	_IO_Encoder_configureIO	;wreg free
   914                           
   915                           ;test2.c: 60: T3CON = 0b11001000;
   916  002650  0EC8               	movlw	200
   917  002652  6EB1               	movwf	4017,c	;volatile
   918                           
   919                           ;test2.c: 61: WriteTimer3(0x0000);
   920  002654  0E00               	movlw	0
   921  002656  6E14               	movwf	WriteTimer3@timer3+1,c
   922  002658  0E00               	movlw	0
   923  00265A  6E13               	movwf	WriteTimer3@timer3,c
   924  00265C  EC69  F01C         	call	_WriteTimer3	;wreg free
   925                           
   926                           ;test2.c: 63: CCP3CON = 0b00000000;
   927  002660  0E00               	movlw	0
   928  002662  6EB7               	movwf	4023,c	;volatile
   929                           
   930                           ;test2.c: 65: IO_LCD_Init();
   931  002664  ECB6  F018         	call	_IO_LCD_Init	;wreg free
   932                           
   933                           ;test2.c: 66: IO_LCD_putrs("CCP register: ");
   934  002668  0E77               	movlw	low STR_1
   935  00266A  6E16               	movwf	IO_LCD_putrs@str,c
   936  00266C  0E10               	movlw	high STR_1
   937  00266E  6E17               	movwf	IO_LCD_putrs@str+1,c
   938  002670  ECD9  F01A         	call	_IO_LCD_putrs	;wreg free
   939                           
   940                           ;test2.c: 67: IO_LCD_SetCursor(2,1);
   941  002674  0E01               	movlw	1
   942  002676  6E16               	movwf	IO_LCD_SetCursor@col,c
   943  002678  0E02               	movlw	2
   944  00267A  EC07  F01B         	call	_IO_LCD_SetCursor
   945                           
   946                           ;test2.c: 68: IO_LCD_putrs("Length, us: ");
   947  00267E  0E86               	movlw	low STR_2
   948  002680  6E16               	movwf	IO_LCD_putrs@str,c
   949  002682  0E10               	movlw	high STR_2
   950  002684  6E17               	movwf	IO_LCD_putrs@str+1,c
   951  002686  ECD9  F01A         	call	_IO_LCD_putrs	;wreg free
   952                           
   953                           ;test2.c: 70: TRISGbits.TRISG0 = 0;
   954  00268A  9098               	bcf	3992,0,c	;volatile
   955                           
   956                           ;test2.c: 71: LATGbits.LATG0 = 1;
   957  00268C  808F               	bsf	3983,0,c	;volatile
   958                           
   959                           ;test2.c: 73: IO_LCD_SetCursor(4,1);
   960  00268E  0E01               	movlw	1
   961  002690  6E16               	movwf	IO_LCD_SetCursor@col,c
   962  002692  0E04               	movlw	4
   963  002694  EC07  F01B         	call	_IO_LCD_SetCursor
   964                           
   965                           ;test2.c: 74: IO_LCD_putrs("UNARMED");
   966  002698  0E9B               	movlw	low STR_3
   967  00269A  6E16               	movwf	IO_LCD_putrs@str,c
   968  00269C  0E10               	movlw	high STR_3
   969  00269E  6E17               	movwf	IO_LCD_putrs@str+1,c
   970  0026A0  ECD9  F01A         	call	_IO_LCD_putrs	;wreg free
   971  0026A4                     l4800:
   972                           
   973                           ;test2.c: 78: if(IO_Buttons_getButton(PB_1)) {
   974  0026A4  0E00               	movlw	0
   975  0026A6  ECC7  F019         	call	_IO_Buttons_getButton
   976  0026AA  0900               	iorlw	0
   977  0026AC  B4D8               	btfsc	status,2,c
   978  0026AE  D038               	goto	l361
   979                           
   980                           ;test2.c: 80: done = 0;
   981  0026B0  0E00               	movlw	0
   982  0026B2  0100               	movlb	0	; () banked
   983  0026B4  6FB5               	movwf	_done& (0+255),b	;volatile
   984                           
   985                           ; BSR set to: 0
   986                           ;test2.c: 82: IO_LCD_SetCursor(4,1);
   987  0026B6  0E01               	movlw	1
   988  0026B8  6E16               	movwf	IO_LCD_SetCursor@col,c
   989  0026BA  0E04               	movlw	4
   990  0026BC  EC07  F01B         	call	_IO_LCD_SetCursor
   991                           
   992                           ;test2.c: 83: IO_LCD_putrs("ARMED  ");
   993  0026C0  0E93               	movlw	low STR_4
   994  0026C2  6E16               	movwf	IO_LCD_putrs@str,c
   995  0026C4  0E10               	movlw	high STR_4
   996  0026C6  6E17               	movwf	IO_LCD_putrs@str+1,c
   997  0026C8  ECD9  F01A         	call	_IO_LCD_putrs	;wreg free
   998                           
   999                           ;test2.c: 85: CCPR3L = timer_reg_value & 0x00FF;
  1000  0026CC  C0B3  FFB8         	movff	main@timer_reg_value,4024	;volatile
  1001                           
  1002                           ;test2.c: 86: CCPR3H = (timer_reg_value >> 8) & 0x00FF;
  1003  0026D0  0100               	movlb	0	; () banked
  1004  0026D2  51B4               	movf	(main@timer_reg_value+1)& (0+255),w,b
  1005  0026D4  6EB9               	movwf	4025,c	;volatile
  1006  0026D6                     l4812:
  1007  0026D6  0E03               	movlw	3
  1008  0026D8  ECC7  F019         	call	_IO_Buttons_getButton
  1009  0026DC  0900               	iorlw	0
  1010  0026DE  B4D8               	btfsc	status,2,c
  1011  0026E0  D7FA               	goto	l4812
  1012                           
  1013                           ;test2.c: 93: CCP3CON = 0b00001001;
  1014  0026E2  0E09               	movlw	9
  1015  0026E4  6EB7               	movwf	4023,c	;volatile
  1016                           
  1017                           ;test2.c: 94: T3CONbits.TMR3ON = 1;
  1018  0026E6  80B1               	bsf	4017,0,c	;volatile
  1019  0026E8                     l4818:
  1020  0026E8  0100               	movlb	0	; () banked
  1021  0026EA  51B5               	movf	_done& (0+255),w,b	;volatile
  1022  0026EC  B4D8               	btfsc	status,2,c
  1023  0026EE  D7FC               	goto	l4818
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;test2.c: 98: CCP3CON = 0b00000000;
  1027                           
  1028                           ; BSR set to: 0
  1029  0026F0  0E00               	movlw	0
  1030  0026F2  6EB7               	movwf	4023,c	;volatile
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;test2.c: 100: T3CONbits.TMR3ON = 0;
  1034  0026F4  90B1               	bcf	4017,0,c	;volatile
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;test2.c: 101: WriteTimer3(0x0000);
  1038  0026F6  0E00               	movlw	0
  1039  0026F8  6E14               	movwf	WriteTimer3@timer3+1,c
  1040  0026FA  0E00               	movlw	0
  1041  0026FC  6E13               	movwf	WriteTimer3@timer3,c
  1042  0026FE  EC69  F01C         	call	_WriteTimer3	;wreg free
  1043                           
  1044                           ;test2.c: 103: Delay10KTCYx(200);
  1045  002702  0EC8               	movlw	200
  1046  002704  EC5E  F01C         	call	_Delay10KTCYx
  1047                           
  1048                           ;test2.c: 105: IO_LCD_SetCursor(4,1);
  1049  002708  0E01               	movlw	1
  1050  00270A  6E16               	movwf	IO_LCD_SetCursor@col,c
  1051  00270C  0E04               	movlw	4
  1052  00270E  EC07  F01B         	call	_IO_LCD_SetCursor
  1053                           
  1054                           ;test2.c: 106: IO_LCD_putrs("UNARMED");
  1055  002712  0E9B               	movlw	low STR_3
  1056  002714  6E16               	movwf	IO_LCD_putrs@str,c
  1057  002716  0E10               	movlw	high STR_3
  1058  002718  6E17               	movwf	IO_LCD_putrs@str+1,c
  1059  00271A  ECD9  F01A         	call	_IO_LCD_putrs	;wreg free
  1060                           
  1061                           ;test2.c: 109: }
  1062  00271E  D7C2               	goto	l4800
  1063  002720                     l361:
  1064                           
  1065                           ;test2.c: 110: else {
  1066                           ;test2.c: 112: LATGbits.LATG0 = 0;
  1067  002720  908F               	bcf	3983,0,c	;volatile
  1068                           
  1069                           ;test2.c: 114: timer_reg_value += IO_Encoder_getCount();
  1070  002722  EC45  F01C         	call	_IO_Encoder_getCount	;wreg free
  1071  002726  5013               	movf	?_IO_Encoder_getCount,w,c
  1072  002728  0100               	movlb	0	; () banked
  1073  00272A  27B3               	addwf	main@timer_reg_value& (0+255),f,b
  1074  00272C  5014               	movf	?_IO_Encoder_getCount+1,w,c
  1075  00272E  0100               	movlb	0	; () banked
  1076  002730  23B4               	addwfc	(main@timer_reg_value+1)& (0+255),f,b
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;test2.c: 116: if(timer_reg_value == 0) {
  1080  002732  0100               	movlb	0	; () banked
  1081  002734  51B3               	movf	main@timer_reg_value& (0+255),w,b
  1082  002736  0100               	movlb	0	; () banked
  1083  002738  11B4               	iorwf	(main@timer_reg_value+1)& (0+255),w,b
  1084  00273A  A4D8               	btfss	status,2,c
  1085  00273C  D003               	goto	l4840
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;test2.c: 117: timer_reg_value = 65535;
  1089  00273E  0100               	movlb	0	; () banked
  1090  002740  69B3               	setf	main@timer_reg_value& (0+255),b
  1091  002742  69B4               	setf	(main@timer_reg_value+1)& (0+255),b
  1092  002744                     l4840:
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;test2.c: 121: }
  1096                           ;test2.c: 123: sprintf(buff, "%-5u", timer_reg_value);
  1097  002744  0E9C               	movlw	low main@buff
  1098  002746  0100               	movlb	0	; () banked
  1099  002748  6F76               	movwf	sprintf@sp& (0+255),b
  1100  00274A  0E00               	movlw	high main@buff
  1101  00274C  0100               	movlb	0	; () banked
  1102  00274E  6F77               	movwf	(sprintf@sp+1)& (0+255),b
  1103  002750  0EAA               	movlw	low STR_6
  1104  002752  0100               	movlb	0	; () banked
  1105  002754  6F78               	movwf	sprintf@f& (0+255),b
  1106  002756  0E10               	movlw	high STR_6
  1107  002758  0100               	movlb	0	; () banked
  1108  00275A  6F79               	movwf	(sprintf@f+1)& (0+255),b
  1109  00275C  C0B3  F07A         	movff	main@timer_reg_value,?_sprintf+4
  1110  002760  C0B4  F07B         	movff	main@timer_reg_value+1,?_sprintf+5
  1111  002764  EC58  F008         	call	_sprintf	;wreg free
  1112                           
  1113                           ;test2.c: 124: IO_LCD_SetCursor(1, 15);
  1114  002768  0E0F               	movlw	15
  1115  00276A  6E16               	movwf	IO_LCD_SetCursor@col,c
  1116  00276C  0E01               	movlw	1
  1117  00276E  EC07  F01B         	call	_IO_LCD_SetCursor
  1118                           
  1119                           ;test2.c: 125: IO_LCD_puts(buff);
  1120  002772  0E9C               	movlw	low main@buff
  1121  002774  6E16               	movwf	IO_LCD_puts@str,c
  1122  002776  0E00               	movlw	high main@buff
  1123  002778  6E17               	movwf	IO_LCD_puts@str+1,c
  1124  00277A  EC73  F01B         	call	_IO_LCD_puts	;wreg free
  1125                           
  1126                           ;test2.c: 127: duration_us = 0.4 * timer_reg_value;
  1127  00277E  C0B3  F01B         	movff	main@timer_reg_value,___lwtoft@c
  1128  002782  C0B4  F01C         	movff	main@timer_reg_value+1,___lwtoft@c+1
  1129  002786  ECE0  F01B         	call	___lwtoft	;wreg free
  1130  00278A  C01B  F027         	movff	?___lwtoft,___ftmul@f1
  1131  00278E  C01C  F028         	movff	?___lwtoft+1,___ftmul@f1+1
  1132  002792  C01D  F029         	movff	?___lwtoft+2,___ftmul@f1+2
  1133  002796  0ECD               	movlw	205
  1134  002798  6E2A               	movwf	___ftmul@f2,c
  1135  00279A  0ECC               	movlw	204
  1136  00279C  6E2B               	movwf	___ftmul@f2+1,c
  1137  00279E  0E3E               	movlw	62
  1138  0027A0  6E2C               	movwf	___ftmul@f2+2,c
  1139  0027A2  ECE7  F016         	call	___ftmul	;wreg free
  1140  0027A6  C027  F0B0         	movff	?___ftmul,main@duration_us
  1141  0027AA  C028  F0B1         	movff	?___ftmul+1,main@duration_us+1
  1142  0027AE  C029  F0B2         	movff	?___ftmul+2,main@duration_us+2
  1143                           
  1144                           ;test2.c: 130: sprintf(buff, "%-8.1f", duration_us);
  1145  0027B2  0E9C               	movlw	low main@buff
  1146  0027B4  0100               	movlb	0	; () banked
  1147  0027B6  6F76               	movwf	sprintf@sp& (0+255),b
  1148  0027B8  0E00               	movlw	high main@buff
  1149  0027BA  0100               	movlb	0	; () banked
  1150  0027BC  6F77               	movwf	(sprintf@sp+1)& (0+255),b
  1151  0027BE  0EA3               	movlw	low STR_7
  1152  0027C0  0100               	movlb	0	; () banked
  1153  0027C2  6F78               	movwf	sprintf@f& (0+255),b
  1154  0027C4  0E10               	movlw	high STR_7
  1155  0027C6  0100               	movlb	0	; () banked
  1156  0027C8  6F79               	movwf	(sprintf@f+1)& (0+255),b
  1157  0027CA  C0B0  F07A         	movff	main@duration_us,?_sprintf+4
  1158  0027CE  C0B1  F07B         	movff	main@duration_us+1,?_sprintf+5
  1159  0027D2  C0B2  F07C         	movff	main@duration_us+2,?_sprintf+6
  1160  0027D6  EC58  F008         	call	_sprintf	;wreg free
  1161                           
  1162                           ;test2.c: 131: IO_LCD_SetCursor(2, 13);
  1163  0027DA  0E0D               	movlw	13
  1164  0027DC  6E16               	movwf	IO_LCD_SetCursor@col,c
  1165  0027DE  0E02               	movlw	2
  1166  0027E0  EC07  F01B         	call	_IO_LCD_SetCursor
  1167                           
  1168                           ;test2.c: 132: IO_LCD_puts(buff);
  1169  0027E4  0E9C               	movlw	low main@buff
  1170  0027E6  6E16               	movwf	IO_LCD_puts@str,c
  1171  0027E8  0E00               	movlw	high main@buff
  1172  0027EA  6E17               	movwf	IO_LCD_puts@str+1,c
  1173  0027EC  EC73  F01B         	call	_IO_LCD_puts	;wreg free
  1174                           
  1175                           ;test2.c: 134: Delay10KTCYx(10);
  1176  0027F0  0E0A               	movlw	10
  1177  0027F2  EC5E  F01C         	call	_Delay10KTCYx
  1178  0027F6  D756               	goto	l4800
  1179  0027F8                     __end_of_main:
  1180                           	opt stack 0
  1181                           intcon	equ	0xFF2
  1182                           postinc0	equ	0xFEE
  1183                           wreg	equ	0xFE8
  1184                           status	equ	0xFD8
  1185                           
  1186 ;; *************** function _sprintf *****************
  1187 ;; Defined at:
  1188 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;  sp              2   22[BANK0 ] PTR unsigned char 
  1191 ;;		 -> main@buff(20), 
  1192 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  1193 ;;		 -> STR_7(7), STR_6(5), 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  tmpval          4   44[BANK0 ] struct .
  1196 ;;  val             4   40[BANK0 ] unsigned long 
  1197 ;;  fval            3   52[BANK0 ] unsigned long 
  1198 ;;  cp              3    0        PTR const unsigned char 
  1199 ;;  prec            2   57[BANK0 ] int 
  1200 ;;  width           2   55[BANK0 ] int 
  1201 ;;  flag            2   50[BANK0 ] unsigned short 
  1202 ;;  exp             2   48[BANK0 ] int 
  1203 ;;  ap              2   38[BANK0 ] PTR void [1]
  1204 ;;		 -> ?_sprintf(2), 
  1205 ;;  len             2    0        unsigned int 
  1206 ;;  c               1   59[BANK0 ] char 
  1207 ;;  d               1    0        unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  2   22[BANK0 ] int 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:       38 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    7
  1224 ;; This function calls:
  1225 ;;		___awdiv
  1226 ;;		___ftadd
  1227 ;;		___ftge
  1228 ;;		___ftmul
  1229 ;;		___ftneg
  1230 ;;		___ftsub
  1231 ;;		___fttol
  1232 ;;		___lldiv
  1233 ;;		___llmod
  1234 ;;		___lltoft
  1235 ;;		___wmul
  1236 ;;		__div_to_l_
  1237 ;;		__tdiv_to_l_
  1238 ;;		_fround
  1239 ;;		_isdigit
  1240 ;;		_scale
  1241 ;; This function is called by:
  1242 ;;		_main
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text1
  1247  0010B0                     __ptext1:
  1248                           	opt stack 0
  1249  0010B0                     _sprintf:
  1250                           	opt stack 23
  1251                           
  1252                           ;doprnt.c: 494: va_list ap;
  1253                           ;doprnt.c: 499: signed char c;
  1254                           ;doprnt.c: 501: int width;
  1255                           ;doprnt.c: 504: int prec;
  1256                           ;doprnt.c: 508: unsigned short flag;
  1257                           ;doprnt.c: 515: char d;
  1258                           ;doprnt.c: 516: double fval;
  1259                           ;doprnt.c: 517: int exp;
  1260                           ;doprnt.c: 523: union {
  1261                           ;doprnt.c: 524: unsigned long vd;
  1262                           ;doprnt.c: 525: double integ;
  1263                           ;doprnt.c: 526: } tmpval;
  1264                           ;doprnt.c: 528: unsigned long val;
  1265                           ;doprnt.c: 529: unsigned len;
  1266                           ;doprnt.c: 530: const char * cp;
  1267                           ;doprnt.c: 533: *ap = __va_start();
  1268                           
  1269                           ;incstack = 0
  1270  0010B0  0E7A               	movlw	low (?_sprintf+4)
  1271  0010B2  0100               	movlb	0	; () banked
  1272  0010B4  6F86               	movwf	sprintf@ap& (0+255),b
  1273  0010B6  0E00               	movlw	high (?_sprintf+4)
  1274  0010B8  0100               	movlb	0	; () banked
  1275  0010BA  6F87               	movwf	(sprintf@ap+1)& (0+255),b
  1276                           
  1277                           ;doprnt.c: 536: while(c = *f++) {
  1278  0010BC  EF68  F00E         	goto	l4746
  1279  0010C0                     l4436:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;doprnt.c: 538: if(c != '%')
  1283  0010C0  0E25               	movlw	37
  1284  0010C2  0100               	movlb	0	; () banked
  1285  0010C4  199B               	xorwf	sprintf@c& (0+255),w,b
  1286  0010C6  B4D8               	btfsc	status,2,c
  1287  0010C8  D00B               	goto	l4442
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;doprnt.c: 540: {
  1291                           ;doprnt.c: 541: ((*sp++ = (c)));
  1292  0010CA  C076  FFD9         	movff	sprintf@sp,fsr2l
  1293  0010CE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  1294  0010D2  C09B  FFDF         	movff	sprintf@c,indf2
  1295                           
  1296                           ; BSR set to: 0
  1297  0010D6  0100               	movlb	0	; () banked
  1298  0010D8  4B76               	infsnz	sprintf@sp& (0+255),f,b
  1299  0010DA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  1300                           
  1301                           ;doprnt.c: 542: continue;
  1302  0010DC  EF68  F00E         	goto	l4746
  1303  0010E0                     l4442:
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;doprnt.c: 543: }
  1307                           ;doprnt.c: 546: width = 0;
  1308  0010E0  0E00               	movlw	0
  1309  0010E2  0100               	movlb	0	; () banked
  1310  0010E4  6F98               	movwf	(sprintf@width+1)& (0+255),b
  1311  0010E6  0E00               	movlw	0
  1312  0010E8  6F97               	movwf	sprintf@width& (0+255),b
  1313                           
  1314                           ;doprnt.c: 548: flag = 0;
  1315  0010EA  0E00               	movlw	0
  1316  0010EC  0100               	movlb	0	; () banked
  1317  0010EE  6F93               	movwf	(sprintf@flag+1)& (0+255),b
  1318  0010F0  0E00               	movlw	0
  1319  0010F2  6F92               	movwf	sprintf@flag& (0+255),b
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 551: switch(*f) {
  1323                           
  1324                           ;doprnt.c: 550: for(;;) {
  1325  0010F4  D005               	goto	l4448
  1326  0010F6                     l4444:
  1327                           
  1328                           ;doprnt.c: 554: flag |= 0x08;
  1329  0010F6  0100               	movlb	0	; () banked
  1330  0010F8  8792               	bsf	sprintf@flag& (0+255),3,b
  1331                           
  1332                           ;doprnt.c: 555: f++;
  1333  0010FA  0100               	movlb	0	; () banked
  1334  0010FC  4B78               	infsnz	sprintf@f& (0+255),f,b
  1335  0010FE  2B79               	incf	(sprintf@f+1)& (0+255),f,b
  1336  001100                     l4448:
  1337  001100  C078  FFF6         	movff	sprintf@f,tblptrl
  1338  001104  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1339  001108                     	if	0	;tblptru may be non-zero
  1340  001108                     	endif
  1341  001108                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1342  001108  0E00               	movlw	low (__mediumconst shr (0+16))
  1343  00110A  6EF8               	movwf	tblptru,c
  1344  00110C                     	endif
  1345  00110C  0008               	tblrd		*
  1346  00110E  50F5               	movf	tablat,w,c
  1347                           
  1348                           ; Switch size 1, requested type "space"
  1349                           ; Number of cases is 1, Range of values is 45 to 45
  1350                           ; switch strategies available:
  1351                           ; Name         Instructions Cycles
  1352                           ; simple_byte            4     3 (average)
  1353                           ;	Chosen strategy is simple_byte
  1354  001110  0A2D               	xorlw	45	; case 45
  1355  001112  B4D8               	btfsc	status,2,c
  1356  001114  D7F0               	goto	l4444
  1357                           
  1358                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1359                           
  1360                           ;doprnt.c: 586: }
  1361                           
  1362                           ;doprnt.c: 585: break;
  1363  001116  C078  FFF6         	movff	sprintf@f,tblptrl
  1364  00111A  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1365  00111E                     	if	0	;tblptru may be non-zero
  1366  00111E                     	endif
  1367  00111E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1368  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
  1369  001120  6EF8               	movwf	tblptru,c
  1370  001122                     	endif
  1371  001122  0008               	tblrd		*
  1372  001124  50F5               	movf	tablat,w,c
  1373  001126  ECF2  F01B         	call	_isdigit
  1374  00112A  A0D8               	btfss	status,0,c
  1375  00112C  D043               	goto	l4462
  1376                           
  1377                           ;doprnt.c: 598: width = 0;
  1378  00112E  0E00               	movlw	0
  1379  001130  0100               	movlb	0	; () banked
  1380  001132  6F98               	movwf	(sprintf@width+1)& (0+255),b
  1381  001134  0E00               	movlw	0
  1382  001136  6F97               	movwf	sprintf@width& (0+255),b
  1383  001138                     l4454:
  1384                           
  1385                           ;doprnt.c: 600: width *= 10;
  1386  001138  C097  F021         	movff	sprintf@width,___wmul@multiplier
  1387  00113C  C098  F022         	movff	sprintf@width+1,___wmul@multiplier+1
  1388  001140  0E00               	movlw	0
  1389  001142  6E24               	movwf	___wmul@multiplicand+1,c
  1390  001144  0E0A               	movlw	10
  1391  001146  6E23               	movwf	___wmul@multiplicand,c
  1392  001148  ECBB  F01B         	call	___wmul	;wreg free
  1393  00114C  C021  F097         	movff	?___wmul,sprintf@width
  1394  001150  C022  F098         	movff	?___wmul+1,sprintf@width+1
  1395                           
  1396                           ;doprnt.c: 601: width += *f++ - '0';
  1397  001154  0ED0               	movlw	208
  1398  001156  0100               	movlb	0	; () banked
  1399  001158  6F7D               	movwf	??_sprintf& (0+255),b
  1400  00115A  0EFF               	movlw	255
  1401  00115C  0100               	movlb	0	; () banked
  1402  00115E  6F7E               	movwf	(??_sprintf+1)& (0+255),b
  1403  001160  C078  FFF6         	movff	sprintf@f,tblptrl
  1404  001164  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1405  001168                     	if	0	;tblptru may be non-zero
  1406  001168                     	endif
  1407  001168                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1408  001168  0E00               	movlw	low (__mediumconst shr (0+16))
  1409  00116A  6EF8               	movwf	tblptru,c
  1410  00116C                     	endif
  1411  00116C  0008               	tblrd		*
  1412  00116E  50F5               	movf	tablat,w,c
  1413  001170  0100               	movlb	0	; () banked
  1414  001172  6F7F               	movwf	(??_sprintf+2)& (0+255),b
  1415  001174  6B80               	clrf	(??_sprintf+3)& (0+255),b
  1416  001176  0100               	movlb	0	; () banked
  1417  001178  517D               	movf	??_sprintf& (0+255),w,b
  1418  00117A  0100               	movlb	0	; () banked
  1419  00117C  277F               	addwf	(??_sprintf+2)& (0+255),f,b
  1420  00117E  0100               	movlb	0	; () banked
  1421  001180  517E               	movf	(??_sprintf+1)& (0+255),w,b
  1422  001182  0100               	movlb	0	; () banked
  1423  001184  2380               	addwfc	(??_sprintf+3)& (0+255),f,b
  1424  001186  0100               	movlb	0	; () banked
  1425  001188  517F               	movf	(??_sprintf+2)& (0+255),w,b
  1426  00118A  0100               	movlb	0	; () banked
  1427  00118C  2797               	addwf	sprintf@width& (0+255),f,b
  1428  00118E  0100               	movlb	0	; () banked
  1429  001190  5180               	movf	(??_sprintf+3)& (0+255),w,b
  1430  001192  0100               	movlb	0	; () banked
  1431  001194  2398               	addwfc	(sprintf@width+1)& (0+255),f,b
  1432                           
  1433                           ; BSR set to: 0
  1434  001196  0100               	movlb	0	; () banked
  1435  001198  4B78               	infsnz	sprintf@f& (0+255),f,b
  1436  00119A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1440  00119C  C078  FFF6         	movff	sprintf@f,tblptrl
  1441  0011A0  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1442  0011A4                     	if	0	;tblptru may be non-zero
  1443  0011A4                     	endif
  1444  0011A4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1445  0011A4  0E00               	movlw	low (__mediumconst shr (0+16))
  1446  0011A6  6EF8               	movwf	tblptru,c
  1447  0011A8                     	endif
  1448  0011A8  0008               	tblrd		*
  1449  0011AA  50F5               	movf	tablat,w,c
  1450  0011AC  ECF2  F01B         	call	_isdigit
  1451  0011B0  B0D8               	btfsc	status,0,c
  1452  0011B2  D7C2               	goto	l4454
  1453  0011B4                     l4462:
  1454                           
  1455                           ;doprnt.c: 608: }
  1456                           ;doprnt.c: 611: if(*f == '.') {
  1457  0011B4  C078  FFF6         	movff	sprintf@f,tblptrl
  1458  0011B8  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1459  0011BC                     	if	0	;tblptru may be non-zero
  1460  0011BC                     	endif
  1461  0011BC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1462  0011BC  0E00               	movlw	low (__mediumconst shr (0+16))
  1463  0011BE  6EF8               	movwf	tblptru,c
  1464  0011C0                     	endif
  1465  0011C0  0008               	tblrd		*
  1466  0011C2  50F5               	movf	tablat,w,c
  1467  0011C4  0A2E               	xorlw	46
  1468  0011C6  A4D8               	btfss	status,2,c
  1469  0011C8  D038               	goto	l4474
  1470                           
  1471                           ;doprnt.c: 612: flag |= 0x4000;
  1472  0011CA  0100               	movlb	0	; () banked
  1473  0011CC  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
  1474                           
  1475                           ;doprnt.c: 613: f++;
  1476  0011CE  0100               	movlb	0	; () banked
  1477  0011D0  4B78               	infsnz	sprintf@f& (0+255),f,b
  1478  0011D2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;doprnt.c: 620: {
  1482                           ;doprnt.c: 621: prec = 0;
  1483  0011D4  0E00               	movlw	0
  1484  0011D6  0100               	movlb	0	; () banked
  1485  0011D8  6F9A               	movwf	(sprintf@prec+1)& (0+255),b
  1486  0011DA  0E00               	movlw	0
  1487  0011DC  6F99               	movwf	sprintf@prec& (0+255),b
  1488                           
  1489                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1490  0011DE  D020               	goto	l4472
  1491  0011E0                     l4468:
  1492                           
  1493                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1494  0011E0  C099  F021         	movff	sprintf@prec,___wmul@multiplier
  1495  0011E4  C09A  F022         	movff	sprintf@prec+1,___wmul@multiplier+1
  1496  0011E8  0E00               	movlw	0
  1497  0011EA  6E24               	movwf	___wmul@multiplicand+1,c
  1498  0011EC  0E0A               	movlw	10
  1499  0011EE  6E23               	movwf	___wmul@multiplicand,c
  1500  0011F0  ECBB  F01B         	call	___wmul	;wreg free
  1501  0011F4  C078  FFF6         	movff	sprintf@f,tblptrl
  1502  0011F8  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1503  0011FC                     	if	0	;tblptru may be non-zero
  1504  0011FC                     	endif
  1505  0011FC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1506  0011FC  0E00               	movlw	low (__mediumconst shr (0+16))
  1507  0011FE  6EF8               	movwf	tblptru,c
  1508  001200                     	endif
  1509  001200  0008               	tblrd		*
  1510  001202  50F5               	movf	tablat,w,c
  1511  001204  2621               	addwf	?___wmul,f,c
  1512  001206  0E00               	movlw	0
  1513  001208  2222               	addwfc	?___wmul+1,f,c
  1514  00120A  0ED0               	movlw	208
  1515  00120C  2421               	addwf	?___wmul,w,c
  1516  00120E  0100               	movlb	0	; () banked
  1517  001210  6F99               	movwf	sprintf@prec& (0+255),b
  1518  001212  0EFF               	movlw	255
  1519  001214  2022               	addwfc	?___wmul+1,w,c
  1520  001216  0100               	movlb	0	; () banked
  1521  001218  6F9A               	movwf	(sprintf@prec+1)& (0+255),b
  1522                           
  1523                           ; BSR set to: 0
  1524  00121A  0100               	movlb	0	; () banked
  1525  00121C  4B78               	infsnz	sprintf@f& (0+255),f,b
  1526  00121E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
  1527  001220                     l4472:
  1528                           
  1529                           ; BSR set to: 0
  1530  001220  C078  FFF6         	movff	sprintf@f,tblptrl
  1531  001224  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1532  001228                     	if	0	;tblptru may be non-zero
  1533  001228                     	endif
  1534  001228                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1535  001228  0E00               	movlw	low (__mediumconst shr (0+16))
  1536  00122A  6EF8               	movwf	tblptru,c
  1537  00122C                     	endif
  1538  00122C  0008               	tblrd		*
  1539  00122E  50F5               	movf	tablat,w,c
  1540  001230  ECF2  F01B         	call	_isdigit
  1541  001234  A0D8               	btfss	status,0,c
  1542  001236  D010               	goto	l4484
  1543  001238  D7D3               	goto	l4468
  1544  00123A                     l4474:
  1545                           
  1546                           ;doprnt.c: 626: prec = 0;
  1547  00123A  0E00               	movlw	0
  1548  00123C  0100               	movlb	0	; () banked
  1549  00123E  6F9A               	movwf	(sprintf@prec+1)& (0+255),b
  1550  001240  0E00               	movlw	0
  1551  001242  6F99               	movwf	sprintf@prec& (0+255),b
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;doprnt.c: 628: flag |= 0x1000;
  1555  001244  0100               	movlb	0	; () banked
  1556  001246  8993               	bsf	(sprintf@flag+1)& (0+255),4,b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;doprnt.c: 630: }
  1560                           ;doprnt.c: 635: switch(c = *f++) {
  1561  001248  D007               	goto	l4484
  1562  00124A                     l4478:
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;doprnt.c: 663: flag |= 0x400;
  1566  00124A  0100               	movlb	0	; () banked
  1567  00124C  8593               	bsf	(sprintf@flag+1)& (0+255),2,b
  1568                           
  1569                           ;doprnt.c: 664: break;
  1570  00124E  D01E               	goto	l4486
  1571  001250                     l4480:
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;doprnt.c: 818: flag |= 0xC0;
  1575  001250  0EC0               	movlw	192
  1576  001252  0100               	movlb	0	; () banked
  1577  001254  1392               	iorwf	sprintf@flag& (0+255),f,b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;doprnt.c: 822: }
  1581                           
  1582                           ;doprnt.c: 819: break;
  1583  001256  D01A               	goto	l4486
  1584  001258                     l4484:
  1585  001258  C078  FFF6         	movff	sprintf@f,tblptrl
  1586  00125C  C079  FFF7         	movff	sprintf@f+1,tblptrh
  1587  001260  0100               	movlb	0	; () banked
  1588  001262  4B78               	infsnz	sprintf@f& (0+255),f,b
  1589  001264  2B79               	incf	(sprintf@f+1)& (0+255),f,b
  1590  001266                     	if	0	;tblptru may be non-zero
  1591  001266                     	endif
  1592  001266                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1593  001266  0E00               	movlw	low (__mediumconst shr (0+16))
  1594  001268  6EF8               	movwf	tblptru,c
  1595  00126A                     	endif
  1596  00126A  0008               	tblrd		*
  1597  00126C  CFF5 F09B          	movff	tablat,sprintf@c
  1598  001270  0100               	movlb	0	; () banked
  1599  001272  519B               	movf	sprintf@c& (0+255),w,b
  1600                           
  1601                           ; Switch size 1, requested type "space"
  1602                           ; Number of cases is 3, Range of values is 0 to 117
  1603                           ; switch strategies available:
  1604                           ; Name         Instructions Cycles
  1605                           ; simple_byte           10     6 (average)
  1606                           ;	Chosen strategy is simple_byte
  1607  001274  0A00               	xorlw	0	; case 0
  1608  001276  B4D8               	btfsc	status,2,c
  1609  001278  EF79  F00E         	goto	l4748
  1610  00127C  0A66               	xorlw	102	; case 102
  1611  00127E  B4D8               	btfsc	status,2,c
  1612  001280  D7E4               	goto	l4478
  1613  001282  0A13               	xorlw	19	; case 117
  1614  001284  B4D8               	btfsc	status,2,c
  1615  001286  D7E4               	goto	l4480
  1616  001288  EF68  F00E         	goto	l4746
  1617  00128C                     l4486:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;doprnt.c: 825: if(flag & (0x700)) {
  1621  00128C  0E07               	movlw	7
  1622  00128E  0100               	movlb	0	; () banked
  1623  001290  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  1624  001292  B4D8               	btfsc	status,2,c
  1625  001294  D39C               	goto	l4662
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;doprnt.c: 827: if(flag & 0x1000)
  1629  001296  0100               	movlb	0	; () banked
  1630  001298  A993               	btfss	(sprintf@flag+1)& (0+255),4,b
  1631  00129A  D005               	goto	l4492
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;doprnt.c: 829: prec = 6;
  1635  00129C  0E00               	movlw	0
  1636  00129E  0100               	movlb	0	; () banked
  1637  0012A0  6F9A               	movwf	(sprintf@prec+1)& (0+255),b
  1638  0012A2  0E06               	movlw	6
  1639  0012A4  6F99               	movwf	sprintf@prec& (0+255),b
  1640  0012A6                     l4492:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1644  0012A6  C086  FFD9         	movff	sprintf@ap,fsr2l
  1645  0012AA  C087  FFDA         	movff	sprintf@ap+1,fsr2h
  1646  0012AE  CFDE F094          	movff	postinc2,sprintf@fval
  1647  0012B2  CFDE F095          	movff	postinc2,sprintf@fval+1
  1648  0012B6  CFDD F096          	movff	postdec2,sprintf@fval+2
  1649                           
  1650                           ; BSR set to: 0
  1651  0012BA  0E03               	movlw	3
  1652  0012BC  0100               	movlb	0	; () banked
  1653  0012BE  2786               	addwf	sprintf@ap& (0+255),f,b
  1654  0012C0  0E00               	movlw	0
  1655  0012C2  2387               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;doprnt.c: 831: if(fval < 0.0) {
  1659  0012C4  0100               	movlb	0	; () banked
  1660  0012C6  AF96               	btfss	(sprintf@fval+2)& (0+255),7,b
  1661  0012C8  D011               	goto	l4502
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;doprnt.c: 832: fval = -fval;
  1665  0012CA  C094  F013         	movff	sprintf@fval,___ftneg@f1
  1666  0012CE  C095  F014         	movff	sprintf@fval+1,___ftneg@f1+1
  1667  0012D2  C096  F015         	movff	sprintf@fval+2,___ftneg@f1+2
  1668  0012D6  ECCE  F01B         	call	___ftneg	;wreg free
  1669  0012DA  C013  F094         	movff	?___ftneg,sprintf@fval
  1670  0012DE  C014  F095         	movff	?___ftneg+1,sprintf@fval+1
  1671  0012E2  C015  F096         	movff	?___ftneg+2,sprintf@fval+2
  1672                           
  1673                           ;doprnt.c: 833: flag |= 0x03;
  1674  0012E6  0E03               	movlw	3
  1675  0012E8  0100               	movlb	0	; () banked
  1676  0012EA  1392               	iorwf	sprintf@flag& (0+255),f,b
  1677  0012EC                     l4502:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;doprnt.c: 834: }
  1681                           ;doprnt.c: 835: exp = 0;
  1682  0012EC  0E00               	movlw	0
  1683  0012EE  0100               	movlb	0	; () banked
  1684  0012F0  6F91               	movwf	(sprintf@exp+1)& (0+255),b
  1685  0012F2  0E00               	movlw	0
  1686  0012F4  6F90               	movwf	sprintf@exp& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 836: if( fval!=0) {
  1690  0012F6  0100               	movlb	0	; () banked
  1691  0012F8  5194               	movf	sprintf@fval& (0+255),w,b
  1692  0012FA  0100               	movlb	0	; () banked
  1693  0012FC  1195               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1694  0012FE  0100               	movlb	0	; () banked
  1695  001300  1196               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1696  001302  B4D8               	btfsc	status,2,c
  1697  001304  D091               	goto	l4530
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1701  001306  0E82               	movlw	130
  1702  001308  0100               	movlb	0	; () banked
  1703  00130A  6F7D               	movwf	??_sprintf& (0+255),b
  1704  00130C  0EFF               	movlw	255
  1705  00130E  0100               	movlb	0	; () banked
  1706  001310  6F7E               	movwf	(??_sprintf+1)& (0+255),b
  1707  001312  C094  F07F         	movff	sprintf@fval,??_sprintf+2
  1708  001316  C095  F080         	movff	sprintf@fval+1,??_sprintf+3
  1709  00131A  C096  F081         	movff	sprintf@fval+2,??_sprintf+4
  1710  00131E  C097  F082         	movff	sprintf@fval+3,??_sprintf+5
  1711  001322  0E10               	movlw	16
  1712  001324  D006               	goto	u5360
  1713  001326                     u5365:
  1714  001326  0100               	movlb	0	; () banked
  1715  001328  90D8               	bcf	status,0,c
  1716  00132A  3382               	rrcf	(??_sprintf+5)& (0+255),f,b
  1717  00132C  3381               	rrcf	(??_sprintf+4)& (0+255),f,b
  1718  00132E  3380               	rrcf	(??_sprintf+3)& (0+255),f,b
  1719  001330  337F               	rrcf	(??_sprintf+2)& (0+255),f,b
  1720  001332                     u5360:
  1721  001332  2EE8               	decfsz	wreg,f,c
  1722  001334  D7F8               	goto	u5365
  1723  001336  0100               	movlb	0	; () banked
  1724  001338  517F               	movf	(??_sprintf+2)& (0+255),w,b
  1725  00133A  0100               	movlb	0	; () banked
  1726  00133C  257D               	addwf	??_sprintf& (0+255),w,b
  1727  00133E  0100               	movlb	0	; () banked
  1728  001340  6F90               	movwf	sprintf@exp& (0+255),b
  1729  001342  0E00               	movlw	0
  1730  001344  0100               	movlb	0	; () banked
  1731  001346  217E               	addwfc	(??_sprintf+1)& (0+255),w,b
  1732  001348  0100               	movlb	0	; () banked
  1733  00134A  6F91               	movwf	(sprintf@exp+1)& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;doprnt.c: 838: exp--;
  1737  00134C  0100               	movlb	0	; () banked
  1738  00134E  0790               	decf	sprintf@exp& (0+255),f,b
  1739  001350  A0D8               	btfss	status,0,c
  1740  001352  0791               	decf	(sprintf@exp+1)& (0+255),f,b
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;doprnt.c: 839: exp *= 3;
  1744  001354  C090  F021         	movff	sprintf@exp,___wmul@multiplier
  1745  001358  C091  F022         	movff	sprintf@exp+1,___wmul@multiplier+1
  1746  00135C  0E00               	movlw	0
  1747  00135E  6E24               	movwf	___wmul@multiplicand+1,c
  1748  001360  0E03               	movlw	3
  1749  001362  6E23               	movwf	___wmul@multiplicand,c
  1750  001364  ECBB  F01B         	call	___wmul	;wreg free
  1751  001368  C021  F090         	movff	?___wmul,sprintf@exp
  1752  00136C  C022  F091         	movff	?___wmul+1,sprintf@exp+1
  1753                           
  1754                           ;doprnt.c: 840: exp /= 10;
  1755  001370  C090  F019         	movff	sprintf@exp,___awdiv@dividend
  1756  001374  C091  F01A         	movff	sprintf@exp+1,___awdiv@dividend+1
  1757  001378  0E00               	movlw	0
  1758  00137A  6E1C               	movwf	___awdiv@divisor+1,c
  1759  00137C  0E0A               	movlw	10
  1760  00137E  6E1B               	movwf	___awdiv@divisor,c
  1761  001380  EC44  F019         	call	___awdiv	;wreg free
  1762  001384  C019  F090         	movff	?___awdiv,sprintf@exp
  1763  001388  C01A  F091         	movff	?___awdiv+1,sprintf@exp+1
  1764                           
  1765                           ;doprnt.c: 841: if(exp < 0)
  1766  00138C  0100               	movlb	0	; () banked
  1767  00138E  AF91               	btfss	(sprintf@exp+1)& (0+255),7,b
  1768  001390  D004               	goto	l4518
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;doprnt.c: 842: exp--;
  1772  001392  0100               	movlb	0	; () banked
  1773  001394  0790               	decf	sprintf@exp& (0+255),f,b
  1774  001396  A0D8               	btfss	status,0,c
  1775  001398  0791               	decf	(sprintf@exp+1)& (0+255),f,b
  1776  00139A                     l4518:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1780  00139A  0100               	movlb	0	; () banked
  1781  00139C  5190               	movf	sprintf@exp& (0+255),w,b
  1782  00139E  0800               	sublw	0
  1783  0013A0  EC80  F00E         	call	_scale
  1784  0013A4  C036  F08C         	movff	?_scale,sprintf@tmpval
  1785  0013A8  C037  F08D         	movff	?_scale+1,sprintf@tmpval+1
  1786  0013AC  C038  F08E         	movff	?_scale+2,sprintf@tmpval+2
  1787                           
  1788                           ;doprnt.c: 847: tmpval.integ *= fval;
  1789  0013B0  C08C  F027         	movff	sprintf@tmpval,___ftmul@f1
  1790  0013B4  C08D  F028         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1791  0013B8  C08E  F029         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1792  0013BC  C094  F02A         	movff	sprintf@fval,___ftmul@f2
  1793  0013C0  C095  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  1794  0013C4  C096  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  1795  0013C8  ECE7  F016         	call	___ftmul	;wreg free
  1796  0013CC  C027  F08C         	movff	?___ftmul,sprintf@tmpval
  1797  0013D0  C028  F08D         	movff	?___ftmul+1,sprintf@tmpval+1
  1798  0013D4  C029  F08E         	movff	?___ftmul+2,sprintf@tmpval+2
  1799                           
  1800                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1801  0013D8  C08C  F013         	movff	sprintf@tmpval,___ftge@ff1
  1802  0013DC  C08D  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1803  0013E0  C08E  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1804  0013E4  0E00               	movlw	0
  1805  0013E6  6E16               	movwf	___ftge@ff2,c
  1806  0013E8  0E80               	movlw	128
  1807  0013EA  6E17               	movwf	___ftge@ff2+1,c
  1808  0013EC  0E3F               	movlw	63
  1809  0013EE  6E18               	movwf	___ftge@ff2+2,c
  1810  0013F0  EC6E  F018         	call	___ftge	;wreg free
  1811  0013F4  B0D8               	btfsc	status,0,c
  1812  0013F6  D005               	goto	l4526
  1813                           
  1814                           ;doprnt.c: 849: exp--;
  1815  0013F8  0100               	movlb	0	; () banked
  1816  0013FA  0790               	decf	sprintf@exp& (0+255),f,b
  1817  0013FC  A0D8               	btfss	status,0,c
  1818  0013FE  0791               	decf	(sprintf@exp+1)& (0+255),f,b
  1819  001400  D013               	goto	l4530
  1820  001402                     l4526:
  1821                           
  1822                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1823  001402  C08C  F013         	movff	sprintf@tmpval,___ftge@ff1
  1824  001406  C08D  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1825  00140A  C08E  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1826  00140E  0E00               	movlw	0
  1827  001410  6E16               	movwf	___ftge@ff2,c
  1828  001412  0E20               	movlw	32
  1829  001414  6E17               	movwf	___ftge@ff2+1,c
  1830  001416  0E41               	movlw	65
  1831  001418  6E18               	movwf	___ftge@ff2+2,c
  1832  00141A  EC6E  F018         	call	___ftge	;wreg free
  1833  00141E  A0D8               	btfss	status,0,c
  1834  001420  D003               	goto	l4530
  1835                           
  1836                           ;doprnt.c: 851: exp++;
  1837  001422  0100               	movlb	0	; () banked
  1838  001424  4B90               	infsnz	sprintf@exp& (0+255),f,b
  1839  001426  2B91               	incf	(sprintf@exp+1)& (0+255),f,b
  1840  001428                     l4530:
  1841                           
  1842                           ;doprnt.c: 852: }
  1843                           ;doprnt.c: 1112: if(prec <= 12)
  1844  001428  0100               	movlb	0	; () banked
  1845  00142A  BF9A               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1846  00142C  D008               	goto	l4532
  1847  00142E  0100               	movlb	0	; () banked
  1848  001430  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  1849  001432  E11D               	bnz	l4534
  1850  001434  0E0D               	movlw	13
  1851  001436  0100               	movlb	0	; () banked
  1852  001438  5D99               	subwf	sprintf@prec& (0+255),w,b
  1853  00143A  B0D8               	btfsc	status,0,c
  1854  00143C  D018               	goto	l4534
  1855  00143E                     l4532:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;doprnt.c: 1113: fval += fround(prec);
  1859  00143E  C094  F067         	movff	sprintf@fval,___ftadd@f1
  1860  001442  C095  F068         	movff	sprintf@fval+1,___ftadd@f1+1
  1861  001446  C096  F069         	movff	sprintf@fval+2,___ftadd@f1+2
  1862  00144A  0100               	movlb	0	; () banked
  1863  00144C  5199               	movf	sprintf@prec& (0+255),w,b
  1864  00144E  ECAF  F010         	call	_fround
  1865  001452  C036  F06A         	movff	?_fround,___ftadd@f2
  1866  001456  C037  F06B         	movff	?_fround+1,___ftadd@f2+1
  1867  00145A  C038  F06C         	movff	?_fround+2,___ftadd@f2+2
  1868  00145E  ECE8  F011         	call	___ftadd	;wreg free
  1869  001462  C067  F094         	movff	?___ftadd,sprintf@fval
  1870  001466  C068  F095         	movff	?___ftadd+1,sprintf@fval+1
  1871  00146A  C069  F096         	movff	?___ftadd+2,sprintf@fval+2
  1872  00146E                     l4534:
  1873                           
  1874                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1875  00146E  0100               	movlb	0	; () banked
  1876  001470  BF91               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1877  001472  D008               	goto	l4536
  1878  001474  0100               	movlb	0	; () banked
  1879  001476  5191               	movf	(sprintf@exp+1)& (0+255),w,b
  1880  001478  E12A               	bnz	l4542
  1881  00147A  0E0A               	movlw	10
  1882  00147C  0100               	movlb	0	; () banked
  1883  00147E  5D90               	subwf	sprintf@exp& (0+255),w,b
  1884  001480  B0D8               	btfsc	status,0,c
  1885  001482  D025               	goto	l4542
  1886  001484                     l4536:
  1887                           
  1888                           ; BSR set to: 0
  1889  001484  0100               	movlb	0	; () banked
  1890  001486  5194               	movf	sprintf@fval& (0+255),w,b
  1891  001488  0100               	movlb	0	; () banked
  1892  00148A  1195               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1893  00148C  0100               	movlb	0	; () banked
  1894  00148E  1196               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1895  001490  B4D8               	btfsc	status,2,c
  1896  001492  D05F               	goto	l4556
  1897                           
  1898                           ; BSR set to: 0
  1899  001494  C094  F064         	movff	sprintf@fval,___fttol@f1
  1900  001498  C095  F065         	movff	sprintf@fval+1,___fttol@f1+1
  1901  00149C  C096  F066         	movff	sprintf@fval+2,___fttol@f1+2
  1902  0014A0  ECFC  F013         	call	___fttol	;wreg free
  1903  0014A4  0100               	movlb	0	; () banked
  1904  0014A6  5164               	movf	?___fttol& (0+255),w,b
  1905  0014A8  0100               	movlb	0	; () banked
  1906  0014AA  1165               	iorwf	(?___fttol+1)& (0+255),w,b
  1907  0014AC  0100               	movlb	0	; () banked
  1908  0014AE  1166               	iorwf	(?___fttol+2)& (0+255),w,b
  1909  0014B0  0100               	movlb	0	; () banked
  1910  0014B2  1167               	iorwf	(?___fttol+3)& (0+255),w,b
  1911  0014B4  A4D8               	btfss	status,2,c
  1912  0014B6  D04D               	goto	l4556
  1913                           
  1914                           ; BSR set to: 0
  1915  0014B8  0100               	movlb	0	; () banked
  1916  0014BA  BF91               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1917  0014BC  D04A               	goto	l4556
  1918  0014BE  0100               	movlb	0	; () banked
  1919  0014C0  5191               	movf	(sprintf@exp+1)& (0+255),w,b
  1920  0014C2  E105               	bnz	l4542
  1921  0014C4  0E02               	movlw	2
  1922  0014C6  0100               	movlb	0	; () banked
  1923  0014C8  5D90               	subwf	sprintf@exp& (0+255),w,b
  1924  0014CA  A0D8               	btfss	status,0,c
  1925  0014CC  D042               	goto	l4556
  1926  0014CE                     l4542:
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1930  0014CE  C08C  F013         	movff	sprintf@tmpval,___ftge@ff1
  1931  0014D2  C08D  F014         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1932  0014D6  C08E  F015         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1933  0014DA  0E70               	movlw	112
  1934  0014DC  6E16               	movwf	___ftge@ff2,c
  1935  0014DE  0E89               	movlw	137
  1936  0014E0  6E17               	movwf	___ftge@ff2+1,c
  1937  0014E2  0E40               	movlw	64
  1938  0014E4  6E18               	movwf	___ftge@ff2+2,c
  1939  0014E6  EC6E  F018         	call	___ftge	;wreg free
  1940  0014EA  B0D8               	btfsc	status,0,c
  1941  0014EC  D003               	goto	l4546
  1942                           
  1943                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1944  0014EE  0100               	movlb	0	; () banked
  1945  0014F0  0EF7               	movlw	247
  1946  0014F2  D002               	goto	L1
  1947  0014F4                     l4546:
  1948                           
  1949                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1950  0014F4  0100               	movlb	0	; () banked
  1951  0014F6  0EF8               	movlw	248
  1952  0014F8                     L1:
  1953  0014F8  2790               	addwf	sprintf@exp& (0+255),f,b
  1954  0014FA  0EFF               	movlw	255
  1955  0014FC  2391               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;doprnt.c: 1124: }
  1959                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1960                           
  1961                           ; BSR set to: 0
  1962  0014FE  0100               	movlb	0	; () banked
  1963  001500  5190               	movf	sprintf@exp& (0+255),w,b
  1964  001502  EC80  F00E         	call	_scale
  1965  001506  C036  F08C         	movff	?_scale,sprintf@tmpval
  1966  00150A  C037  F08D         	movff	?_scale+1,sprintf@tmpval+1
  1967  00150E  C038  F08E         	movff	?_scale+2,sprintf@tmpval+2
  1968                           
  1969                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1970  001512  C094  F013         	movff	sprintf@fval,__tdiv_to_l_@f1
  1971  001516  C095  F014         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1972  00151A  C096  F015         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1973  00151E  C08C  F016         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1974  001522  C08D  F017         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1975  001526  C08E  F018         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1976  00152A  EC9E  F014         	call	__tdiv_to_l_	;wreg free
  1977  00152E  C013  F088         	movff	?__tdiv_to_l_,sprintf@val
  1978  001532  C014  F089         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1979  001536  C015  F08A         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1980  00153A  C016  F08B         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1981                           
  1982                           ;doprnt.c: 1129: fval = 0.0;
  1983  00153E  0E00               	movlw	0
  1984  001540  0100               	movlb	0	; () banked
  1985  001542  6F94               	movwf	sprintf@fval& (0+255),b
  1986  001544  0E00               	movlw	0
  1987  001546  0100               	movlb	0	; () banked
  1988  001548  6F95               	movwf	(sprintf@fval+1)& (0+255),b
  1989  00154A  0E00               	movlw	0
  1990  00154C  0100               	movlb	0	; () banked
  1991  00154E  6F96               	movwf	(sprintf@fval+2)& (0+255),b
  1992                           
  1993                           ;doprnt.c: 1130: } else {
  1994  001550  D033               	goto	l4560
  1995  001552                     l4556:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1999  001552  C094  F064         	movff	sprintf@fval,___fttol@f1
  2000  001556  C095  F065         	movff	sprintf@fval+1,___fttol@f1+1
  2001  00155A  C096  F066         	movff	sprintf@fval+2,___fttol@f1+2
  2002  00155E  ECFC  F013         	call	___fttol	;wreg free
  2003  001562  C064  F088         	movff	?___fttol,sprintf@val
  2004  001566  C065  F089         	movff	?___fttol+1,sprintf@val+1
  2005  00156A  C066  F08A         	movff	?___fttol+2,sprintf@val+2
  2006  00156E  C067  F08B         	movff	?___fttol+3,sprintf@val+3
  2007                           
  2008                           ;doprnt.c: 1132: fval -= (double)val;
  2009  001572  C094  F070         	movff	sprintf@fval,___ftsub@f1
  2010  001576  C095  F071         	movff	sprintf@fval+1,___ftsub@f1+1
  2011  00157A  C096  F072         	movff	sprintf@fval+2,___ftsub@f1+2
  2012  00157E  C088  F01B         	movff	sprintf@val,___lltoft@c
  2013  001582  C089  F01C         	movff	sprintf@val+1,___lltoft@c+1
  2014  001586  C08A  F01D         	movff	sprintf@val+2,___lltoft@c+2
  2015  00158A  C08B  F01E         	movff	sprintf@val+3,___lltoft@c+3
  2016  00158E  ECAB  F01A         	call	___lltoft	;wreg free
  2017  001592  C01B  F073         	movff	?___lltoft,___ftsub@f2
  2018  001596  C01C  F074         	movff	?___lltoft+1,___ftsub@f2+1
  2019  00159A  C01D  F075         	movff	?___lltoft+2,___ftsub@f2+2
  2020  00159E  EC31  F01B         	call	___ftsub	;wreg free
  2021  0015A2  C070  F094         	movff	?___ftsub,sprintf@fval
  2022  0015A6  C071  F095         	movff	?___ftsub+1,sprintf@fval+1
  2023  0015AA  C072  F096         	movff	?___ftsub+2,sprintf@fval+2
  2024                           
  2025                           ;doprnt.c: 1133: exp = 0;
  2026  0015AE  0E00               	movlw	0
  2027  0015B0  0100               	movlb	0	; () banked
  2028  0015B2  6F91               	movwf	(sprintf@exp+1)& (0+255),b
  2029  0015B4  0E00               	movlw	0
  2030  0015B6  6F90               	movwf	sprintf@exp& (0+255),b
  2031  0015B8                     l4560:
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;doprnt.c: 1134: }
  2035                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2036  0015B8  0E01               	movlw	1
  2037  0015BA  0100               	movlb	0	; () banked
  2038  0015BC  6F9B               	movwf	sprintf@c& (0+255),b
  2039  0015BE                     l4562:
  2040                           
  2041                           ; BSR set to: 0
  2042  0015BE  0E0A               	movlw	10
  2043  0015C0  0100               	movlb	0	; () banked
  2044  0015C2  199B               	xorwf	sprintf@c& (0+255),w,b
  2045  0015C4  B4D8               	btfsc	status,2,c
  2046  0015C6  D021               	goto	l4574
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;doprnt.c: 1137: if(val < dpowers[c])
  2050                           
  2051                           ; BSR set to: 0
  2052                           
  2053                           ; BSR set to: 0
  2054  0015C8  0100               	movlb	0	; () banked
  2055  0015CA  519B               	movf	sprintf@c& (0+255),w,b
  2056  0015CC  0D04               	mullw	4
  2057  0015CE  0E01               	movlw	low _dpowers
  2058  0015D0  24F3               	addwf	prodl,w,c
  2059  0015D2  6EF6               	movwf	tblptrl,c
  2060  0015D4  0E10               	movlw	high _dpowers
  2061  0015D6  20F4               	addwfc	prodh,w,c
  2062  0015D8  6EF7               	movwf	tblptrh,c
  2063  0015DA                     	if	1	;There are 3 active tblptr bytes
  2064  0015DA  6AF8               	clrf	tblptru,c
  2065  0015DC  0E00               	movlw	low (__mediumconst shr (0+16))
  2066  0015DE  22F8               	addwfc	tblptru,f,c
  2067  0015E0                     	endif
  2068  0015E0  0009               	tblrd		*+
  2069  0015E2  50F5               	movf	tablat,w,c
  2070  0015E4  0100               	movlb	0	; () banked
  2071  0015E6  5D88               	subwf	sprintf@val& (0+255),w,b
  2072  0015E8  0009               	tblrd		*+
  2073  0015EA  50F5               	movf	tablat,w,c
  2074  0015EC  0100               	movlb	0	; () banked
  2075  0015EE  5989               	subwfb	(sprintf@val+1)& (0+255),w,b
  2076  0015F0  0009               	tblrd		*+
  2077  0015F2  50F5               	movf	tablat,w,c
  2078  0015F4  0100               	movlb	0	; () banked
  2079  0015F6  598A               	subwfb	(sprintf@val+2)& (0+255),w,b
  2080  0015F8  0009               	tblrd		*+
  2081  0015FA  50F5               	movf	tablat,w,c
  2082  0015FC  0100               	movlb	0	; () banked
  2083  0015FE  598B               	subwfb	(sprintf@val+3)& (0+255),w,b
  2084  001600  A0D8               	btfss	status,0,c
  2085  001602  D003               	goto	l4574
  2086                           
  2087                           ; BSR set to: 0
  2088                           
  2089                           ; BSR set to: 0
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;doprnt.c: 1138: break;
  2093  001604  0100               	movlb	0	; () banked
  2094  001606  2B9B               	incf	sprintf@c& (0+255),f,b
  2095  001608  D7DA               	goto	l4562
  2096  00160A                     l4574:
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;doprnt.c: 1142: width -= prec + c + exp;
  2100  00160A  C09B  F07D         	movff	sprintf@c,??_sprintf
  2101  00160E  0100               	movlb	0	; () banked
  2102  001610  6B7E               	clrf	(??_sprintf+1)& (0+255),b
  2103  001612  BF7D               	btfsc	??_sprintf& (0+255),7,b
  2104  001614  077E               	decf	(??_sprintf+1)& (0+255),f,b
  2105  001616  0100               	movlb	0	; () banked
  2106  001618  5199               	movf	sprintf@prec& (0+255),w,b
  2107  00161A  0100               	movlb	0	; () banked
  2108  00161C  277D               	addwf	??_sprintf& (0+255),f,b
  2109  00161E  0100               	movlb	0	; () banked
  2110  001620  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  2111  001622  0100               	movlb	0	; () banked
  2112  001624  237E               	addwfc	(??_sprintf+1)& (0+255),f,b
  2113  001626  0100               	movlb	0	; () banked
  2114  001628  5190               	movf	sprintf@exp& (0+255),w,b
  2115  00162A  0100               	movlb	0	; () banked
  2116  00162C  277D               	addwf	??_sprintf& (0+255),f,b
  2117  00162E  0100               	movlb	0	; () banked
  2118  001630  5191               	movf	(sprintf@exp+1)& (0+255),w,b
  2119  001632  0100               	movlb	0	; () banked
  2120  001634  237E               	addwfc	(??_sprintf+1)& (0+255),f,b
  2121  001636  0100               	movlb	0	; () banked
  2122  001638  517D               	movf	??_sprintf& (0+255),w,b
  2123  00163A  0100               	movlb	0	; () banked
  2124  00163C  5F97               	subwf	sprintf@width& (0+255),f,b
  2125  00163E  0100               	movlb	0	; () banked
  2126  001640  517E               	movf	(??_sprintf+1)& (0+255),w,b
  2127  001642  0100               	movlb	0	; () banked
  2128  001644  5B98               	subwfb	(sprintf@width+1)& (0+255),f,b
  2129                           
  2130                           ;doprnt.c: 1143: if(
  2131                           ;doprnt.c: 1147: prec)
  2132  001646  0100               	movlb	0	; () banked
  2133  001648  5199               	movf	sprintf@prec& (0+255),w,b
  2134  00164A  0100               	movlb	0	; () banked
  2135  00164C  119A               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2136  00164E  B4D8               	btfsc	status,2,c
  2137  001650  D004               	goto	l4578
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;doprnt.c: 1148: width--;
  2141  001652  0100               	movlb	0	; () banked
  2142  001654  0797               	decf	sprintf@width& (0+255),f,b
  2143  001656  A0D8               	btfss	status,0,c
  2144  001658  0798               	decf	(sprintf@width+1)& (0+255),f,b
  2145  00165A                     l4578:
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;doprnt.c: 1149: if(flag & 0x03)
  2149  00165A  0E03               	movlw	3
  2150  00165C  0100               	movlb	0	; () banked
  2151  00165E  1592               	andwf	sprintf@flag& (0+255),w,b
  2152  001660  0100               	movlb	0	; () banked
  2153  001662  6F7D               	movwf	??_sprintf& (0+255),b
  2154  001664  0E00               	movlw	0
  2155  001666  0100               	movlb	0	; () banked
  2156  001668  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  2157  00166A  0100               	movlb	0	; () banked
  2158  00166C  6F7E               	movwf	(??_sprintf+1)& (0+255),b
  2159  00166E  0100               	movlb	0	; () banked
  2160  001670  517D               	movf	??_sprintf& (0+255),w,b
  2161  001672  0100               	movlb	0	; () banked
  2162  001674  117E               	iorwf	(??_sprintf+1)& (0+255),w,b
  2163  001676  B4D8               	btfsc	status,2,c
  2164  001678  D004               	goto	l4582
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;doprnt.c: 1150: width--;
  2168  00167A  0100               	movlb	0	; () banked
  2169  00167C  0797               	decf	sprintf@width& (0+255),f,b
  2170  00167E  A0D8               	btfss	status,0,c
  2171  001680  0798               	decf	(sprintf@width+1)& (0+255),f,b
  2172  001682                     l4582:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;doprnt.c: 1175: {
  2176                           ;doprnt.c: 1177: if(!(flag & 0x08))
  2177  001682  0100               	movlb	0	; () banked
  2178  001684  A792               	btfss	sprintf@flag& (0+255),3,b
  2179  001686  D00E               	goto	l4592
  2180  001688  D017               	goto	l4594
  2181  00168A                     l4586:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2185  00168A  C076  FFD9         	movff	sprintf@sp,fsr2l
  2186  00168E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2187  001692  0E20               	movlw	32
  2188  001694  6EDF               	movwf	indf2,c
  2189                           
  2190                           ; BSR set to: 0
  2191  001696  0100               	movlb	0	; () banked
  2192  001698  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2193  00169A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;doprnt.c: 1182: width--;
  2197  00169C  0100               	movlb	0	; () banked
  2198  00169E  0797               	decf	sprintf@width& (0+255),f,b
  2199  0016A0  A0D8               	btfss	status,0,c
  2200  0016A2  0798               	decf	(sprintf@width+1)& (0+255),f,b
  2201  0016A4                     l4592:
  2202                           
  2203                           ; BSR set to: 0
  2204  0016A4  0100               	movlb	0	; () banked
  2205  0016A6  BF98               	btfsc	(sprintf@width+1)& (0+255),7,b
  2206  0016A8  D007               	goto	l4594
  2207  0016AA  0100               	movlb	0	; () banked
  2208  0016AC  5198               	movf	(sprintf@width+1)& (0+255),w,b
  2209  0016AE  E1ED               	bnz	l4586
  2210  0016B0  0100               	movlb	0	; () banked
  2211  0016B2  0597               	decf	sprintf@width& (0+255),w,b
  2212  0016B4  B0D8               	btfsc	status,0,c
  2213  0016B6  D7E9               	goto	l4586
  2214  0016B8                     l4594:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 1183: }
  2218                           ;doprnt.c: 1188: if(flag & 0x03)
  2219  0016B8  0E03               	movlw	3
  2220  0016BA  0100               	movlb	0	; () banked
  2221  0016BC  1592               	andwf	sprintf@flag& (0+255),w,b
  2222  0016BE  0100               	movlb	0	; () banked
  2223  0016C0  6F7D               	movwf	??_sprintf& (0+255),b
  2224  0016C2  0E00               	movlw	0
  2225  0016C4  0100               	movlb	0	; () banked
  2226  0016C6  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  2227  0016C8  0100               	movlb	0	; () banked
  2228  0016CA  6F7E               	movwf	(??_sprintf+1)& (0+255),b
  2229  0016CC  0100               	movlb	0	; () banked
  2230  0016CE  517D               	movf	??_sprintf& (0+255),w,b
  2231  0016D0  0100               	movlb	0	; () banked
  2232  0016D2  117E               	iorwf	(??_sprintf+1)& (0+255),w,b
  2233  0016D4  B4D8               	btfsc	status,2,c
  2234  0016D6  D057               	goto	l4608
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2238  0016D8  C076  FFD9         	movff	sprintf@sp,fsr2l
  2239  0016DC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2240  0016E0  0E2D               	movlw	45
  2241  0016E2  D04F               	goto	L2
  2242  0016E4                     l4598:
  2243                           
  2244                           ; BSR set to: 0
  2245  0016E4  0100               	movlb	0	; () banked
  2246  0016E6  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2247  0016E8  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1195: }
  2251                           ;doprnt.c: 1196: while(c--) {
  2252  0016EA  D04D               	goto	l4608
  2253  0016EC                     l4600:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;doprnt.c: 1200: {
  2257                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2258  0016EC  C088  F013         	movff	sprintf@val,___lldiv@dividend
  2259  0016F0  C089  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2260  0016F4  C08A  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2261  0016F8  C08B  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2262  0016FC  0100               	movlb	0	; () banked
  2263  0016FE  519B               	movf	sprintf@c& (0+255),w,b
  2264  001700  0D04               	mullw	4
  2265  001702  0E01               	movlw	low _dpowers
  2266  001704  24F3               	addwf	prodl,w,c
  2267  001706  6EF6               	movwf	tblptrl,c
  2268  001708  0E10               	movlw	high _dpowers
  2269  00170A  20F4               	addwfc	prodh,w,c
  2270  00170C  6EF7               	movwf	tblptrh,c
  2271  00170E                     	if	1	;There are 3 active tblptr bytes
  2272  00170E  6AF8               	clrf	tblptru,c
  2273  001710  0E00               	movlw	low (__mediumconst shr (0+16))
  2274  001712  22F8               	addwfc	tblptru,f,c
  2275  001714                     	endif
  2276  001714  0009               	tblrd		*+
  2277  001716  CFF5 F017          	movff	tablat,___lldiv@divisor
  2278  00171A  0009               	tblrd		*+
  2279  00171C  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2280  001720  0009               	tblrd		*+
  2281  001722  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2282  001726  000A               	tblrd		*-
  2283  001728  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2284  00172C  EC86  F019         	call	___lldiv	;wreg free
  2285  001730  C013  F08C         	movff	?___lldiv,sprintf@tmpval
  2286  001734  C014  F08D         	movff	?___lldiv+1,sprintf@tmpval+1
  2287  001738  C015  F08E         	movff	?___lldiv+2,sprintf@tmpval+2
  2288  00173C  C016  F08F         	movff	?___lldiv+3,sprintf@tmpval+3
  2289                           
  2290                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2291  001740  C08C  F020         	movff	sprintf@tmpval,___llmod@dividend
  2292  001744  C08D  F021         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2293  001748  C08E  F022         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2294  00174C  C08F  F023         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2295  001750  0E0A               	movlw	10
  2296  001752  6E24               	movwf	___llmod@divisor,c
  2297  001754  0E00               	movlw	0
  2298  001756  6E25               	movwf	___llmod@divisor+1,c
  2299  001758  0E00               	movlw	0
  2300  00175A  6E26               	movwf	___llmod@divisor+2,c
  2301  00175C  0E00               	movlw	0
  2302  00175E  6E27               	movwf	___llmod@divisor+3,c
  2303  001760  EC78  F01A         	call	___llmod	;wreg free
  2304  001764  C020  F08C         	movff	?___llmod,sprintf@tmpval
  2305  001768  C021  F08D         	movff	?___llmod+1,sprintf@tmpval+1
  2306  00176C  C022  F08E         	movff	?___llmod+2,sprintf@tmpval+2
  2307  001770  C023  F08F         	movff	?___llmod+3,sprintf@tmpval+3
  2308                           
  2309                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2310  001774  0100               	movlb	0	; () banked
  2311  001776  518C               	movf	sprintf@tmpval& (0+255),w,b
  2312  001778  0F30               	addlw	48
  2313  00177A  C076  FFD9         	movff	sprintf@sp,fsr2l
  2314  00177E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2315  001782                     L2:
  2316  001782  6EDF               	movwf	indf2,c
  2317  001784  D7AF               	goto	l4598
  2318  001786                     l4608:
  2319                           
  2320                           ; BSR set to: 0
  2321  001786  0100               	movlb	0	; () banked
  2322  001788  079B               	decf	sprintf@c& (0+255),f,b
  2323  00178A  0100               	movlb	0	; () banked
  2324  00178C  299B               	incf	sprintf@c& (0+255),w,b
  2325  00178E  B4D8               	btfsc	status,2,c
  2326  001790  D00E               	goto	l4616
  2327  001792  D7AC               	goto	l4600
  2328  001794                     l4610:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2332  001794  C076  FFD9         	movff	sprintf@sp,fsr2l
  2333  001798  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2334  00179C  0E30               	movlw	48
  2335  00179E  6EDF               	movwf	indf2,c
  2336                           
  2337                           ; BSR set to: 0
  2338  0017A0  0100               	movlb	0	; () banked
  2339  0017A2  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2340  0017A4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;doprnt.c: 1209: exp--;
  2344  0017A6  0100               	movlb	0	; () banked
  2345  0017A8  0790               	decf	sprintf@exp& (0+255),f,b
  2346  0017AA  A0D8               	btfss	status,0,c
  2347  0017AC  0791               	decf	(sprintf@exp+1)& (0+255),f,b
  2348  0017AE                     l4616:
  2349                           
  2350                           ; BSR set to: 0
  2351  0017AE  0100               	movlb	0	; () banked
  2352  0017B0  BF91               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2353  0017B2  D007               	goto	l4618
  2354  0017B4  0100               	movlb	0	; () banked
  2355  0017B6  5191               	movf	(sprintf@exp+1)& (0+255),w,b
  2356  0017B8  E1ED               	bnz	l4610
  2357  0017BA  0100               	movlb	0	; () banked
  2358  0017BC  0590               	decf	sprintf@exp& (0+255),w,b
  2359  0017BE  B0D8               	btfsc	status,0,c
  2360  0017C0  D7E9               	goto	l4610
  2361  0017C2                     l4618:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1210: }
  2365                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2366  0017C2  0100               	movlb	0	; () banked
  2367  0017C4  BF9A               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2368  0017C6  D00C               	goto	l468
  2369  0017C8  0100               	movlb	0	; () banked
  2370  0017CA  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  2371  0017CC  E105               	bnz	u5560
  2372  0017CE  0E09               	movlw	9
  2373  0017D0  0100               	movlb	0	; () banked
  2374  0017D2  5D99               	subwf	sprintf@prec& (0+255),w,b
  2375  0017D4  A0D8               	btfss	status,0,c
  2376  0017D6  D004               	goto	l468
  2377  0017D8                     u5560:
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2381  0017D8  0E08               	movlw	8
  2382  0017DA  0100               	movlb	0	; () banked
  2383  0017DC  6F9B               	movwf	sprintf@c& (0+255),b
  2384  0017DE  D002               	goto	l4622
  2385  0017E0                     l468:
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;doprnt.c: 1213: else
  2389                           ;doprnt.c: 1214: c = prec;
  2390  0017E0  C099  F09B         	movff	sprintf@prec,sprintf@c
  2391  0017E4                     l4622:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 1215: prec -= c;
  2395  0017E4  0100               	movlb	0	; () banked
  2396  0017E6  519B               	movf	sprintf@c& (0+255),w,b
  2397  0017E8  0100               	movlb	0	; () banked
  2398  0017EA  5F99               	subwf	sprintf@prec& (0+255),f,b
  2399  0017EC  0E00               	movlw	0
  2400  0017EE  0100               	movlb	0	; () banked
  2401  0017F0  BF9B               	btfsc	sprintf@c& (0+255),7,b
  2402  0017F2  0EFF               	movlw	255
  2403  0017F4  0100               	movlb	0	; () banked
  2404  0017F6  5B9A               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;doprnt.c: 1219: if(c)
  2408  0017F8  0100               	movlb	0	; () banked
  2409  0017FA  519B               	movf	sprintf@c& (0+255),w,b
  2410  0017FC  0100               	movlb	0	; () banked
  2411  0017FE  B4D8               	btfsc	status,2,c
  2412  001800  D009               	goto	l4630
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2416  001802  C076  FFD9         	movff	sprintf@sp,fsr2l
  2417  001806  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2418  00180A  0E2E               	movlw	46
  2419  00180C  6EDF               	movwf	indf2,c
  2420                           
  2421                           ; BSR set to: 0
  2422  00180E  0100               	movlb	0	; () banked
  2423  001810  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2424  001812  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2425  001814                     l4630:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2429  001814  0100               	movlb	0	; () banked
  2430  001816  519B               	movf	sprintf@c& (0+255),w,b
  2431  001818  EC80  F00E         	call	_scale
  2432  00181C  C036  F083         	movff	?_scale,_sprintf$2348
  2433  001820  C037  F084         	movff	?_scale+1,_sprintf$2348+1
  2434  001824  C038  F085         	movff	?_scale+2,_sprintf$2348+2
  2435                           
  2436                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2437  001828  C094  F02A         	movff	sprintf@fval,___ftmul@f2
  2438  00182C  C095  F02B         	movff	sprintf@fval+1,___ftmul@f2+1
  2439  001830  C096  F02C         	movff	sprintf@fval+2,___ftmul@f2+2
  2440  001834  C083  F027         	movff	_sprintf$2348,___ftmul@f1
  2441  001838  C084  F028         	movff	_sprintf$2348+1,___ftmul@f1+1
  2442  00183C  C085  F029         	movff	_sprintf$2348+2,___ftmul@f1+2
  2443  001840  ECE7  F016         	call	___ftmul	;wreg free
  2444  001844  C027  F064         	movff	?___ftmul,___fttol@f1
  2445  001848  C028  F065         	movff	?___ftmul+1,___fttol@f1+1
  2446  00184C  C029  F066         	movff	?___ftmul+2,___fttol@f1+2
  2447  001850  ECFC  F013         	call	___fttol	;wreg free
  2448  001854  C064  F088         	movff	?___fttol,sprintf@val
  2449  001858  C065  F089         	movff	?___fttol+1,sprintf@val+1
  2450  00185C  C066  F08A         	movff	?___fttol+2,sprintf@val+2
  2451  001860  C067  F08B         	movff	?___fttol+3,sprintf@val+3
  2452                           
  2453                           ;doprnt.c: 1228: while(c--) {
  2454  001864  D079               	goto	l4644
  2455  001866                     l4634:
  2456                           
  2457                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2458  001866  C088  F013         	movff	sprintf@val,___lldiv@dividend
  2459  00186A  C089  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  2460  00186E  C08A  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  2461  001872  C08B  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  2462  001876  0100               	movlb	0	; () banked
  2463  001878  519B               	movf	sprintf@c& (0+255),w,b
  2464  00187A  0D04               	mullw	4
  2465  00187C  0E01               	movlw	low _dpowers
  2466  00187E  24F3               	addwf	prodl,w,c
  2467  001880  6EF6               	movwf	tblptrl,c
  2468  001882  0E10               	movlw	high _dpowers
  2469  001884  20F4               	addwfc	prodh,w,c
  2470  001886  6EF7               	movwf	tblptrh,c
  2471  001888                     	if	1	;There are 3 active tblptr bytes
  2472  001888  6AF8               	clrf	tblptru,c
  2473  00188A  0E00               	movlw	low (__mediumconst shr (0+16))
  2474  00188C  22F8               	addwfc	tblptru,f,c
  2475  00188E                     	endif
  2476  00188E  0009               	tblrd		*+
  2477  001890  CFF5 F017          	movff	tablat,___lldiv@divisor
  2478  001894  0009               	tblrd		*+
  2479  001896  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  2480  00189A  0009               	tblrd		*+
  2481  00189C  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  2482  0018A0  000A               	tblrd		*-
  2483  0018A2  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  2484  0018A6  EC86  F019         	call	___lldiv	;wreg free
  2485  0018AA  C013  F08C         	movff	?___lldiv,sprintf@tmpval
  2486  0018AE  C014  F08D         	movff	?___lldiv+1,sprintf@tmpval+1
  2487  0018B2  C015  F08E         	movff	?___lldiv+2,sprintf@tmpval+2
  2488  0018B6  C016  F08F         	movff	?___lldiv+3,sprintf@tmpval+3
  2489                           
  2490                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2491  0018BA  C08C  F020         	movff	sprintf@tmpval,___llmod@dividend
  2492  0018BE  C08D  F021         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2493  0018C2  C08E  F022         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2494  0018C6  C08F  F023         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2495  0018CA  0E0A               	movlw	10
  2496  0018CC  6E24               	movwf	___llmod@divisor,c
  2497  0018CE  0E00               	movlw	0
  2498  0018D0  6E25               	movwf	___llmod@divisor+1,c
  2499  0018D2  0E00               	movlw	0
  2500  0018D4  6E26               	movwf	___llmod@divisor+2,c
  2501  0018D6  0E00               	movlw	0
  2502  0018D8  6E27               	movwf	___llmod@divisor+3,c
  2503  0018DA  EC78  F01A         	call	___llmod	;wreg free
  2504  0018DE  C020  F08C         	movff	?___llmod,sprintf@tmpval
  2505  0018E2  C021  F08D         	movff	?___llmod+1,sprintf@tmpval+1
  2506  0018E6  C022  F08E         	movff	?___llmod+2,sprintf@tmpval+2
  2507  0018EA  C023  F08F         	movff	?___llmod+3,sprintf@tmpval+3
  2508                           
  2509                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2510  0018EE  0100               	movlb	0	; () banked
  2511  0018F0  518C               	movf	sprintf@tmpval& (0+255),w,b
  2512  0018F2  0F30               	addlw	48
  2513  0018F4  C076  FFD9         	movff	sprintf@sp,fsr2l
  2514  0018F8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2515  0018FC  6EDF               	movwf	indf2,c
  2516                           
  2517                           ; BSR set to: 0
  2518  0018FE  0100               	movlb	0	; () banked
  2519  001900  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2520  001902  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;doprnt.c: 1232: val %= dpowers[c];
  2524  001904  C088  F020         	movff	sprintf@val,___llmod@dividend
  2525  001908  C089  F021         	movff	sprintf@val+1,___llmod@dividend+1
  2526  00190C  C08A  F022         	movff	sprintf@val+2,___llmod@dividend+2
  2527  001910  C08B  F023         	movff	sprintf@val+3,___llmod@dividend+3
  2528  001914  0100               	movlb	0	; () banked
  2529  001916  519B               	movf	sprintf@c& (0+255),w,b
  2530  001918  0D04               	mullw	4
  2531  00191A  0E01               	movlw	low _dpowers
  2532  00191C  24F3               	addwf	prodl,w,c
  2533  00191E  6EF6               	movwf	tblptrl,c
  2534  001920  0E10               	movlw	high _dpowers
  2535  001922  20F4               	addwfc	prodh,w,c
  2536  001924  6EF7               	movwf	tblptrh,c
  2537  001926                     	if	1	;There are 3 active tblptr bytes
  2538  001926  6AF8               	clrf	tblptru,c
  2539  001928  0E00               	movlw	low (__mediumconst shr (0+16))
  2540  00192A  22F8               	addwfc	tblptru,f,c
  2541  00192C                     	endif
  2542  00192C  0009               	tblrd		*+
  2543  00192E  CFF5 F024          	movff	tablat,___llmod@divisor
  2544  001932  0009               	tblrd		*+
  2545  001934  CFF5 F025          	movff	tablat,___llmod@divisor+1
  2546  001938  0009               	tblrd		*+
  2547  00193A  CFF5 F026          	movff	tablat,___llmod@divisor+2
  2548  00193E  000A               	tblrd		*-
  2549  001940  CFF5 F027          	movff	tablat,___llmod@divisor+3
  2550  001944  EC78  F01A         	call	___llmod	;wreg free
  2551  001948  C020  F088         	movff	?___llmod,sprintf@val
  2552  00194C  C021  F089         	movff	?___llmod+1,sprintf@val+1
  2553  001950  C022  F08A         	movff	?___llmod+2,sprintf@val+2
  2554  001954  C023  F08B         	movff	?___llmod+3,sprintf@val+3
  2555  001958                     l4644:
  2556  001958  0100               	movlb	0	; () banked
  2557  00195A  079B               	decf	sprintf@c& (0+255),f,b
  2558  00195C  0100               	movlb	0	; () banked
  2559  00195E  299B               	incf	sprintf@c& (0+255),w,b
  2560  001960  B4D8               	btfsc	status,2,c
  2561  001962  D00E               	goto	l4652
  2562  001964  D780               	goto	l4634
  2563  001966                     l4646:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2567  001966  C076  FFD9         	movff	sprintf@sp,fsr2l
  2568  00196A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2569  00196E  0E30               	movlw	48
  2570  001970  6EDF               	movwf	indf2,c
  2571                           
  2572                           ; BSR set to: 0
  2573  001972  0100               	movlb	0	; () banked
  2574  001974  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2575  001976  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;doprnt.c: 1237: prec--;
  2579  001978  0100               	movlb	0	; () banked
  2580  00197A  0799               	decf	sprintf@prec& (0+255),f,b
  2581  00197C  A0D8               	btfss	status,0,c
  2582  00197E  079A               	decf	(sprintf@prec+1)& (0+255),f,b
  2583  001980                     l4652:
  2584                           
  2585                           ; BSR set to: 0
  2586  001980  0100               	movlb	0	; () banked
  2587  001982  5199               	movf	sprintf@prec& (0+255),w,b
  2588  001984  0100               	movlb	0	; () banked
  2589  001986  119A               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2590  001988  A4D8               	btfss	status,2,c
  2591  00198A  D7ED               	goto	l4646
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;doprnt.c: 1238: }
  2595                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
  2596  00198C  0100               	movlb	0	; () banked
  2597  00198E  A792               	btfss	sprintf@flag& (0+255),3,b
  2598  001990  D19F               	goto	l4746
  2599                           
  2600                           ; BSR set to: 0
  2601  001992  0100               	movlb	0	; () banked
  2602  001994  BF98               	btfsc	(sprintf@width+1)& (0+255),7,b
  2603  001996  D19C               	goto	l4746
  2604  001998  0100               	movlb	0	; () banked
  2605  00199A  5198               	movf	(sprintf@width+1)& (0+255),w,b
  2606  00199C  E104               	bnz	l4656
  2607  00199E  0100               	movlb	0	; () banked
  2608  0019A0  0597               	decf	sprintf@width& (0+255),w,b
  2609  0019A2  A0D8               	btfss	status,0,c
  2610  0019A4  D195               	goto	l4746
  2611  0019A6                     l4656:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 1242: ((*sp++ = (' ')));
  2615  0019A6  C076  FFD9         	movff	sprintf@sp,fsr2l
  2616  0019AA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2617  0019AE  0E20               	movlw	32
  2618  0019B0  6EDF               	movwf	indf2,c
  2619                           
  2620                           ; BSR set to: 0
  2621  0019B2  0100               	movlb	0	; () banked
  2622  0019B4  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2623  0019B6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;doprnt.c: 1243: while(--width);
  2627  0019B8  0100               	movlb	0	; () banked
  2628  0019BA  0797               	decf	sprintf@width& (0+255),f,b
  2629  0019BC  A0D8               	btfss	status,0,c
  2630  0019BE  0798               	decf	(sprintf@width+1)& (0+255),f,b
  2631  0019C0  0100               	movlb	0	; () banked
  2632  0019C2  5197               	movf	sprintf@width& (0+255),w,b
  2633  0019C4  0100               	movlb	0	; () banked
  2634  0019C6  1198               	iorwf	(sprintf@width+1)& (0+255),w,b
  2635  0019C8  B4D8               	btfsc	status,2,c
  2636  0019CA  D182               	goto	l4746
  2637  0019CC  D7EC               	goto	l4656
  2638  0019CE                     l4662:
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;doprnt.c: 1246: }
  2642                           ;doprnt.c: 1273: {
  2643                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2644  0019CE  C086  FFD9         	movff	sprintf@ap,fsr2l
  2645  0019D2  C087  FFDA         	movff	sprintf@ap+1,fsr2h
  2646  0019D6  CFDE F07D          	movff	postinc2,??_sprintf
  2647  0019DA  CFDD F07E          	movff	postdec2,??_sprintf+1
  2648  0019DE  C07D  F088         	movff	??_sprintf,sprintf@val
  2649  0019E2  C07E  F089         	movff	??_sprintf+1,sprintf@val+1
  2650  0019E6  0100               	movlb	0	; () banked
  2651  0019E8  6B8A               	clrf	(sprintf@val+2)& (0+255),b
  2652  0019EA  6B8B               	clrf	(sprintf@val+3)& (0+255),b
  2653                           
  2654                           ; BSR set to: 0
  2655  0019EC  0E02               	movlw	2
  2656  0019EE  0100               	movlb	0	; () banked
  2657  0019F0  2786               	addwf	sprintf@ap& (0+255),f,b
  2658  0019F2  0E00               	movlw	0
  2659  0019F4  2387               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;doprnt.c: 1287: }
  2663                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2664  0019F6  0100               	movlb	0	; () banked
  2665  0019F8  5199               	movf	sprintf@prec& (0+255),w,b
  2666  0019FA  0100               	movlb	0	; () banked
  2667  0019FC  119A               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2668  0019FE  A4D8               	btfss	status,2,c
  2669  001A00  D00D               	goto	l4672
  2670                           
  2671                           ; BSR set to: 0
  2672  001A02  0100               	movlb	0	; () banked
  2673  001A04  5188               	movf	sprintf@val& (0+255),w,b
  2674  001A06  0100               	movlb	0	; () banked
  2675  001A08  1189               	iorwf	(sprintf@val+1)& (0+255),w,b
  2676  001A0A  0100               	movlb	0	; () banked
  2677  001A0C  118A               	iorwf	(sprintf@val+2)& (0+255),w,b
  2678  001A0E  0100               	movlb	0	; () banked
  2679  001A10  118B               	iorwf	(sprintf@val+3)& (0+255),w,b
  2680  001A12  A4D8               	btfss	status,2,c
  2681  001A14  D003               	goto	l4672
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;doprnt.c: 1291: prec++;
  2685  001A16  0100               	movlb	0	; () banked
  2686  001A18  4B99               	infsnz	sprintf@prec& (0+255),f,b
  2687  001A1A  2B9A               	incf	(sprintf@prec+1)& (0+255),f,b
  2688  001A1C                     l4672:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2692  001A1C  0E01               	movlw	1
  2693  001A1E  0100               	movlb	0	; () banked
  2694  001A20  6F9B               	movwf	sprintf@c& (0+255),b
  2695  001A22                     l4674:
  2696                           
  2697                           ; BSR set to: 0
  2698  001A22  0E0A               	movlw	10
  2699  001A24  0100               	movlb	0	; () banked
  2700  001A26  199B               	xorwf	sprintf@c& (0+255),w,b
  2701  001A28  B4D8               	btfsc	status,2,c
  2702  001A2A  D021               	goto	l4686
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;doprnt.c: 1306: if(val < dpowers[c])
  2706                           
  2707                           ; BSR set to: 0
  2708                           
  2709                           ; BSR set to: 0
  2710  001A2C  0100               	movlb	0	; () banked
  2711  001A2E  519B               	movf	sprintf@c& (0+255),w,b
  2712  001A30  0D04               	mullw	4
  2713  001A32  0E01               	movlw	low _dpowers
  2714  001A34  24F3               	addwf	prodl,w,c
  2715  001A36  6EF6               	movwf	tblptrl,c
  2716  001A38  0E10               	movlw	high _dpowers
  2717  001A3A  20F4               	addwfc	prodh,w,c
  2718  001A3C  6EF7               	movwf	tblptrh,c
  2719  001A3E                     	if	1	;There are 3 active tblptr bytes
  2720  001A3E  6AF8               	clrf	tblptru,c
  2721  001A40  0E00               	movlw	low (__mediumconst shr (0+16))
  2722  001A42  22F8               	addwfc	tblptru,f,c
  2723  001A44                     	endif
  2724  001A44  0009               	tblrd		*+
  2725  001A46  50F5               	movf	tablat,w,c
  2726  001A48  0100               	movlb	0	; () banked
  2727  001A4A  5D88               	subwf	sprintf@val& (0+255),w,b
  2728  001A4C  0009               	tblrd		*+
  2729  001A4E  50F5               	movf	tablat,w,c
  2730  001A50  0100               	movlb	0	; () banked
  2731  001A52  5989               	subwfb	(sprintf@val+1)& (0+255),w,b
  2732  001A54  0009               	tblrd		*+
  2733  001A56  50F5               	movf	tablat,w,c
  2734  001A58  0100               	movlb	0	; () banked
  2735  001A5A  598A               	subwfb	(sprintf@val+2)& (0+255),w,b
  2736  001A5C  0009               	tblrd		*+
  2737  001A5E  50F5               	movf	tablat,w,c
  2738  001A60  0100               	movlb	0	; () banked
  2739  001A62  598B               	subwfb	(sprintf@val+3)& (0+255),w,b
  2740  001A64  A0D8               	btfss	status,0,c
  2741  001A66  D003               	goto	l4686
  2742                           
  2743                           ; BSR set to: 0
  2744                           
  2745                           ; BSR set to: 0
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;doprnt.c: 1307: break;
  2749  001A68  0100               	movlb	0	; () banked
  2750  001A6A  2B9B               	incf	sprintf@c& (0+255),f,b
  2751  001A6C  D7DA               	goto	l4674
  2752  001A6E                     l4686:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;doprnt.c: 1339: if(c < prec)
  2756  001A6E  0E80               	movlw	128
  2757  001A70  0100               	movlb	0	; () banked
  2758  001A72  BF9B               	btfsc	sprintf@c& (0+255),7,b
  2759  001A74  0E7F               	movlw	127
  2760  001A76  0100               	movlb	0	; () banked
  2761  001A78  6F7D               	movwf	??_sprintf& (0+255),b
  2762  001A7A  0100               	movlb	0	; () banked
  2763  001A7C  5199               	movf	sprintf@prec& (0+255),w,b
  2764  001A7E  0100               	movlb	0	; () banked
  2765  001A80  5D9B               	subwf	sprintf@c& (0+255),w,b
  2766  001A82  0100               	movlb	0	; () banked
  2767  001A84  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  2768  001A86  0A80               	xorlw	128
  2769  001A88  0100               	movlb	0	; () banked
  2770  001A8A  597D               	subwfb	??_sprintf& (0+255),w,b
  2771  001A8C  B0D8               	btfsc	status,0,c
  2772  001A8E  D003               	goto	l4690
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;doprnt.c: 1340: c = prec;
  2776  001A90  C099  F09B         	movff	sprintf@prec,sprintf@c
  2777  001A94  D018               	goto	l4694
  2778  001A96                     l4690:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;doprnt.c: 1341: else if(prec < c)
  2782  001A96  0100               	movlb	0	; () banked
  2783  001A98  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  2784  001A9A  0A80               	xorlw	128
  2785  001A9C  0100               	movlb	0	; () banked
  2786  001A9E  6F7D               	movwf	??_sprintf& (0+255),b
  2787  001AA0  0100               	movlb	0	; () banked
  2788  001AA2  519B               	movf	sprintf@c& (0+255),w,b
  2789  001AA4  0100               	movlb	0	; () banked
  2790  001AA6  5D99               	subwf	sprintf@prec& (0+255),w,b
  2791  001AA8  0E80               	movlw	128
  2792  001AAA  0100               	movlb	0	; () banked
  2793  001AAC  BF9B               	btfsc	sprintf@c& (0+255),7,b
  2794  001AAE  0E7F               	movlw	127
  2795  001AB0  0100               	movlb	0	; () banked
  2796  001AB2  597D               	subwfb	??_sprintf& (0+255),w,b
  2797  001AB4  B0D8               	btfsc	status,0,c
  2798  001AB6  D007               	goto	l4694
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;doprnt.c: 1342: prec = c;
  2802  001AB8  0100               	movlb	0	; () banked
  2803  001ABA  519B               	movf	sprintf@c& (0+255),w,b
  2804  001ABC  0100               	movlb	0	; () banked
  2805  001ABE  6F99               	movwf	sprintf@prec& (0+255),b
  2806  001AC0  6B9A               	clrf	(sprintf@prec+1)& (0+255),b
  2807  001AC2  BF99               	btfsc	sprintf@prec& (0+255),7,b
  2808  001AC4  079A               	decf	(sprintf@prec+1)& (0+255),f,b
  2809  001AC6                     l4694:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2813  001AC6  0100               	movlb	0	; () banked
  2814  001AC8  5197               	movf	sprintf@width& (0+255),w,b
  2815  001ACA  0100               	movlb	0	; () banked
  2816  001ACC  1198               	iorwf	(sprintf@width+1)& (0+255),w,b
  2817  001ACE  B4D8               	btfsc	status,2,c
  2818  001AD0  D014               	goto	l4700
  2819                           
  2820                           ; BSR set to: 0
  2821  001AD2  0E03               	movlw	3
  2822  001AD4  0100               	movlb	0	; () banked
  2823  001AD6  1592               	andwf	sprintf@flag& (0+255),w,b
  2824  001AD8  0100               	movlb	0	; () banked
  2825  001ADA  6F7D               	movwf	??_sprintf& (0+255),b
  2826  001ADC  0E00               	movlw	0
  2827  001ADE  0100               	movlb	0	; () banked
  2828  001AE0  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  2829  001AE2  0100               	movlb	0	; () banked
  2830  001AE4  6F7E               	movwf	(??_sprintf+1)& (0+255),b
  2831  001AE6  0100               	movlb	0	; () banked
  2832  001AE8  517D               	movf	??_sprintf& (0+255),w,b
  2833  001AEA  0100               	movlb	0	; () banked
  2834  001AEC  117E               	iorwf	(??_sprintf+1)& (0+255),w,b
  2835  001AEE  B4D8               	btfsc	status,2,c
  2836  001AF0  D004               	goto	l4700
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;doprnt.c: 1346: width--;
  2840  001AF2  0100               	movlb	0	; () banked
  2841  001AF4  0797               	decf	sprintf@width& (0+255),f,b
  2842  001AF6  A0D8               	btfss	status,0,c
  2843  001AF8  0798               	decf	(sprintf@width+1)& (0+255),f,b
  2844  001AFA                     l4700:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2848  001AFA  0100               	movlb	0	; () banked
  2849  001AFC  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
  2850  001AFE  D01E               	goto	l4708
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;doprnt.c: 1349: if(width > prec)
  2854  001B00  0100               	movlb	0	; () banked
  2855  001B02  5197               	movf	sprintf@width& (0+255),w,b
  2856  001B04  0100               	movlb	0	; () banked
  2857  001B06  5D99               	subwf	sprintf@prec& (0+255),w,b
  2858  001B08  0100               	movlb	0	; () banked
  2859  001B0A  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  2860  001B0C  0A80               	xorlw	128
  2861  001B0E  0100               	movlb	0	; () banked
  2862  001B10  6F7D               	movwf	??_sprintf& (0+255),b
  2863  001B12  0100               	movlb	0	; () banked
  2864  001B14  5198               	movf	(sprintf@width+1)& (0+255),w,b
  2865  001B16  0A80               	xorlw	128
  2866  001B18  0100               	movlb	0	; () banked
  2867  001B1A  597D               	subwfb	??_sprintf& (0+255),w,b
  2868  001B1C  B0D8               	btfsc	status,0,c
  2869  001B1E  D009               	goto	l4706
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;doprnt.c: 1350: width -= prec;
  2873  001B20  0100               	movlb	0	; () banked
  2874  001B22  5199               	movf	sprintf@prec& (0+255),w,b
  2875  001B24  0100               	movlb	0	; () banked
  2876  001B26  5F97               	subwf	sprintf@width& (0+255),f,b
  2877  001B28  0100               	movlb	0	; () banked
  2878  001B2A  519A               	movf	(sprintf@prec+1)& (0+255),w,b
  2879  001B2C  0100               	movlb	0	; () banked
  2880  001B2E  5B98               	subwfb	(sprintf@width+1)& (0+255),f,b
  2881  001B30  D005               	goto	l4708
  2882  001B32                     l4706:
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;doprnt.c: 1351: else
  2886                           ;doprnt.c: 1352: width = 0;
  2887  001B32  0E00               	movlw	0
  2888  001B34  0100               	movlb	0	; () banked
  2889  001B36  6F98               	movwf	(sprintf@width+1)& (0+255),b
  2890  001B38  0E00               	movlw	0
  2891  001B3A  6F97               	movwf	sprintf@width& (0+255),b
  2892  001B3C                     l4708:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;doprnt.c: 1353: }
  2896                           ;doprnt.c: 1381: if(width > c)
  2897  001B3C  0E80               	movlw	128
  2898  001B3E  0100               	movlb	0	; () banked
  2899  001B40  BF9B               	btfsc	sprintf@c& (0+255),7,b
  2900  001B42  0E7F               	movlw	127
  2901  001B44  0100               	movlb	0	; () banked
  2902  001B46  6F7D               	movwf	??_sprintf& (0+255),b
  2903  001B48  0100               	movlb	0	; () banked
  2904  001B4A  5197               	movf	sprintf@width& (0+255),w,b
  2905  001B4C  0100               	movlb	0	; () banked
  2906  001B4E  5D9B               	subwf	sprintf@c& (0+255),w,b
  2907  001B50  0100               	movlb	0	; () banked
  2908  001B52  5198               	movf	(sprintf@width+1)& (0+255),w,b
  2909  001B54  0A80               	xorlw	128
  2910  001B56  0100               	movlb	0	; () banked
  2911  001B58  597D               	subwfb	??_sprintf& (0+255),w,b
  2912  001B5A  B0D8               	btfsc	status,0,c
  2913  001B5C  D00B               	goto	l4712
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;doprnt.c: 1382: width -= c;
  2917  001B5E  0100               	movlb	0	; () banked
  2918  001B60  519B               	movf	sprintf@c& (0+255),w,b
  2919  001B62  0100               	movlb	0	; () banked
  2920  001B64  5F97               	subwf	sprintf@width& (0+255),f,b
  2921  001B66  0E00               	movlw	0
  2922  001B68  0100               	movlb	0	; () banked
  2923  001B6A  BF9B               	btfsc	sprintf@c& (0+255),7,b
  2924  001B6C  0EFF               	movlw	255
  2925  001B6E  0100               	movlb	0	; () banked
  2926  001B70  5B98               	subwfb	(sprintf@width+1)& (0+255),f,b
  2927  001B72  D005               	goto	l4714
  2928  001B74                     l4712:
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;doprnt.c: 1383: else
  2932                           ;doprnt.c: 1384: width = 0;
  2933  001B74  0E00               	movlw	0
  2934  001B76  0100               	movlb	0	; () banked
  2935  001B78  6F98               	movwf	(sprintf@width+1)& (0+255),b
  2936  001B7A  0E00               	movlw	0
  2937  001B7C  6F97               	movwf	sprintf@width& (0+255),b
  2938  001B7E                     l4714:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;doprnt.c: 1422: {
  2942                           ;doprnt.c: 1424: if(width
  2943                           ;doprnt.c: 1426: && !(flag & 0x08)
  2944                           ;doprnt.c: 1428: )
  2945  001B7E  0100               	movlb	0	; () banked
  2946  001B80  5197               	movf	sprintf@width& (0+255),w,b
  2947  001B82  0100               	movlb	0	; () banked
  2948  001B84  1198               	iorwf	(sprintf@width+1)& (0+255),w,b
  2949  001B86  B4D8               	btfsc	status,2,c
  2950  001B88  D016               	goto	l4724
  2951                           
  2952                           ; BSR set to: 0
  2953  001B8A  0100               	movlb	0	; () banked
  2954  001B8C  B792               	btfsc	sprintf@flag& (0+255),3,b
  2955  001B8E  D013               	goto	l4724
  2956  001B90                     l4718:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2960  001B90  C076  FFD9         	movff	sprintf@sp,fsr2l
  2961  001B94  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  2962  001B98  0E20               	movlw	32
  2963  001B9A  6EDF               	movwf	indf2,c
  2964                           
  2965                           ; BSR set to: 0
  2966  001B9C  0100               	movlb	0	; () banked
  2967  001B9E  4B76               	infsnz	sprintf@sp& (0+255),f,b
  2968  001BA0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;doprnt.c: 1431: while(--width);
  2972  001BA2  0100               	movlb	0	; () banked
  2973  001BA4  0797               	decf	sprintf@width& (0+255),f,b
  2974  001BA6  A0D8               	btfss	status,0,c
  2975  001BA8  0798               	decf	(sprintf@width+1)& (0+255),f,b
  2976  001BAA  0100               	movlb	0	; () banked
  2977  001BAC  5197               	movf	sprintf@width& (0+255),w,b
  2978  001BAE  0100               	movlb	0	; () banked
  2979  001BB0  1198               	iorwf	(sprintf@width+1)& (0+255),w,b
  2980  001BB2  A4D8               	btfss	status,2,c
  2981  001BB4  D7ED               	goto	l4718
  2982  001BB6                     l4724:
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;doprnt.c: 1438: if(flag & 0x03)
  2986  001BB6  0E03               	movlw	3
  2987  001BB8  0100               	movlb	0	; () banked
  2988  001BBA  1592               	andwf	sprintf@flag& (0+255),w,b
  2989  001BBC  0100               	movlb	0	; () banked
  2990  001BBE  6F7D               	movwf	??_sprintf& (0+255),b
  2991  001BC0  0E00               	movlw	0
  2992  001BC2  0100               	movlb	0	; () banked
  2993  001BC4  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
  2994  001BC6  0100               	movlb	0	; () banked
  2995  001BC8  6F7E               	movwf	(??_sprintf+1)& (0+255),b
  2996  001BCA  0100               	movlb	0	; () banked
  2997  001BCC  517D               	movf	??_sprintf& (0+255),w,b
  2998  001BCE  0100               	movlb	0	; () banked
  2999  001BD0  117E               	iorwf	(??_sprintf+1)& (0+255),w,b
  3000  001BD2  B4D8               	btfsc	status,2,c
  3001  001BD4  D052               	goto	l4736
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3005  001BD6  C076  FFD9         	movff	sprintf@sp,fsr2l
  3006  001BDA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  3007  001BDE  0E2D               	movlw	45
  3008  001BE0  6EDF               	movwf	indf2,c
  3009  001BE2  D048               	goto	l4734
  3010  001BE4                     l4730:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;doprnt.c: 1478: {
  3014                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3015  001BE4  C099  F07D         	movff	sprintf@prec,??_sprintf
  3016  001BE8  C09A  F07E         	movff	sprintf@prec+1,??_sprintf+1
  3017  001BEC  0100               	movlb	0	; () banked
  3018  001BEE  90D8               	bcf	status,0,c
  3019  001BF0  377D               	rlcf	??_sprintf& (0+255),f,b
  3020  001BF2  377E               	rlcf	(??_sprintf+1)& (0+255),f,b
  3021  001BF4  0100               	movlb	0	; () banked
  3022  001BF6  90D8               	bcf	status,0,c
  3023  001BF8  377D               	rlcf	??_sprintf& (0+255),f,b
  3024  001BFA  377E               	rlcf	(??_sprintf+1)& (0+255),f,b
  3025  001BFC  0E01               	movlw	low _dpowers
  3026  001BFE  0100               	movlb	0	; () banked
  3027  001C00  257D               	addwf	??_sprintf& (0+255),w,b
  3028  001C02  6EF6               	movwf	tblptrl,c
  3029  001C04  0E10               	movlw	high _dpowers
  3030  001C06  217E               	addwfc	(??_sprintf+1)& (0+255),w,b
  3031  001C08  6EF7               	movwf	tblptrh,c
  3032  001C0A                     	if	1	;There are 3 active tblptr bytes
  3033  001C0A  6AF8               	clrf	tblptru,c
  3034  001C0C  0E00               	movlw	low (__mediumconst shr (0+16))
  3035  001C0E  22F8               	addwfc	tblptru,f,c
  3036  001C10                     	endif
  3037  001C10  0009               	tblrd		*+
  3038  001C12  CFF5 F017          	movff	tablat,___lldiv@divisor
  3039  001C16  0009               	tblrd		*+
  3040  001C18  CFF5 F018          	movff	tablat,___lldiv@divisor+1
  3041  001C1C  0009               	tblrd		*+
  3042  001C1E  CFF5 F019          	movff	tablat,___lldiv@divisor+2
  3043  001C22  000A               	tblrd		*-
  3044  001C24  CFF5 F01A          	movff	tablat,___lldiv@divisor+3
  3045  001C28  C088  F013         	movff	sprintf@val,___lldiv@dividend
  3046  001C2C  C089  F014         	movff	sprintf@val+1,___lldiv@dividend+1
  3047  001C30  C08A  F015         	movff	sprintf@val+2,___lldiv@dividend+2
  3048  001C34  C08B  F016         	movff	sprintf@val+3,___lldiv@dividend+3
  3049  001C38  EC86  F019         	call	___lldiv	;wreg free
  3050  001C3C  C013  F020         	movff	?___lldiv,___llmod@dividend
  3051  001C40  C014  F021         	movff	?___lldiv+1,___llmod@dividend+1
  3052  001C44  C015  F022         	movff	?___lldiv+2,___llmod@dividend+2
  3053  001C48  C016  F023         	movff	?___lldiv+3,___llmod@dividend+3
  3054  001C4C  0E0A               	movlw	10
  3055  001C4E  6E24               	movwf	___llmod@divisor,c
  3056  001C50  0E00               	movlw	0
  3057  001C52  6E25               	movwf	___llmod@divisor+1,c
  3058  001C54  0E00               	movlw	0
  3059  001C56  6E26               	movwf	___llmod@divisor+2,c
  3060  001C58  0E00               	movlw	0
  3061  001C5A  6E27               	movwf	___llmod@divisor+3,c
  3062  001C5C  EC78  F01A         	call	___llmod	;wreg free
  3063  001C60  5020               	movf	?___llmod,w,c
  3064  001C62  0F30               	addlw	48
  3065  001C64  0100               	movlb	0	; () banked
  3066  001C66  6F9B               	movwf	sprintf@c& (0+255),b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;doprnt.c: 1523: }
  3070                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3071  001C68  C076  FFD9         	movff	sprintf@sp,fsr2l
  3072  001C6C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  3073  001C70  C09B  FFDF         	movff	sprintf@c,indf2
  3074  001C74                     l4734:
  3075                           
  3076                           ; BSR set to: 0
  3077  001C74  0100               	movlb	0	; () banked
  3078  001C76  4B76               	infsnz	sprintf@sp& (0+255),f,b
  3079  001C78  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  3080  001C7A                     l4736:
  3081                           
  3082                           ; BSR set to: 0
  3083  001C7A  0100               	movlb	0	; () banked
  3084  001C7C  0799               	decf	sprintf@prec& (0+255),f,b
  3085  001C7E  A0D8               	btfss	status,0,c
  3086  001C80  079A               	decf	(sprintf@prec+1)& (0+255),f,b
  3087  001C82  0100               	movlb	0	; () banked
  3088  001C84  2999               	incf	sprintf@prec& (0+255),w,b
  3089  001C86  E1AE               	bnz	l4730
  3090  001C88  0100               	movlb	0	; () banked
  3091  001C8A  299A               	incf	(sprintf@prec+1)& (0+255),w,b
  3092  001C8C  A4D8               	btfss	status,2,c
  3093  001C8E  D7AA               	goto	l4730
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;doprnt.c: 1525: }
  3097                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  3098  001C90  0100               	movlb	0	; () banked
  3099  001C92  A792               	btfss	sprintf@flag& (0+255),3,b
  3100  001C94  D01D               	goto	l4746
  3101                           
  3102                           ; BSR set to: 0
  3103  001C96  0100               	movlb	0	; () banked
  3104  001C98  BF98               	btfsc	(sprintf@width+1)& (0+255),7,b
  3105  001C9A  D01A               	goto	l4746
  3106  001C9C  0100               	movlb	0	; () banked
  3107  001C9E  5198               	movf	(sprintf@width+1)& (0+255),w,b
  3108  001CA0  E104               	bnz	l4740
  3109  001CA2  0100               	movlb	0	; () banked
  3110  001CA4  0597               	decf	sprintf@width& (0+255),w,b
  3111  001CA6  A0D8               	btfss	status,0,c
  3112  001CA8  D013               	goto	l4746
  3113  001CAA                     l4740:
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;doprnt.c: 1530: ((*sp++ = (' ')));
  3117  001CAA  C076  FFD9         	movff	sprintf@sp,fsr2l
  3118  001CAE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  3119  001CB2  0E20               	movlw	32
  3120  001CB4  6EDF               	movwf	indf2,c
  3121                           
  3122                           ; BSR set to: 0
  3123  001CB6  0100               	movlb	0	; () banked
  3124  001CB8  4B76               	infsnz	sprintf@sp& (0+255),f,b
  3125  001CBA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 1531: while(--width);
  3129  001CBC  0100               	movlb	0	; () banked
  3130  001CBE  0797               	decf	sprintf@width& (0+255),f,b
  3131  001CC0  A0D8               	btfss	status,0,c
  3132  001CC2  0798               	decf	(sprintf@width+1)& (0+255),f,b
  3133  001CC4  0100               	movlb	0	; () banked
  3134  001CC6  5197               	movf	sprintf@width& (0+255),w,b
  3135  001CC8  0100               	movlb	0	; () banked
  3136  001CCA  1198               	iorwf	(sprintf@width+1)& (0+255),w,b
  3137  001CCC  A4D8               	btfss	status,2,c
  3138  001CCE  D7ED               	goto	l4740
  3139  001CD0                     l4746:
  3140                           
  3141                           ; BSR set to: 0
  3142  001CD0  C078  FFF6         	movff	sprintf@f,tblptrl
  3143  001CD4  C079  FFF7         	movff	sprintf@f+1,tblptrh
  3144  001CD8  0100               	movlb	0	; () banked
  3145  001CDA  4B78               	infsnz	sprintf@f& (0+255),f,b
  3146  001CDC  2B79               	incf	(sprintf@f+1)& (0+255),f,b
  3147  001CDE                     	if	0	;tblptru may be non-zero
  3148  001CDE                     	endif
  3149  001CDE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3150  001CDE  0E00               	movlw	low (__mediumconst shr (0+16))
  3151  001CE0  6EF8               	movwf	tblptru,c
  3152  001CE2                     	endif
  3153  001CE2  0008               	tblrd		*
  3154  001CE4  CFF5 F09B          	movff	tablat,sprintf@c
  3155  001CE8  0100               	movlb	0	; () banked
  3156  001CEA  519B               	movf	sprintf@c& (0+255),w,b
  3157  001CEC  A4D8               	btfss	status,2,c
  3158  001CEE  EF60  F008         	goto	l4436
  3159  001CF2                     l4748:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;doprnt.c: 1538: *sp = 0;
  3163  001CF2  C076  FFD9         	movff	sprintf@sp,fsr2l
  3164  001CF6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
  3165  001CFA  0E00               	movlw	0
  3166  001CFC  6EDF               	movwf	indf2,c
  3167  001CFE  0012               	return	
  3168  001D00                     __end_of_sprintf:
  3169                           	opt stack 0
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           prodh	equ	0xFF4
  3175                           prodl	equ	0xFF3
  3176                           intcon	equ	0xFF2
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           indf2	equ	0xFDF
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _scale *****************
  3187 ;; Defined at:
  3188 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  scl             1    wreg     char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  scl             1    3[BANK0 ] char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  3   53[COMRAM] char 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        7 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    6
  3209 ;; This function calls:
  3210 ;;		___awdiv
  3211 ;;		___awmod
  3212 ;;		___ftmul
  3213 ;;		___wmul
  3214 ;; This function is called by:
  3215 ;;		_sprintf
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text2
  3220  001D00                     __ptext2:
  3221                           	opt stack 0
  3222  001D00                     _scale:
  3223                           	opt stack 23
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;incstack = 0
  3227                           ;scale@scl stored from wreg
  3228  001D00  0100               	movlb	0	; () banked
  3229  001D02  6F63               	movwf	scale@scl& (0+255),b
  3230                           
  3231                           ;doprnt.c: 428: if(scl < 0) {
  3232  001D04  0100               	movlb	0	; () banked
  3233  001D06  AF63               	btfss	scale@scl& (0+255),7,b
  3234  001D08  D116               	goto	l4352
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;doprnt.c: 429: scl = -scl;
  3238  001D0A  0100               	movlb	0	; () banked
  3239  001D0C  6D63               	negf	scale@scl& (0+255),b
  3240                           
  3241                           ;doprnt.c: 430: if(scl>=110)
  3242  001D0E  0100               	movlb	0	; () banked
  3243  001D10  5163               	movf	scale@scl& (0+255),w,b
  3244  001D12  0A80               	xorlw	128
  3245  001D14  0F12               	addlw	-238
  3246  001D16  A0D8               	btfss	status,0,c
  3247  001D18  D09D               	goto	l4342
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3251  001D1A  0E00               	movlw	0
  3252  001D1C  6E24               	movwf	___wmul@multiplicand+1,c
  3253  001D1E  0E03               	movlw	3
  3254  001D20  6E23               	movwf	___wmul@multiplicand,c
  3255  001D22  0E00               	movlw	0
  3256  001D24  6E1C               	movwf	___awdiv@divisor+1,c
  3257  001D26  0E0A               	movlw	10
  3258  001D28  6E1B               	movwf	___awdiv@divisor,c
  3259  001D2A  0E00               	movlw	0
  3260  001D2C  6E16               	movwf	___awmod@divisor+1,c
  3261  001D2E  0E64               	movlw	100
  3262  001D30  6E15               	movwf	___awmod@divisor,c
  3263  001D32  0100               	movlb	0	; () banked
  3264  001D34  5163               	movf	scale@scl& (0+255),w,b
  3265  001D36  6E13               	movwf	___awmod@dividend,c
  3266  001D38  6A14               	clrf	___awmod@dividend+1,c
  3267  001D3A  BE13               	btfsc	___awmod@dividend,7,c
  3268  001D3C  0614               	decf	___awmod@dividend+1,f,c
  3269  001D3E  EC40  F01A         	call	___awmod	;wreg free
  3270  001D42  C013  F019         	movff	?___awmod,___awdiv@dividend
  3271  001D46  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3272  001D4A  EC44  F019         	call	___awdiv	;wreg free
  3273  001D4E  0E09               	movlw	9
  3274  001D50  2419               	addwf	?___awdiv,w,c
  3275  001D52  6E21               	movwf	___wmul@multiplier,c
  3276  001D54  0E00               	movlw	0
  3277  001D56  201A               	addwfc	?___awdiv+1,w,c
  3278  001D58  6E22               	movwf	___wmul@multiplier+1,c
  3279  001D5A  ECBB  F01B         	call	___wmul	;wreg free
  3280  001D5E  0E29               	movlw	low __npowers_
  3281  001D60  2421               	addwf	?___wmul,w,c
  3282  001D62  6EF6               	movwf	tblptrl,c
  3283  001D64  0E10               	movlw	high __npowers_
  3284  001D66  2022               	addwfc	?___wmul+1,w,c
  3285  001D68  6EF7               	movwf	tblptrh,c
  3286  001D6A                     	if	1	;There are 3 active tblptr bytes
  3287  001D6A  6AF8               	clrf	tblptru,c
  3288  001D6C  0E00               	movlw	low (__mediumconst shr (0+16))
  3289  001D6E  22F8               	addwfc	tblptru,f,c
  3290  001D70                     	endif
  3291  001D70  0009               	tblrd		*+
  3292  001D72  CFF5 F02A          	movff	tablat,___ftmul@f2
  3293  001D76  0009               	tblrd		*+
  3294  001D78  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3295  001D7C  000A               	tblrd		*-
  3296  001D7E  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3297  001D82  0E00               	movlw	0
  3298  001D84  6E1C               	movwf	___awdiv@divisor+1,c
  3299  001D86  0E64               	movlw	100
  3300  001D88  6E1B               	movwf	___awdiv@divisor,c
  3301  001D8A  0100               	movlb	0	; () banked
  3302  001D8C  5163               	movf	scale@scl& (0+255),w,b
  3303  001D8E  6E19               	movwf	___awdiv@dividend,c
  3304  001D90  6A1A               	clrf	___awdiv@dividend+1,c
  3305  001D92  BE19               	btfsc	___awdiv@dividend,7,c
  3306  001D94  061A               	decf	___awdiv@dividend+1,f,c
  3307  001D96  EC44  F019         	call	___awdiv	;wreg free
  3308  001D9A  0E12               	movlw	18
  3309  001D9C  2419               	addwf	?___awdiv,w,c
  3310  001D9E  6E21               	movwf	___wmul@multiplier,c
  3311  001DA0  0E00               	movlw	0
  3312  001DA2  201A               	addwfc	?___awdiv+1,w,c
  3313  001DA4  6E22               	movwf	___wmul@multiplier+1,c
  3314  001DA6  0E00               	movlw	0
  3315  001DA8  6E24               	movwf	___wmul@multiplicand+1,c
  3316  001DAA  0E03               	movlw	3
  3317  001DAC  6E23               	movwf	___wmul@multiplicand,c
  3318  001DAE  ECBB  F01B         	call	___wmul	;wreg free
  3319  001DB2  0E29               	movlw	low __npowers_
  3320  001DB4  2421               	addwf	?___wmul,w,c
  3321  001DB6  6EF6               	movwf	tblptrl,c
  3322  001DB8  0E10               	movlw	high __npowers_
  3323  001DBA  2022               	addwfc	?___wmul+1,w,c
  3324  001DBC  6EF7               	movwf	tblptrh,c
  3325  001DBE                     	if	1	;There are 3 active tblptr bytes
  3326  001DBE  6AF8               	clrf	tblptru,c
  3327  001DC0  0E00               	movlw	low (__mediumconst shr (0+16))
  3328  001DC2  22F8               	addwfc	tblptru,f,c
  3329  001DC4                     	endif
  3330  001DC4  0009               	tblrd		*+
  3331  001DC6  CFF5 F027          	movff	tablat,___ftmul@f1
  3332  001DCA  0009               	tblrd		*+
  3333  001DCC  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3334  001DD0  000A               	tblrd		*-
  3335  001DD2  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3336  001DD6  ECE7  F016         	call	___ftmul	;wreg free
  3337  001DDA  C027  F060         	movff	?___ftmul,_scale$2347
  3338  001DDE  C028  F061         	movff	?___ftmul+1,_scale$2347+1
  3339  001DE2  C029  F062         	movff	?___ftmul+2,_scale$2347+2
  3340                           
  3341                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3342  001DE6  C060  F027         	movff	_scale$2347,___ftmul@f1
  3343  001DEA  C061  F028         	movff	_scale$2347+1,___ftmul@f1+1
  3344  001DEE  C062  F029         	movff	_scale$2347+2,___ftmul@f1+2
  3345  001DF2  0E00               	movlw	0
  3346  001DF4  6E24               	movwf	___wmul@multiplicand+1,c
  3347  001DF6  0E03               	movlw	3
  3348  001DF8  6E23               	movwf	___wmul@multiplicand,c
  3349  001DFA  0E00               	movlw	0
  3350  001DFC  6E16               	movwf	___awmod@divisor+1,c
  3351  001DFE  0E0A               	movlw	10
  3352  001E00  6E15               	movwf	___awmod@divisor,c
  3353  001E02  0100               	movlb	0	; () banked
  3354  001E04  5163               	movf	scale@scl& (0+255),w,b
  3355  001E06  6E13               	movwf	___awmod@dividend,c
  3356  001E08  6A14               	clrf	___awmod@dividend+1,c
  3357  001E0A  BE13               	btfsc	___awmod@dividend,7,c
  3358  001E0C  0614               	decf	___awmod@dividend+1,f,c
  3359  001E0E  EC40  F01A         	call	___awmod	;wreg free
  3360  001E12  C013  F021         	movff	?___awmod,___wmul@multiplier
  3361  001E16  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3362  001E1A  ECBB  F01B         	call	___wmul	;wreg free
  3363  001E1E  0E29               	movlw	low __npowers_
  3364  001E20  2421               	addwf	?___wmul,w,c
  3365  001E22  6EF6               	movwf	tblptrl,c
  3366  001E24  0E10               	movlw	high __npowers_
  3367  001E26  2022               	addwfc	?___wmul+1,w,c
  3368  001E28  6EF7               	movwf	tblptrh,c
  3369  001E2A                     	if	1	;There are 3 active tblptr bytes
  3370  001E2A  6AF8               	clrf	tblptru,c
  3371  001E2C  0E00               	movlw	low (__mediumconst shr (0+16))
  3372  001E2E  22F8               	addwfc	tblptru,f,c
  3373  001E30                     	endif
  3374  001E30  0009               	tblrd		*+
  3375  001E32  CFF5 F02A          	movff	tablat,___ftmul@f2
  3376  001E36  0009               	tblrd		*+
  3377  001E38  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3378  001E3C  000A               	tblrd		*-
  3379  001E3E  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3380  001E42  ECE7  F016         	call	___ftmul	;wreg free
  3381  001E46  C027  F036         	movff	?___ftmul,?_scale
  3382  001E4A  C028  F037         	movff	?___ftmul+1,?_scale+1
  3383  001E4E  C029  F038         	movff	?___ftmul+2,?_scale+2
  3384  001E52  0012               	return	
  3385  001E54                     l4342:
  3386                           
  3387                           ;doprnt.c: 432: else if(scl > 10)
  3388  001E54  0100               	movlb	0	; () banked
  3389  001E56  5163               	movf	scale@scl& (0+255),w,b
  3390  001E58  0A80               	xorlw	128
  3391  001E5A  0F75               	addlw	-139
  3392  001E5C  A0D8               	btfss	status,0,c
  3393  001E5E  D055               	goto	l4348
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3397  001E60  0E00               	movlw	0
  3398  001E62  6E1C               	movwf	___awdiv@divisor+1,c
  3399  001E64  0E0A               	movlw	10
  3400  001E66  6E1B               	movwf	___awdiv@divisor,c
  3401  001E68  0100               	movlb	0	; () banked
  3402  001E6A  5163               	movf	scale@scl& (0+255),w,b
  3403  001E6C  6E19               	movwf	___awdiv@dividend,c
  3404  001E6E  6A1A               	clrf	___awdiv@dividend+1,c
  3405  001E70  BE19               	btfsc	___awdiv@dividend,7,c
  3406  001E72  061A               	decf	___awdiv@dividend+1,f,c
  3407  001E74  EC44  F019         	call	___awdiv	;wreg free
  3408  001E78  0E09               	movlw	9
  3409  001E7A  2419               	addwf	?___awdiv,w,c
  3410  001E7C  6E21               	movwf	___wmul@multiplier,c
  3411  001E7E  0E00               	movlw	0
  3412  001E80  201A               	addwfc	?___awdiv+1,w,c
  3413  001E82  6E22               	movwf	___wmul@multiplier+1,c
  3414  001E84  0E00               	movlw	0
  3415  001E86  6E24               	movwf	___wmul@multiplicand+1,c
  3416  001E88  0E03               	movlw	3
  3417  001E8A  6E23               	movwf	___wmul@multiplicand,c
  3418  001E8C  ECBB  F01B         	call	___wmul	;wreg free
  3419  001E90  0E29               	movlw	low __npowers_
  3420  001E92  2421               	addwf	?___wmul,w,c
  3421  001E94  6EF6               	movwf	tblptrl,c
  3422  001E96  0E10               	movlw	high __npowers_
  3423  001E98  2022               	addwfc	?___wmul+1,w,c
  3424  001E9A  6EF7               	movwf	tblptrh,c
  3425  001E9C                     	if	1	;There are 3 active tblptr bytes
  3426  001E9C  6AF8               	clrf	tblptru,c
  3427  001E9E  0E00               	movlw	low (__mediumconst shr (0+16))
  3428  001EA0  22F8               	addwfc	tblptru,f,c
  3429  001EA2                     	endif
  3430  001EA2  0009               	tblrd		*+
  3431  001EA4  CFF5 F027          	movff	tablat,___ftmul@f1
  3432  001EA8  0009               	tblrd		*+
  3433  001EAA  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3434  001EAE  000A               	tblrd		*-
  3435  001EB0  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3436  001EB4  0E00               	movlw	0
  3437  001EB6  6E24               	movwf	___wmul@multiplicand+1,c
  3438  001EB8  0E03               	movlw	3
  3439  001EBA  6E23               	movwf	___wmul@multiplicand,c
  3440  001EBC  0E00               	movlw	0
  3441  001EBE  6E16               	movwf	___awmod@divisor+1,c
  3442  001EC0  0E0A               	movlw	10
  3443  001EC2  6E15               	movwf	___awmod@divisor,c
  3444  001EC4  0100               	movlb	0	; () banked
  3445  001EC6  5163               	movf	scale@scl& (0+255),w,b
  3446  001EC8  6E13               	movwf	___awmod@dividend,c
  3447  001ECA  6A14               	clrf	___awmod@dividend+1,c
  3448  001ECC  BE13               	btfsc	___awmod@dividend,7,c
  3449  001ECE  0614               	decf	___awmod@dividend+1,f,c
  3450  001ED0  EC40  F01A         	call	___awmod	;wreg free
  3451  001ED4  C013  F021         	movff	?___awmod,___wmul@multiplier
  3452  001ED8  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3453  001EDC  ECBB  F01B         	call	___wmul	;wreg free
  3454  001EE0  0E29               	movlw	low __npowers_
  3455  001EE2  2421               	addwf	?___wmul,w,c
  3456  001EE4  6EF6               	movwf	tblptrl,c
  3457  001EE6  0E10               	movlw	high __npowers_
  3458  001EE8  2022               	addwfc	?___wmul+1,w,c
  3459  001EEA  6EF7               	movwf	tblptrh,c
  3460  001EEC                     	if	1	;There are 3 active tblptr bytes
  3461  001EEC  6AF8               	clrf	tblptru,c
  3462  001EEE  0E00               	movlw	low (__mediumconst shr (0+16))
  3463  001EF0  22F8               	addwfc	tblptru,f,c
  3464  001EF2                     	endif
  3465  001EF2  0009               	tblrd		*+
  3466  001EF4  CFF5 F02A          	movff	tablat,___ftmul@f2
  3467  001EF8  0009               	tblrd		*+
  3468  001EFA  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3469  001EFE  000A               	tblrd		*-
  3470  001F00  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3471  001F04  ECE7  F016         	call	___ftmul	;wreg free
  3472  001F08  D79E               	goto	L3
  3473  001F0A                     l4348:
  3474                           
  3475                           ;doprnt.c: 434: return _npowers_[scl];
  3476  001F0A  0100               	movlb	0	; () banked
  3477  001F0C  5163               	movf	scale@scl& (0+255),w,b
  3478  001F0E  0D03               	mullw	3
  3479  001F10  0E29               	movlw	low __npowers_
  3480  001F12  24F3               	addwf	prodl,w,c
  3481  001F14  6EF6               	movwf	tblptrl,c
  3482  001F16  0E10               	movlw	high __npowers_
  3483  001F18  20F4               	addwfc	prodh,w,c
  3484  001F1A  6EF7               	movwf	tblptrh,c
  3485  001F1C                     	if	1	;There are 3 active tblptr bytes
  3486  001F1C  6AF8               	clrf	tblptru,c
  3487  001F1E  0E00               	movlw	low (__mediumconst shr (0+16))
  3488  001F20  22F8               	addwfc	tblptru,f,c
  3489  001F22                     	endif
  3490  001F22  0009               	tblrd		*+
  3491  001F24  CFF5 F036          	movff	tablat,?_scale
  3492  001F28  0009               	tblrd		*+
  3493  001F2A  CFF5 F037          	movff	tablat,?_scale+1
  3494  001F2E  000A               	tblrd		*-
  3495  001F30  CFF5 F038          	movff	tablat,?_scale+2
  3496                           
  3497                           ; BSR set to: 0
  3498  001F34  0012               	return	
  3499  001F36                     l4352:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;doprnt.c: 435: }
  3503                           ;doprnt.c: 436: if(scl>=110)
  3504  001F36  0100               	movlb	0	; () banked
  3505  001F38  5163               	movf	scale@scl& (0+255),w,b
  3506  001F3A  0A80               	xorlw	128
  3507  001F3C  0F12               	addlw	-238
  3508  001F3E  A0D8               	btfss	status,0,c
  3509  001F40  D09D               	goto	l4360
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3513  001F42  0E00               	movlw	0
  3514  001F44  6E24               	movwf	___wmul@multiplicand+1,c
  3515  001F46  0E03               	movlw	3
  3516  001F48  6E23               	movwf	___wmul@multiplicand,c
  3517  001F4A  0E00               	movlw	0
  3518  001F4C  6E1C               	movwf	___awdiv@divisor+1,c
  3519  001F4E  0E0A               	movlw	10
  3520  001F50  6E1B               	movwf	___awdiv@divisor,c
  3521  001F52  0E00               	movlw	0
  3522  001F54  6E16               	movwf	___awmod@divisor+1,c
  3523  001F56  0E64               	movlw	100
  3524  001F58  6E15               	movwf	___awmod@divisor,c
  3525  001F5A  0100               	movlb	0	; () banked
  3526  001F5C  5163               	movf	scale@scl& (0+255),w,b
  3527  001F5E  6E13               	movwf	___awmod@dividend,c
  3528  001F60  6A14               	clrf	___awmod@dividend+1,c
  3529  001F62  BE13               	btfsc	___awmod@dividend,7,c
  3530  001F64  0614               	decf	___awmod@dividend+1,f,c
  3531  001F66  EC40  F01A         	call	___awmod	;wreg free
  3532  001F6A  C013  F019         	movff	?___awmod,___awdiv@dividend
  3533  001F6E  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3534  001F72  EC44  F019         	call	___awdiv	;wreg free
  3535  001F76  0E09               	movlw	9
  3536  001F78  2419               	addwf	?___awdiv,w,c
  3537  001F7A  6E21               	movwf	___wmul@multiplier,c
  3538  001F7C  0E00               	movlw	0
  3539  001F7E  201A               	addwfc	?___awdiv+1,w,c
  3540  001F80  6E22               	movwf	___wmul@multiplier+1,c
  3541  001F82  ECBB  F01B         	call	___wmul	;wreg free
  3542  001F86  0E50               	movlw	low __powers_
  3543  001F88  2421               	addwf	?___wmul,w,c
  3544  001F8A  6EF6               	movwf	tblptrl,c
  3545  001F8C  0E10               	movlw	high __powers_
  3546  001F8E  2022               	addwfc	?___wmul+1,w,c
  3547  001F90  6EF7               	movwf	tblptrh,c
  3548  001F92                     	if	1	;There are 3 active tblptr bytes
  3549  001F92  6AF8               	clrf	tblptru,c
  3550  001F94  0E00               	movlw	low (__mediumconst shr (0+16))
  3551  001F96  22F8               	addwfc	tblptru,f,c
  3552  001F98                     	endif
  3553  001F98  0009               	tblrd		*+
  3554  001F9A  CFF5 F02A          	movff	tablat,___ftmul@f2
  3555  001F9E  0009               	tblrd		*+
  3556  001FA0  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3557  001FA4  000A               	tblrd		*-
  3558  001FA6  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3559  001FAA  0E00               	movlw	0
  3560  001FAC  6E1C               	movwf	___awdiv@divisor+1,c
  3561  001FAE  0E64               	movlw	100
  3562  001FB0  6E1B               	movwf	___awdiv@divisor,c
  3563  001FB2  0100               	movlb	0	; () banked
  3564  001FB4  5163               	movf	scale@scl& (0+255),w,b
  3565  001FB6  6E19               	movwf	___awdiv@dividend,c
  3566  001FB8  6A1A               	clrf	___awdiv@dividend+1,c
  3567  001FBA  BE19               	btfsc	___awdiv@dividend,7,c
  3568  001FBC  061A               	decf	___awdiv@dividend+1,f,c
  3569  001FBE  EC44  F019         	call	___awdiv	;wreg free
  3570  001FC2  0E12               	movlw	18
  3571  001FC4  2419               	addwf	?___awdiv,w,c
  3572  001FC6  6E21               	movwf	___wmul@multiplier,c
  3573  001FC8  0E00               	movlw	0
  3574  001FCA  201A               	addwfc	?___awdiv+1,w,c
  3575  001FCC  6E22               	movwf	___wmul@multiplier+1,c
  3576  001FCE  0E00               	movlw	0
  3577  001FD0  6E24               	movwf	___wmul@multiplicand+1,c
  3578  001FD2  0E03               	movlw	3
  3579  001FD4  6E23               	movwf	___wmul@multiplicand,c
  3580  001FD6  ECBB  F01B         	call	___wmul	;wreg free
  3581  001FDA  0E50               	movlw	low __powers_
  3582  001FDC  2421               	addwf	?___wmul,w,c
  3583  001FDE  6EF6               	movwf	tblptrl,c
  3584  001FE0  0E10               	movlw	high __powers_
  3585  001FE2  2022               	addwfc	?___wmul+1,w,c
  3586  001FE4  6EF7               	movwf	tblptrh,c
  3587  001FE6                     	if	1	;There are 3 active tblptr bytes
  3588  001FE6  6AF8               	clrf	tblptru,c
  3589  001FE8  0E00               	movlw	low (__mediumconst shr (0+16))
  3590  001FEA  22F8               	addwfc	tblptru,f,c
  3591  001FEC                     	endif
  3592  001FEC  0009               	tblrd		*+
  3593  001FEE  CFF5 F027          	movff	tablat,___ftmul@f1
  3594  001FF2  0009               	tblrd		*+
  3595  001FF4  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3596  001FF8  000A               	tblrd		*-
  3597  001FFA  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3598  001FFE  ECE7  F016         	call	___ftmul	;wreg free
  3599  002002  C027  F060         	movff	?___ftmul,_scale$2347
  3600  002006  C028  F061         	movff	?___ftmul+1,_scale$2347+1
  3601  00200A  C029  F062         	movff	?___ftmul+2,_scale$2347+2
  3602                           
  3603                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3604  00200E  C060  F027         	movff	_scale$2347,___ftmul@f1
  3605  002012  C061  F028         	movff	_scale$2347+1,___ftmul@f1+1
  3606  002016  C062  F029         	movff	_scale$2347+2,___ftmul@f1+2
  3607  00201A  0E00               	movlw	0
  3608  00201C  6E24               	movwf	___wmul@multiplicand+1,c
  3609  00201E  0E03               	movlw	3
  3610  002020  6E23               	movwf	___wmul@multiplicand,c
  3611  002022  0E00               	movlw	0
  3612  002024  6E16               	movwf	___awmod@divisor+1,c
  3613  002026  0E0A               	movlw	10
  3614  002028  6E15               	movwf	___awmod@divisor,c
  3615  00202A  0100               	movlb	0	; () banked
  3616  00202C  5163               	movf	scale@scl& (0+255),w,b
  3617  00202E  6E13               	movwf	___awmod@dividend,c
  3618  002030  6A14               	clrf	___awmod@dividend+1,c
  3619  002032  BE13               	btfsc	___awmod@dividend,7,c
  3620  002034  0614               	decf	___awmod@dividend+1,f,c
  3621  002036  EC40  F01A         	call	___awmod	;wreg free
  3622  00203A  C013  F021         	movff	?___awmod,___wmul@multiplier
  3623  00203E  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3624  002042  ECBB  F01B         	call	___wmul	;wreg free
  3625  002046  0E50               	movlw	low __powers_
  3626  002048  2421               	addwf	?___wmul,w,c
  3627  00204A  6EF6               	movwf	tblptrl,c
  3628  00204C  0E10               	movlw	high __powers_
  3629  00204E  2022               	addwfc	?___wmul+1,w,c
  3630  002050  6EF7               	movwf	tblptrh,c
  3631  002052                     	if	1	;There are 3 active tblptr bytes
  3632  002052  6AF8               	clrf	tblptru,c
  3633  002054  0E00               	movlw	low (__mediumconst shr (0+16))
  3634  002056  22F8               	addwfc	tblptru,f,c
  3635  002058                     	endif
  3636  002058  0009               	tblrd		*+
  3637  00205A  CFF5 F02A          	movff	tablat,___ftmul@f2
  3638  00205E  0009               	tblrd		*+
  3639  002060  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3640  002064  000A               	tblrd		*-
  3641  002066  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3642  00206A  ECE7  F016         	call	___ftmul	;wreg free
  3643  00206E  C027  F036         	movff	?___ftmul,?_scale
  3644  002072  C028  F037         	movff	?___ftmul+1,?_scale+1
  3645  002076  C029  F038         	movff	?___ftmul+2,?_scale+2
  3646  00207A  0012               	return	
  3647  00207C                     l4360:
  3648                           
  3649                           ;doprnt.c: 438: else if(scl > 10)
  3650  00207C  0100               	movlb	0	; () banked
  3651  00207E  5163               	movf	scale@scl& (0+255),w,b
  3652  002080  0A80               	xorlw	128
  3653  002082  0F75               	addlw	-139
  3654  002084  A0D8               	btfss	status,0,c
  3655  002086  D055               	goto	l4366
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3659  002088  0E00               	movlw	0
  3660  00208A  6E1C               	movwf	___awdiv@divisor+1,c
  3661  00208C  0E0A               	movlw	10
  3662  00208E  6E1B               	movwf	___awdiv@divisor,c
  3663  002090  0100               	movlb	0	; () banked
  3664  002092  5163               	movf	scale@scl& (0+255),w,b
  3665  002094  6E19               	movwf	___awdiv@dividend,c
  3666  002096  6A1A               	clrf	___awdiv@dividend+1,c
  3667  002098  BE19               	btfsc	___awdiv@dividend,7,c
  3668  00209A  061A               	decf	___awdiv@dividend+1,f,c
  3669  00209C  EC44  F019         	call	___awdiv	;wreg free
  3670  0020A0  0E09               	movlw	9
  3671  0020A2  2419               	addwf	?___awdiv,w,c
  3672  0020A4  6E21               	movwf	___wmul@multiplier,c
  3673  0020A6  0E00               	movlw	0
  3674  0020A8  201A               	addwfc	?___awdiv+1,w,c
  3675  0020AA  6E22               	movwf	___wmul@multiplier+1,c
  3676  0020AC  0E00               	movlw	0
  3677  0020AE  6E24               	movwf	___wmul@multiplicand+1,c
  3678  0020B0  0E03               	movlw	3
  3679  0020B2  6E23               	movwf	___wmul@multiplicand,c
  3680  0020B4  ECBB  F01B         	call	___wmul	;wreg free
  3681  0020B8  0E50               	movlw	low __powers_
  3682  0020BA  2421               	addwf	?___wmul,w,c
  3683  0020BC  6EF6               	movwf	tblptrl,c
  3684  0020BE  0E10               	movlw	high __powers_
  3685  0020C0  2022               	addwfc	?___wmul+1,w,c
  3686  0020C2  6EF7               	movwf	tblptrh,c
  3687  0020C4                     	if	1	;There are 3 active tblptr bytes
  3688  0020C4  6AF8               	clrf	tblptru,c
  3689  0020C6  0E00               	movlw	low (__mediumconst shr (0+16))
  3690  0020C8  22F8               	addwfc	tblptru,f,c
  3691  0020CA                     	endif
  3692  0020CA  0009               	tblrd		*+
  3693  0020CC  CFF5 F027          	movff	tablat,___ftmul@f1
  3694  0020D0  0009               	tblrd		*+
  3695  0020D2  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3696  0020D6  000A               	tblrd		*-
  3697  0020D8  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3698  0020DC  0E00               	movlw	0
  3699  0020DE  6E24               	movwf	___wmul@multiplicand+1,c
  3700  0020E0  0E03               	movlw	3
  3701  0020E2  6E23               	movwf	___wmul@multiplicand,c
  3702  0020E4  0E00               	movlw	0
  3703  0020E6  6E16               	movwf	___awmod@divisor+1,c
  3704  0020E8  0E0A               	movlw	10
  3705  0020EA  6E15               	movwf	___awmod@divisor,c
  3706  0020EC  0100               	movlb	0	; () banked
  3707  0020EE  5163               	movf	scale@scl& (0+255),w,b
  3708  0020F0  6E13               	movwf	___awmod@dividend,c
  3709  0020F2  6A14               	clrf	___awmod@dividend+1,c
  3710  0020F4  BE13               	btfsc	___awmod@dividend,7,c
  3711  0020F6  0614               	decf	___awmod@dividend+1,f,c
  3712  0020F8  EC40  F01A         	call	___awmod	;wreg free
  3713  0020FC  C013  F021         	movff	?___awmod,___wmul@multiplier
  3714  002100  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3715  002104  ECBB  F01B         	call	___wmul	;wreg free
  3716  002108  0E50               	movlw	low __powers_
  3717  00210A  2421               	addwf	?___wmul,w,c
  3718  00210C  6EF6               	movwf	tblptrl,c
  3719  00210E  0E10               	movlw	high __powers_
  3720  002110  2022               	addwfc	?___wmul+1,w,c
  3721  002112  6EF7               	movwf	tblptrh,c
  3722  002114                     	if	1	;There are 3 active tblptr bytes
  3723  002114  6AF8               	clrf	tblptru,c
  3724  002116  0E00               	movlw	low (__mediumconst shr (0+16))
  3725  002118  22F8               	addwfc	tblptru,f,c
  3726  00211A                     	endif
  3727  00211A  0009               	tblrd		*+
  3728  00211C  CFF5 F02A          	movff	tablat,___ftmul@f2
  3729  002120  0009               	tblrd		*+
  3730  002122  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3731  002126  000A               	tblrd		*-
  3732  002128  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3733  00212C  ECE7  F016         	call	___ftmul	;wreg free
  3734  002130  D79E               	goto	L4
  3735  002132                     l4366:
  3736                           
  3737                           ;doprnt.c: 440: return _powers_[scl];
  3738  002132  0100               	movlb	0	; () banked
  3739  002134  5163               	movf	scale@scl& (0+255),w,b
  3740  002136  0D03               	mullw	3
  3741  002138  0E50               	movlw	low __powers_
  3742  00213A  24F3               	addwf	prodl,w,c
  3743  00213C  6EF6               	movwf	tblptrl,c
  3744  00213E  0E10               	movlw	high __powers_
  3745  002140  20F4               	addwfc	prodh,w,c
  3746  002142  6EF7               	movwf	tblptrh,c
  3747  002144                     	if	1	;There are 3 active tblptr bytes
  3748  002144  6AF8               	clrf	tblptru,c
  3749  002146  0E00               	movlw	low (__mediumconst shr (0+16))
  3750  002148  22F8               	addwfc	tblptru,f,c
  3751  00214A                     	endif
  3752  00214A  0009               	tblrd		*+
  3753  00214C  CFF5 F036          	movff	tablat,?_scale
  3754  002150  0009               	tblrd		*+
  3755  002152  CFF5 F037          	movff	tablat,?_scale+1
  3756  002156  000A               	tblrd		*-
  3757  002158  CFF5 F038          	movff	tablat,?_scale+2
  3758  00215C  0012               	return	
  3759  00215E                     __end_of_scale:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           postinc0	equ	0xFEE
  3769                           wreg	equ	0xFE8
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _isdigit *****************
  3778 ;; Defined at:
  3779 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  c               1    wreg     unsigned char 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  c               1   20[COMRAM] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;		None               void
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;Total ram usage:        3 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    4
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_sprintf
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text3
  3808  0037E4                     __ptext3:
  3809                           	opt stack 0
  3810  0037E4                     _isdigit:
  3811                           	opt stack 25
  3812                           
  3813                           ;incstack = 0
  3814                           ;isdigit@c stored from wreg
  3815  0037E4  6E15               	movwf	isdigit@c,c
  3816  0037E6  0E00               	movlw	0
  3817  0037E8  6E14               	movwf	_isdigit$1890,c
  3818  0037EA  0E3A               	movlw	58
  3819  0037EC  6015               	cpfslt	isdigit@c,c
  3820  0037EE  D005               	goto	l3070
  3821  0037F0  0E2F               	movlw	47
  3822  0037F2  6415               	cpfsgt	isdigit@c,c
  3823  0037F4  D002               	goto	l3070
  3824  0037F6  0E01               	movlw	1
  3825  0037F8  6E14               	movwf	_isdigit$1890,c
  3826  0037FA                     l3070:
  3827  0037FA  C014  F013         	movff	_isdigit$1890,??_isdigit
  3828  0037FE  3013               	rrcf	??_isdigit,w,c
  3829  003800  0012               	return	
  3830  003802                     __end_of_isdigit:
  3831                           	opt stack 0
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           postinc0	equ	0xFEE
  3840                           wreg	equ	0xFE8
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _fround *****************
  3849 ;; Defined at:
  3850 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  prec            1    wreg     unsigned char 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  prec            1    6[BANK0 ] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  3   53[COMRAM] unsigned char 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3864 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Totals:         3       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;Total ram usage:       10 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    6
  3871 ;; This function calls:
  3872 ;;		___awdiv
  3873 ;;		___awmod
  3874 ;;		___ftmul
  3875 ;;		___wmul
  3876 ;; This function is called by:
  3877 ;;		_sprintf
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text4
  3882  00215E                     __ptext4:
  3883                           	opt stack 0
  3884  00215E                     _fround:
  3885                           	opt stack 23
  3886                           
  3887                           ;incstack = 0
  3888                           ;fround@prec stored from wreg
  3889  00215E  0100               	movlb	0	; () banked
  3890  002160  6F66               	movwf	fround@prec& (0+255),b
  3891                           
  3892                           ;doprnt.c: 413: if(prec>=110)
  3893  002162  0E6D               	movlw	109
  3894  002164  0100               	movlb	0	; () banked
  3895  002166  6566               	cpfsgt	fround@prec& (0+255),b
  3896  002168  D0A8               	goto	l4320
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3900  00216A  0E00               	movlw	0
  3901  00216C  6E24               	movwf	___wmul@multiplicand+1,c
  3902  00216E  0E03               	movlw	3
  3903  002170  6E23               	movwf	___wmul@multiplicand,c
  3904  002172  0E00               	movlw	0
  3905  002174  6E1C               	movwf	___awdiv@divisor+1,c
  3906  002176  0E0A               	movlw	10
  3907  002178  6E1B               	movwf	___awdiv@divisor,c
  3908  00217A  0E00               	movlw	0
  3909  00217C  6E16               	movwf	___awmod@divisor+1,c
  3910  00217E  0E64               	movlw	100
  3911  002180  6E15               	movwf	___awmod@divisor,c
  3912  002182  C066  F013         	movff	fround@prec,___awmod@dividend
  3913  002186  6A14               	clrf	___awmod@dividend+1,c
  3914  002188  EC40  F01A         	call	___awmod	;wreg free
  3915  00218C  C013  F019         	movff	?___awmod,___awdiv@dividend
  3916  002190  C014  F01A         	movff	?___awmod+1,___awdiv@dividend+1
  3917  002194  EC44  F019         	call	___awdiv	;wreg free
  3918  002198  0E09               	movlw	9
  3919  00219A  2419               	addwf	?___awdiv,w,c
  3920  00219C  6E21               	movwf	___wmul@multiplier,c
  3921  00219E  0E00               	movlw	0
  3922  0021A0  201A               	addwfc	?___awdiv+1,w,c
  3923  0021A2  6E22               	movwf	___wmul@multiplier+1,c
  3924  0021A4  ECBB  F01B         	call	___wmul	;wreg free
  3925  0021A8  0E29               	movlw	low __npowers_
  3926  0021AA  2421               	addwf	?___wmul,w,c
  3927  0021AC  6EF6               	movwf	tblptrl,c
  3928  0021AE  0E10               	movlw	high __npowers_
  3929  0021B0  2022               	addwfc	?___wmul+1,w,c
  3930  0021B2  6EF7               	movwf	tblptrh,c
  3931  0021B4                     	if	1	;There are 3 active tblptr bytes
  3932  0021B4  6AF8               	clrf	tblptru,c
  3933  0021B6  0E00               	movlw	low (__mediumconst shr (0+16))
  3934  0021B8  22F8               	addwfc	tblptru,f,c
  3935  0021BA                     	endif
  3936  0021BA  0009               	tblrd		*+
  3937  0021BC  CFF5 F02A          	movff	tablat,___ftmul@f2
  3938  0021C0  0009               	tblrd		*+
  3939  0021C2  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  3940  0021C6  000A               	tblrd		*-
  3941  0021C8  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  3942  0021CC  0E00               	movlw	0
  3943  0021CE  6E1C               	movwf	___awdiv@divisor+1,c
  3944  0021D0  0E64               	movlw	100
  3945  0021D2  6E1B               	movwf	___awdiv@divisor,c
  3946  0021D4  C066  F019         	movff	fround@prec,___awdiv@dividend
  3947  0021D8  6A1A               	clrf	___awdiv@dividend+1,c
  3948  0021DA  EC44  F019         	call	___awdiv	;wreg free
  3949  0021DE  0E12               	movlw	18
  3950  0021E0  2419               	addwf	?___awdiv,w,c
  3951  0021E2  6E21               	movwf	___wmul@multiplier,c
  3952  0021E4  0E00               	movlw	0
  3953  0021E6  201A               	addwfc	?___awdiv+1,w,c
  3954  0021E8  6E22               	movwf	___wmul@multiplier+1,c
  3955  0021EA  0E00               	movlw	0
  3956  0021EC  6E24               	movwf	___wmul@multiplicand+1,c
  3957  0021EE  0E03               	movlw	3
  3958  0021F0  6E23               	movwf	___wmul@multiplicand,c
  3959  0021F2  ECBB  F01B         	call	___wmul	;wreg free
  3960  0021F6  0E29               	movlw	low __npowers_
  3961  0021F8  2421               	addwf	?___wmul,w,c
  3962  0021FA  6EF6               	movwf	tblptrl,c
  3963  0021FC  0E10               	movlw	high __npowers_
  3964  0021FE  2022               	addwfc	?___wmul+1,w,c
  3965  002200  6EF7               	movwf	tblptrh,c
  3966  002202                     	if	1	;There are 3 active tblptr bytes
  3967  002202  6AF8               	clrf	tblptru,c
  3968  002204  0E00               	movlw	low (__mediumconst shr (0+16))
  3969  002206  22F8               	addwfc	tblptru,f,c
  3970  002208                     	endif
  3971  002208  0009               	tblrd		*+
  3972  00220A  CFF5 F027          	movff	tablat,___ftmul@f1
  3973  00220E  0009               	tblrd		*+
  3974  002210  CFF5 F028          	movff	tablat,___ftmul@f1+1
  3975  002214  000A               	tblrd		*-
  3976  002216  CFF5 F029          	movff	tablat,___ftmul@f1+2
  3977  00221A  ECE7  F016         	call	___ftmul	;wreg free
  3978  00221E  C027  F063         	movff	?___ftmul,_fround$2345
  3979  002222  C028  F064         	movff	?___ftmul+1,_fround$2345+1
  3980  002226  C029  F065         	movff	?___ftmul+2,_fround$2345+2
  3981                           
  3982                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3983  00222A  0E00               	movlw	0
  3984  00222C  6E24               	movwf	___wmul@multiplicand+1,c
  3985  00222E  0E03               	movlw	3
  3986  002230  6E23               	movwf	___wmul@multiplicand,c
  3987  002232  0E00               	movlw	0
  3988  002234  6E16               	movwf	___awmod@divisor+1,c
  3989  002236  0E0A               	movlw	10
  3990  002238  6E15               	movwf	___awmod@divisor,c
  3991  00223A  C066  F013         	movff	fround@prec,___awmod@dividend
  3992  00223E  6A14               	clrf	___awmod@dividend+1,c
  3993  002240  EC40  F01A         	call	___awmod	;wreg free
  3994  002244  C013  F021         	movff	?___awmod,___wmul@multiplier
  3995  002248  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  3996  00224C  ECBB  F01B         	call	___wmul	;wreg free
  3997  002250  0E29               	movlw	low __npowers_
  3998  002252  2421               	addwf	?___wmul,w,c
  3999  002254  6EF6               	movwf	tblptrl,c
  4000  002256  0E10               	movlw	high __npowers_
  4001  002258  2022               	addwfc	?___wmul+1,w,c
  4002  00225A  6EF7               	movwf	tblptrh,c
  4003  00225C                     	if	1	;There are 3 active tblptr bytes
  4004  00225C  6AF8               	clrf	tblptru,c
  4005  00225E  0E00               	movlw	low (__mediumconst shr (0+16))
  4006  002260  22F8               	addwfc	tblptru,f,c
  4007  002262                     	endif
  4008  002262  0009               	tblrd		*+
  4009  002264  CFF5 F02A          	movff	tablat,___ftmul@f2
  4010  002268  0009               	tblrd		*+
  4011  00226A  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4012  00226E  000A               	tblrd		*-
  4013  002270  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4014  002274  C063  F027         	movff	_fround$2345,___ftmul@f1
  4015  002278  C064  F028         	movff	_fround$2345+1,___ftmul@f1+1
  4016  00227C  C065  F029         	movff	_fround$2345+2,___ftmul@f1+2
  4017  002280  ECE7  F016         	call	___ftmul	;wreg free
  4018  002284  C027  F060         	movff	?___ftmul,_fround$2346
  4019  002288  C028  F061         	movff	?___ftmul+1,_fround$2346+1
  4020  00228C  C029  F062         	movff	?___ftmul+2,_fround$2346+2
  4021                           
  4022                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4023  002290  C060  F027         	movff	_fround$2346,___ftmul@f1
  4024  002294  C061  F028         	movff	_fround$2346+1,___ftmul@f1+1
  4025  002298  C062  F029         	movff	_fround$2346+2,___ftmul@f1+2
  4026  00229C  0E00               	movlw	0
  4027  00229E  6E2A               	movwf	___ftmul@f2,c
  4028  0022A0  0E00               	movlw	0
  4029  0022A2  6E2B               	movwf	___ftmul@f2+1,c
  4030  0022A4  0E3F               	movlw	63
  4031  0022A6  6E2C               	movwf	___ftmul@f2+2,c
  4032  0022A8  ECE7  F016         	call	___ftmul	;wreg free
  4033  0022AC  C027  F036         	movff	?___ftmul,?_fround
  4034  0022B0  C028  F037         	movff	?___ftmul+1,?_fround+1
  4035  0022B4  C029  F038         	movff	?___ftmul+2,?_fround+2
  4036  0022B8  0012               	return	
  4037  0022BA                     l4320:
  4038                           
  4039                           ;doprnt.c: 415: else if(prec > 10)
  4040  0022BA  0E0A               	movlw	10
  4041  0022BC  0100               	movlb	0	; () banked
  4042  0022BE  6566               	cpfsgt	fround@prec& (0+255),b
  4043  0022C0  D063               	goto	l4328
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4047  0022C2  0E00               	movlw	0
  4048  0022C4  6E24               	movwf	___wmul@multiplicand+1,c
  4049  0022C6  0E03               	movlw	3
  4050  0022C8  6E23               	movwf	___wmul@multiplicand,c
  4051  0022CA  0E00               	movlw	0
  4052  0022CC  6E16               	movwf	___awmod@divisor+1,c
  4053  0022CE  0E0A               	movlw	10
  4054  0022D0  6E15               	movwf	___awmod@divisor,c
  4055  0022D2  C066  F013         	movff	fround@prec,___awmod@dividend
  4056  0022D6  6A14               	clrf	___awmod@dividend+1,c
  4057  0022D8  EC40  F01A         	call	___awmod	;wreg free
  4058  0022DC  C013  F021         	movff	?___awmod,___wmul@multiplier
  4059  0022E0  C014  F022         	movff	?___awmod+1,___wmul@multiplier+1
  4060  0022E4  ECBB  F01B         	call	___wmul	;wreg free
  4061  0022E8  0E29               	movlw	low __npowers_
  4062  0022EA  2421               	addwf	?___wmul,w,c
  4063  0022EC  6EF6               	movwf	tblptrl,c
  4064  0022EE  0E10               	movlw	high __npowers_
  4065  0022F0  2022               	addwfc	?___wmul+1,w,c
  4066  0022F2  6EF7               	movwf	tblptrh,c
  4067  0022F4                     	if	1	;There are 3 active tblptr bytes
  4068  0022F4  6AF8               	clrf	tblptru,c
  4069  0022F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4070  0022F8  22F8               	addwfc	tblptru,f,c
  4071  0022FA                     	endif
  4072  0022FA  0009               	tblrd		*+
  4073  0022FC  CFF5 F02A          	movff	tablat,___ftmul@f2
  4074  002300  0009               	tblrd		*+
  4075  002302  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  4076  002306  000A               	tblrd		*-
  4077  002308  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  4078  00230C  0E00               	movlw	0
  4079  00230E  6E1C               	movwf	___awdiv@divisor+1,c
  4080  002310  0E0A               	movlw	10
  4081  002312  6E1B               	movwf	___awdiv@divisor,c
  4082  002314  C066  F019         	movff	fround@prec,___awdiv@dividend
  4083  002318  6A1A               	clrf	___awdiv@dividend+1,c
  4084  00231A  EC44  F019         	call	___awdiv	;wreg free
  4085  00231E  0E09               	movlw	9
  4086  002320  2419               	addwf	?___awdiv,w,c
  4087  002322  6E21               	movwf	___wmul@multiplier,c
  4088  002324  0E00               	movlw	0
  4089  002326  201A               	addwfc	?___awdiv+1,w,c
  4090  002328  6E22               	movwf	___wmul@multiplier+1,c
  4091  00232A  0E00               	movlw	0
  4092  00232C  6E24               	movwf	___wmul@multiplicand+1,c
  4093  00232E  0E03               	movlw	3
  4094  002330  6E23               	movwf	___wmul@multiplicand,c
  4095  002332  ECBB  F01B         	call	___wmul	;wreg free
  4096  002336  0E29               	movlw	low __npowers_
  4097  002338  2421               	addwf	?___wmul,w,c
  4098  00233A  6EF6               	movwf	tblptrl,c
  4099  00233C  0E10               	movlw	high __npowers_
  4100  00233E  2022               	addwfc	?___wmul+1,w,c
  4101  002340  6EF7               	movwf	tblptrh,c
  4102  002342                     	if	1	;There are 3 active tblptr bytes
  4103  002342  6AF8               	clrf	tblptru,c
  4104  002344  0E00               	movlw	low (__mediumconst shr (0+16))
  4105  002346  22F8               	addwfc	tblptru,f,c
  4106  002348                     	endif
  4107  002348  0009               	tblrd		*+
  4108  00234A  CFF5 F027          	movff	tablat,___ftmul@f1
  4109  00234E  0009               	tblrd		*+
  4110  002350  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4111  002354  000A               	tblrd		*-
  4112  002356  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4113  00235A  ECE7  F016         	call	___ftmul	;wreg free
  4114  00235E  C027  F063         	movff	?___ftmul,_fround$2345
  4115  002362  C028  F064         	movff	?___ftmul+1,_fround$2345+1
  4116  002366  C029  F065         	movff	?___ftmul+2,_fround$2345+2
  4117                           
  4118                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4119  00236A  C063  F027         	movff	_fround$2345,___ftmul@f1
  4120  00236E  C064  F028         	movff	_fround$2345+1,___ftmul@f1+1
  4121  002372  C065  F029         	movff	_fround$2345+2,___ftmul@f1+2
  4122  002376  0E00               	movlw	0
  4123  002378  6E2A               	movwf	___ftmul@f2,c
  4124  00237A  0E00               	movlw	0
  4125  00237C  6E2B               	movwf	___ftmul@f2+1,c
  4126  00237E  0E3F               	movlw	63
  4127  002380  6E2C               	movwf	___ftmul@f2+2,c
  4128  002382  ECE7  F016         	call	___ftmul	;wreg free
  4129  002386  D792               	goto	L5
  4130  002388                     l4328:
  4131                           
  4132                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4133  002388  0100               	movlb	0	; () banked
  4134  00238A  5166               	movf	fround@prec& (0+255),w,b
  4135  00238C  0D03               	mullw	3
  4136  00238E  0E29               	movlw	low __npowers_
  4137  002390  24F3               	addwf	prodl,w,c
  4138  002392  6EF6               	movwf	tblptrl,c
  4139  002394  0E10               	movlw	high __npowers_
  4140  002396  20F4               	addwfc	prodh,w,c
  4141  002398  6EF7               	movwf	tblptrh,c
  4142  00239A                     	if	1	;There are 3 active tblptr bytes
  4143  00239A  6AF8               	clrf	tblptru,c
  4144  00239C  0E00               	movlw	low (__mediumconst shr (0+16))
  4145  00239E  22F8               	addwfc	tblptru,f,c
  4146  0023A0                     	endif
  4147  0023A0  0009               	tblrd		*+
  4148  0023A2  CFF5 F027          	movff	tablat,___ftmul@f1
  4149  0023A6  0009               	tblrd		*+
  4150  0023A8  CFF5 F028          	movff	tablat,___ftmul@f1+1
  4151  0023AC  000A               	tblrd		*-
  4152  0023AE  CFF5 F029          	movff	tablat,___ftmul@f1+2
  4153  0023B2  0E00               	movlw	0
  4154  0023B4  6E2A               	movwf	___ftmul@f2,c
  4155  0023B6  0E00               	movlw	0
  4156  0023B8  6E2B               	movwf	___ftmul@f2+1,c
  4157  0023BA  0E3F               	movlw	63
  4158  0023BC  6E2C               	movwf	___ftmul@f2+2,c
  4159  0023BE  ECE7  F016         	call	___ftmul	;wreg free
  4160  0023C2  C027  F036         	movff	?___ftmul,?_fround
  4161  0023C6  C028  F037         	movff	?___ftmul+1,?_fround+1
  4162  0023CA  C029  F038         	movff	?___ftmul+2,?_fround+2
  4163  0023CE  0012               	return	
  4164  0023D0                     __end_of_fround:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           postdec2	equ	0xFDD
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function ___wmul *****************
  4183 ;; Defined at:
  4184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  multiplier      2   32[COMRAM] unsigned int 
  4187 ;;  multiplicand    2   34[COMRAM] unsigned int 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  product         2   36[COMRAM] unsigned int 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  2   32[COMRAM] unsigned int 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0, prodl, prodh
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;Total ram usage:        6 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    4
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_fround
  4210 ;;		_scale
  4211 ;;		_sprintf
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text5
  4216  003776                     __ptext5:
  4217                           	opt stack 0
  4218  003776                     ___wmul:
  4219                           	opt stack 24
  4220                           
  4221                           ;incstack = 0
  4222  003776  5021               	movf	___wmul@multiplier,w,c
  4223  003778  0223               	mulwf	___wmul@multiplicand,c
  4224  00377A  CFF3 F025          	movff	prodl,___wmul@product
  4225  00377E  CFF4 F026          	movff	prodh,___wmul@product+1
  4226  003782  5021               	movf	___wmul@multiplier,w,c
  4227  003784  0224               	mulwf	___wmul@multiplicand+1,c
  4228  003786  50F3               	movf	prodl,w,c
  4229  003788  2626               	addwf	___wmul@product+1,f,c
  4230  00378A  5022               	movf	___wmul@multiplier+1,w,c
  4231  00378C  0223               	mulwf	___wmul@multiplicand,c
  4232  00378E  50F3               	movf	prodl,w,c
  4233  003790  2626               	addwf	___wmul@product+1,f,c
  4234  003792  C025  F021         	movff	___wmul@product,?___wmul
  4235  003796  C026  F022         	movff	___wmul@product+1,?___wmul+1
  4236  00379A  0012               	return	
  4237  00379C                     __end_of___wmul:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function ___ftmul *****************
  4256 ;; Defined at:
  4257 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  f1              3   38[COMRAM] float 
  4260 ;;  f2              3   41[COMRAM] float 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  4263 ;;  sign            1   52[COMRAM] unsigned char 
  4264 ;;  cntr            1   51[COMRAM] unsigned char 
  4265 ;;  exp             1   47[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  3   38[COMRAM] float 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0, cstack
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4275 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;Total ram usage:       15 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; Hardware stack levels required when called:    5
  4282 ;; This function calls:
  4283 ;;		___ftpack
  4284 ;; This function is called by:
  4285 ;;		_main
  4286 ;;		_fround
  4287 ;;		_scale
  4288 ;;		_sprintf
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text6
  4293  002DCE                     __ptext6:
  4294                           	opt stack 0
  4295  002DCE                     ___ftmul:
  4296                           	opt stack 23
  4297                           
  4298                           ;incstack = 0
  4299  002DCE  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  4300  002DD2  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  4301  002DD4  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  4302  002DD6  3428               	rlcf	___ftmul@f1+1,w,c
  4303  002DD8  362D               	rlcf	??___ftmul& (0+255),f,c
  4304  002DDA  E301               	bnc	u4921
  4305  002DDC  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  4306  002DDE                     u4921:
  4307  002DDE  502D               	movf	??___ftmul,w,c
  4308  002DE0  6E30               	movwf	___ftmul@exp,c
  4309  002DE2  5030               	movf	___ftmul@exp,w,c
  4310  002DE4  A4D8               	btfss	status,2,c
  4311  002DE6  D007               	goto	l4188
  4312  002DE8  0E00               	movlw	0
  4313  002DEA  6E27               	movwf	?___ftmul,c
  4314  002DEC  0E00               	movlw	0
  4315  002DEE  6E28               	movwf	?___ftmul+1,c
  4316  002DF0  0E00               	movlw	0
  4317  002DF2  6E29               	movwf	?___ftmul+2,c
  4318  002DF4  0012               	return	
  4319  002DF6                     l4188:
  4320  002DF6  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  4321  002DFA  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  4322  002DFC  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  4323  002DFE  342B               	rlcf	___ftmul@f2+1,w,c
  4324  002E00  362D               	rlcf	??___ftmul& (0+255),f,c
  4325  002E02  E301               	bnc	u4941
  4326  002E04  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  4327  002E06                     u4941:
  4328  002E06  502D               	movf	??___ftmul,w,c
  4329  002E08  6E35               	movwf	___ftmul@sign,c
  4330  002E0A  5035               	movf	___ftmul@sign,w,c
  4331  002E0C  A4D8               	btfss	status,2,c
  4332  002E0E  D007               	goto	l4194
  4333  002E10  0E00               	movlw	0
  4334  002E12  6E27               	movwf	?___ftmul,c
  4335  002E14  0E00               	movlw	0
  4336  002E16  6E28               	movwf	?___ftmul+1,c
  4337  002E18  0E00               	movlw	0
  4338  002E1A  6E29               	movwf	?___ftmul+2,c
  4339  002E1C  0012               	return	
  4340  002E1E                     l4194:
  4341  002E1E  5035               	movf	___ftmul@sign,w,c
  4342  002E20  0F7B               	addlw	123
  4343  002E22  2630               	addwf	___ftmul@exp,f,c
  4344  002E24  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  4345  002E28  502C               	movf	___ftmul@f2+2,w,c
  4346  002E2A  1A35               	xorwf	___ftmul@sign,f,c
  4347  002E2C  0E80               	movlw	128
  4348  002E2E  1635               	andwf	___ftmul@sign,f,c
  4349  002E30  8E28               	bsf	___ftmul@f1+1,7,c
  4350  002E32  8E2B               	bsf	___ftmul@f2+1,7,c
  4351  002E34  0EFF               	movlw	255
  4352  002E36  162A               	andwf	___ftmul@f2,f,c
  4353  002E38  0EFF               	movlw	255
  4354  002E3A  162B               	andwf	___ftmul@f2+1,f,c
  4355  002E3C  0E00               	movlw	0
  4356  002E3E  162C               	andwf	___ftmul@f2+2,f,c
  4357  002E40  0E00               	movlw	0
  4358  002E42  6E31               	movwf	___ftmul@f3_as_product,c
  4359  002E44  0E00               	movlw	0
  4360  002E46  6E32               	movwf	___ftmul@f3_as_product+1,c
  4361  002E48  0E00               	movlw	0
  4362  002E4A  6E33               	movwf	___ftmul@f3_as_product+2,c
  4363  002E4C  0E07               	movlw	7
  4364  002E4E  6E34               	movwf	___ftmul@cntr,c
  4365  002E50                     l4208:
  4366  002E50  A027               	btfss	___ftmul@f1,0,c
  4367  002E52  D006               	goto	l4212
  4368  002E54  502A               	movf	___ftmul@f2,w,c
  4369  002E56  2631               	addwf	___ftmul@f3_as_product,f,c
  4370  002E58  502B               	movf	___ftmul@f2+1,w,c
  4371  002E5A  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  4372  002E5C  502C               	movf	___ftmul@f2+2,w,c
  4373  002E5E  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  4374  002E60                     l4212:
  4375  002E60  90D8               	bcf	status,0,c
  4376  002E62  3229               	rrcf	___ftmul@f1+2,f,c
  4377  002E64  3228               	rrcf	___ftmul@f1+1,f,c
  4378  002E66  3227               	rrcf	___ftmul@f1,f,c
  4379  002E68  90D8               	bcf	status,0,c
  4380  002E6A  362A               	rlcf	___ftmul@f2,f,c
  4381  002E6C  362B               	rlcf	___ftmul@f2+1,f,c
  4382  002E6E  362C               	rlcf	___ftmul@f2+2,f,c
  4383  002E70  2E34               	decfsz	___ftmul@cntr,f,c
  4384  002E72  D7EE               	goto	l4208
  4385  002E74  0E09               	movlw	9
  4386  002E76  6E34               	movwf	___ftmul@cntr,c
  4387  002E78                     l4218:
  4388  002E78  A027               	btfss	___ftmul@f1,0,c
  4389  002E7A  D006               	goto	l4222
  4390  002E7C  502A               	movf	___ftmul@f2,w,c
  4391  002E7E  2631               	addwf	___ftmul@f3_as_product,f,c
  4392  002E80  502B               	movf	___ftmul@f2+1,w,c
  4393  002E82  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  4394  002E84  502C               	movf	___ftmul@f2+2,w,c
  4395  002E86  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  4396  002E88                     l4222:
  4397  002E88  90D8               	bcf	status,0,c
  4398  002E8A  3229               	rrcf	___ftmul@f1+2,f,c
  4399  002E8C  3228               	rrcf	___ftmul@f1+1,f,c
  4400  002E8E  3227               	rrcf	___ftmul@f1,f,c
  4401  002E90  90D8               	bcf	status,0,c
  4402  002E92  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  4403  002E94  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  4404  002E96  3231               	rrcf	___ftmul@f3_as_product,f,c
  4405  002E98  2E34               	decfsz	___ftmul@cntr,f,c
  4406  002E9A  D7EE               	goto	l4218
  4407  002E9C  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  4408  002EA0  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4409  002EA4  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4410  002EA8  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  4411  002EAC  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  4412  002EB0  EC17  F018         	call	___ftpack	;wreg free
  4413  002EB4  C013  F027         	movff	?___ftpack,?___ftmul
  4414  002EB8  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  4415  002EBC  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  4416  002EC0  0012               	return	
  4417  002EC2                     __end_of___ftmul:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           indf2	equ	0xFDF
  4429                           postinc2	equ	0xFDE
  4430                           postdec2	equ	0xFDD
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function ___awmod *****************
  4436 ;; Defined at:
  4437 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  dividend        2   18[COMRAM] int 
  4440 ;;  divisor         2   20[COMRAM] int 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  sign            1   23[COMRAM] unsigned char 
  4443 ;;  counter         1   22[COMRAM] unsigned char 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  2   18[COMRAM] int 
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;Total ram usage:        6 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    4
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_fround
  4464 ;;		_scale
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text7
  4469  003480                     __ptext7:
  4470                           	opt stack 0
  4471  003480                     ___awmod:
  4472                           	opt stack 24
  4473                           
  4474                           ;incstack = 0
  4475  003480  0E00               	movlw	0
  4476  003482  6E18               	movwf	___awmod@sign,c
  4477  003484  AE14               	btfss	___awmod@dividend+1,7,c
  4478  003486  D006               	goto	l4282
  4479  003488  6C13               	negf	___awmod@dividend,c
  4480  00348A  1E14               	comf	___awmod@dividend+1,f,c
  4481  00348C  B0D8               	btfsc	status,0,c
  4482  00348E  2A14               	incf	___awmod@dividend+1,f,c
  4483  003490  0E01               	movlw	1
  4484  003492  6E18               	movwf	___awmod@sign,c
  4485  003494                     l4282:
  4486  003494  AE16               	btfss	___awmod@divisor+1,7,c
  4487  003496  D004               	goto	l4286
  4488  003498  6C15               	negf	___awmod@divisor,c
  4489  00349A  1E16               	comf	___awmod@divisor+1,f,c
  4490  00349C  B0D8               	btfsc	status,0,c
  4491  00349E  2A16               	incf	___awmod@divisor+1,f,c
  4492  0034A0                     l4286:
  4493  0034A0  5015               	movf	___awmod@divisor,w,c
  4494  0034A2  1016               	iorwf	___awmod@divisor+1,w,c
  4495  0034A4  B4D8               	btfsc	status,2,c
  4496  0034A6  D018               	goto	l4302
  4497  0034A8  0E01               	movlw	1
  4498  0034AA  6E17               	movwf	___awmod@counter,c
  4499  0034AC  D004               	goto	l4292
  4500  0034AE                     l4290:
  4501  0034AE  90D8               	bcf	status,0,c
  4502  0034B0  3615               	rlcf	___awmod@divisor,f,c
  4503  0034B2  3616               	rlcf	___awmod@divisor+1,f,c
  4504  0034B4  2A17               	incf	___awmod@counter,f,c
  4505  0034B6                     l4292:
  4506  0034B6  AE16               	btfss	___awmod@divisor+1,7,c
  4507  0034B8  D7FA               	goto	l4290
  4508  0034BA                     l4294:
  4509  0034BA  5015               	movf	___awmod@divisor,w,c
  4510  0034BC  5C13               	subwf	___awmod@dividend,w,c
  4511  0034BE  5016               	movf	___awmod@divisor+1,w,c
  4512  0034C0  5814               	subwfb	___awmod@dividend+1,w,c
  4513  0034C2  A0D8               	btfss	status,0,c
  4514  0034C4  D004               	goto	l4298
  4515  0034C6  5015               	movf	___awmod@divisor,w,c
  4516  0034C8  5E13               	subwf	___awmod@dividend,f,c
  4517  0034CA  5016               	movf	___awmod@divisor+1,w,c
  4518  0034CC  5A14               	subwfb	___awmod@dividend+1,f,c
  4519  0034CE                     l4298:
  4520  0034CE  90D8               	bcf	status,0,c
  4521  0034D0  3216               	rrcf	___awmod@divisor+1,f,c
  4522  0034D2  3215               	rrcf	___awmod@divisor,f,c
  4523  0034D4  2E17               	decfsz	___awmod@counter,f,c
  4524  0034D6  D7F1               	goto	l4294
  4525  0034D8                     l4302:
  4526  0034D8  5018               	movf	___awmod@sign,w,c
  4527  0034DA  B4D8               	btfsc	status,2,c
  4528  0034DC  D004               	goto	l4306
  4529  0034DE  6C13               	negf	___awmod@dividend,c
  4530  0034E0  1E14               	comf	___awmod@dividend+1,f,c
  4531  0034E2  B0D8               	btfsc	status,0,c
  4532  0034E4  2A14               	incf	___awmod@dividend+1,f,c
  4533  0034E6                     l4306:
  4534  0034E6  C013  F013         	movff	___awmod@dividend,?___awmod
  4535  0034EA  C014  F014         	movff	___awmod@dividend+1,?___awmod+1
  4536  0034EE  0012               	return	
  4537  0034F0                     __end_of___awmod:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           indf2	equ	0xFDF
  4549                           postinc2	equ	0xFDE
  4550                           postdec2	equ	0xFDD
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function ___awdiv *****************
  4556 ;; Defined at:
  4557 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  dividend        2   24[COMRAM] int 
  4560 ;;  divisor         2   26[COMRAM] int 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  quotient        2   30[COMRAM] int 
  4563 ;;  sign            1   29[COMRAM] unsigned char 
  4564 ;;  counter         1   28[COMRAM] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  2   24[COMRAM] int 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/0
  4571 ;;		On exit  : 0/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4574 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;Total ram usage:        8 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    4
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_fround
  4585 ;;		_scale
  4586 ;;		_sprintf
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	text8
  4591  003288                     __ptext8:
  4592                           	opt stack 0
  4593  003288                     ___awdiv:
  4594                           	opt stack 24
  4595                           
  4596                           ;incstack = 0
  4597  003288  0E00               	movlw	0
  4598  00328A  6E1E               	movwf	___awdiv@sign,c
  4599  00328C  AE1C               	btfss	___awdiv@divisor+1,7,c
  4600  00328E  D006               	goto	l4238
  4601  003290  6C1B               	negf	___awdiv@divisor,c
  4602  003292  1E1C               	comf	___awdiv@divisor+1,f,c
  4603  003294  B0D8               	btfsc	status,0,c
  4604  003296  2A1C               	incf	___awdiv@divisor+1,f,c
  4605  003298  0E01               	movlw	1
  4606  00329A  6E1E               	movwf	___awdiv@sign,c
  4607  00329C                     l4238:
  4608  00329C  AE1A               	btfss	___awdiv@dividend+1,7,c
  4609  00329E  D006               	goto	l4244
  4610  0032A0  6C19               	negf	___awdiv@dividend,c
  4611  0032A2  1E1A               	comf	___awdiv@dividend+1,f,c
  4612  0032A4  B0D8               	btfsc	status,0,c
  4613  0032A6  2A1A               	incf	___awdiv@dividend+1,f,c
  4614  0032A8  0E01               	movlw	1
  4615  0032AA  1A1E               	xorwf	___awdiv@sign,f,c
  4616  0032AC                     l4244:
  4617  0032AC  0E00               	movlw	0
  4618  0032AE  6E20               	movwf	___awdiv@quotient+1,c
  4619  0032B0  0E00               	movlw	0
  4620  0032B2  6E1F               	movwf	___awdiv@quotient,c
  4621  0032B4  501B               	movf	___awdiv@divisor,w,c
  4622  0032B6  101C               	iorwf	___awdiv@divisor+1,w,c
  4623  0032B8  B4D8               	btfsc	status,2,c
  4624  0032BA  D01C               	goto	l4266
  4625  0032BC  0E01               	movlw	1
  4626  0032BE  6E1D               	movwf	___awdiv@counter,c
  4627  0032C0  D004               	goto	l4252
  4628  0032C2                     l4250:
  4629  0032C2  90D8               	bcf	status,0,c
  4630  0032C4  361B               	rlcf	___awdiv@divisor,f,c
  4631  0032C6  361C               	rlcf	___awdiv@divisor+1,f,c
  4632  0032C8  2A1D               	incf	___awdiv@counter,f,c
  4633  0032CA                     l4252:
  4634  0032CA  AE1C               	btfss	___awdiv@divisor+1,7,c
  4635  0032CC  D7FA               	goto	l4250
  4636  0032CE                     l4254:
  4637  0032CE  90D8               	bcf	status,0,c
  4638  0032D0  361F               	rlcf	___awdiv@quotient,f,c
  4639  0032D2  3620               	rlcf	___awdiv@quotient+1,f,c
  4640  0032D4  501B               	movf	___awdiv@divisor,w,c
  4641  0032D6  5C19               	subwf	___awdiv@dividend,w,c
  4642  0032D8  501C               	movf	___awdiv@divisor+1,w,c
  4643  0032DA  581A               	subwfb	___awdiv@dividend+1,w,c
  4644  0032DC  A0D8               	btfss	status,0,c
  4645  0032DE  D005               	goto	l4262
  4646  0032E0  501B               	movf	___awdiv@divisor,w,c
  4647  0032E2  5E19               	subwf	___awdiv@dividend,f,c
  4648  0032E4  501C               	movf	___awdiv@divisor+1,w,c
  4649  0032E6  5A1A               	subwfb	___awdiv@dividend+1,f,c
  4650  0032E8  801F               	bsf	___awdiv@quotient,0,c
  4651  0032EA                     l4262:
  4652  0032EA  90D8               	bcf	status,0,c
  4653  0032EC  321C               	rrcf	___awdiv@divisor+1,f,c
  4654  0032EE  321B               	rrcf	___awdiv@divisor,f,c
  4655  0032F0  2E1D               	decfsz	___awdiv@counter,f,c
  4656  0032F2  D7ED               	goto	l4254
  4657  0032F4                     l4266:
  4658  0032F4  501E               	movf	___awdiv@sign,w,c
  4659  0032F6  B4D8               	btfsc	status,2,c
  4660  0032F8  D004               	goto	l4270
  4661  0032FA  6C1F               	negf	___awdiv@quotient,c
  4662  0032FC  1E20               	comf	___awdiv@quotient+1,f,c
  4663  0032FE  B0D8               	btfsc	status,0,c
  4664  003300  2A20               	incf	___awdiv@quotient+1,f,c
  4665  003302                     l4270:
  4666  003302  C01F  F019         	movff	___awdiv@quotient,?___awdiv
  4667  003306  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
  4668  00330A  0012               	return	
  4669  00330C                     __end_of___awdiv:
  4670                           	opt stack 0
  4671                           tblptru	equ	0xFF8
  4672                           tblptrh	equ	0xFF7
  4673                           tblptrl	equ	0xFF6
  4674                           tablat	equ	0xFF5
  4675                           prodh	equ	0xFF4
  4676                           prodl	equ	0xFF3
  4677                           intcon	equ	0xFF2
  4678                           postinc0	equ	0xFEE
  4679                           wreg	equ	0xFE8
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function __tdiv_to_l_ *****************
  4688 ;; Defined at:
  4689 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  f1              3   18[COMRAM] float 
  4692 ;;  f2              3   21[COMRAM] float 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  quot            4   27[COMRAM] unsigned long 
  4695 ;;  exp1            1   32[COMRAM] unsigned char 
  4696 ;;  cntr            1   31[COMRAM] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  4   18[COMRAM] unsigned long 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4706 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;Total ram usage:       15 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    4
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_sprintf
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text9
  4721  00293C                     __ptext9:
  4722                           	opt stack 0
  4723  00293C                     __tdiv_to_l_:
  4724                           	opt stack 25
  4725                           
  4726                           ;incstack = 0
  4727  00293C  C015  F019         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4728  002940  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4729  002942  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4730  002944  3414               	rlcf	__tdiv_to_l_@f1+1,w,c
  4731  002946  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4732  002948  E301               	bnc	u3171
  4733  00294A  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4734  00294C                     u3171:
  4735  00294C  5019               	movf	??__tdiv_to_l_,w,c
  4736  00294E  6E21               	movwf	__tdiv_to_l_@exp1,c
  4737  002950  5021               	movf	__tdiv_to_l_@exp1,w,c
  4738  002952  A4D8               	btfss	status,2,c
  4739  002954  D009               	goto	l3080
  4740  002956  0E00               	movlw	0
  4741  002958  6E13               	movwf	?__tdiv_to_l_,c
  4742  00295A  0E00               	movlw	0
  4743  00295C  6E14               	movwf	?__tdiv_to_l_+1,c
  4744  00295E  0E00               	movlw	0
  4745  002960  6E15               	movwf	?__tdiv_to_l_+2,c
  4746  002962  0E00               	movlw	0
  4747  002964  6E16               	movwf	?__tdiv_to_l_+3,c
  4748  002966  0012               	return	
  4749  002968                     l3080:
  4750  002968  C018  F019         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4751  00296C  6A1A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4752  00296E  6A1B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4753  002970  3417               	rlcf	__tdiv_to_l_@f2+1,w,c
  4754  002972  3619               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4755  002974  E301               	bnc	u3191
  4756  002976  801A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4757  002978                     u3191:
  4758  002978  5019               	movf	??__tdiv_to_l_,w,c
  4759  00297A  6E20               	movwf	__tdiv_to_l_@cntr,c
  4760  00297C  5020               	movf	__tdiv_to_l_@cntr,w,c
  4761  00297E  A4D8               	btfss	status,2,c
  4762  002980  D009               	goto	l3086
  4763  002982  0E00               	movlw	0
  4764  002984  6E13               	movwf	?__tdiv_to_l_,c
  4765  002986  0E00               	movlw	0
  4766  002988  6E14               	movwf	?__tdiv_to_l_+1,c
  4767  00298A  0E00               	movlw	0
  4768  00298C  6E15               	movwf	?__tdiv_to_l_+2,c
  4769  00298E  0E00               	movlw	0
  4770  002990  6E16               	movwf	?__tdiv_to_l_+3,c
  4771  002992  0012               	return	
  4772  002994                     l3086:
  4773  002994  8E14               	bsf	__tdiv_to_l_@f1+1,7,c
  4774  002996  0EFF               	movlw	255
  4775  002998  1613               	andwf	__tdiv_to_l_@f1,f,c
  4776  00299A  0EFF               	movlw	255
  4777  00299C  1614               	andwf	__tdiv_to_l_@f1+1,f,c
  4778  00299E  0E00               	movlw	0
  4779  0029A0  1615               	andwf	__tdiv_to_l_@f1+2,f,c
  4780  0029A2  8E17               	bsf	__tdiv_to_l_@f2+1,7,c
  4781  0029A4  0EFF               	movlw	255
  4782  0029A6  1616               	andwf	__tdiv_to_l_@f2,f,c
  4783  0029A8  0EFF               	movlw	255
  4784  0029AA  1617               	andwf	__tdiv_to_l_@f2+1,f,c
  4785  0029AC  0E00               	movlw	0
  4786  0029AE  1618               	andwf	__tdiv_to_l_@f2+2,f,c
  4787  0029B0  0E00               	movlw	0
  4788  0029B2  6E1C               	movwf	__tdiv_to_l_@quot,c
  4789  0029B4  0E00               	movlw	0
  4790  0029B6  6E1D               	movwf	__tdiv_to_l_@quot+1,c
  4791  0029B8  0E00               	movlw	0
  4792  0029BA  6E1E               	movwf	__tdiv_to_l_@quot+2,c
  4793  0029BC  0E00               	movlw	0
  4794  0029BE  6E1F               	movwf	__tdiv_to_l_@quot+3,c
  4795  0029C0  0E7F               	movlw	127
  4796  0029C2  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  4797  0029C4  5020               	movf	__tdiv_to_l_@cntr,w,c
  4798  0029C6  0F98               	addlw	152
  4799  0029C8  5E21               	subwf	__tdiv_to_l_@exp1,f,c
  4800  0029CA  0E18               	movlw	24
  4801  0029CC  6E20               	movwf	__tdiv_to_l_@cntr,c
  4802  0029CE                     l832:
  4803  0029CE  90D8               	bcf	status,0,c
  4804  0029D0  361C               	rlcf	__tdiv_to_l_@quot,f,c
  4805  0029D2  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4806  0029D4  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4807  0029D6  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4808  0029D8  5016               	movf	__tdiv_to_l_@f2,w,c
  4809  0029DA  5C13               	subwf	__tdiv_to_l_@f1,w,c
  4810  0029DC  5017               	movf	__tdiv_to_l_@f2+1,w,c
  4811  0029DE  5814               	subwfb	__tdiv_to_l_@f1+1,w,c
  4812  0029E0  5018               	movf	__tdiv_to_l_@f2+2,w,c
  4813  0029E2  5815               	subwfb	__tdiv_to_l_@f1+2,w,c
  4814  0029E4  A0D8               	btfss	status,0,c
  4815  0029E6  D007               	goto	l833
  4816  0029E8  5016               	movf	__tdiv_to_l_@f2,w,c
  4817  0029EA  5E13               	subwf	__tdiv_to_l_@f1,f,c
  4818  0029EC  5017               	movf	__tdiv_to_l_@f2+1,w,c
  4819  0029EE  5A14               	subwfb	__tdiv_to_l_@f1+1,f,c
  4820  0029F0  5018               	movf	__tdiv_to_l_@f2+2,w,c
  4821  0029F2  5A15               	subwfb	__tdiv_to_l_@f1+2,f,c
  4822  0029F4  801C               	bsf	__tdiv_to_l_@quot,0,c
  4823  0029F6                     l833:
  4824  0029F6  90D8               	bcf	status,0,c
  4825  0029F8  3613               	rlcf	__tdiv_to_l_@f1,f,c
  4826  0029FA  3614               	rlcf	__tdiv_to_l_@f1+1,f,c
  4827  0029FC  3615               	rlcf	__tdiv_to_l_@f1+2,f,c
  4828  0029FE  2E20               	decfsz	__tdiv_to_l_@cntr,f,c
  4829  002A00  D7E6               	goto	l832
  4830  002A02  AE21               	btfss	__tdiv_to_l_@exp1,7,c
  4831  002A04  D016               	goto	l3120
  4832  002A06  5021               	movf	__tdiv_to_l_@exp1,w,c
  4833  002A08  0A80               	xorlw	128
  4834  002A0A  0F97               	addlw	151
  4835  002A0C  B0D8               	btfsc	status,0,c
  4836  002A0E  D009               	goto	l3116
  4837  002A10  0E00               	movlw	0
  4838  002A12  6E13               	movwf	?__tdiv_to_l_,c
  4839  002A14  0E00               	movlw	0
  4840  002A16  6E14               	movwf	?__tdiv_to_l_+1,c
  4841  002A18  0E00               	movlw	0
  4842  002A1A  6E15               	movwf	?__tdiv_to_l_+2,c
  4843  002A1C  0E00               	movlw	0
  4844  002A1E  6E16               	movwf	?__tdiv_to_l_+3,c
  4845  002A20  0012               	return	
  4846  002A22                     l3116:
  4847  002A22  90D8               	bcf	status,0,c
  4848  002A24  321F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4849  002A26  321E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4850  002A28  321D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4851  002A2A  321C               	rrcf	__tdiv_to_l_@quot,f,c
  4852  002A2C  3E21               	incfsz	__tdiv_to_l_@exp1,f,c
  4853  002A2E  D7F9               	goto	l3116
  4854  002A30  D015               	goto	l839
  4855  002A32                     l3120:
  4856  002A32  0E17               	movlw	23
  4857  002A34  6421               	cpfsgt	__tdiv_to_l_@exp1,c
  4858  002A36  D00F               	goto	l3128
  4859  002A38  0E00               	movlw	0
  4860  002A3A  6E13               	movwf	?__tdiv_to_l_,c
  4861  002A3C  0E00               	movlw	0
  4862  002A3E  6E14               	movwf	?__tdiv_to_l_+1,c
  4863  002A40  0E00               	movlw	0
  4864  002A42  6E15               	movwf	?__tdiv_to_l_+2,c
  4865  002A44  0E00               	movlw	0
  4866  002A46  6E16               	movwf	?__tdiv_to_l_+3,c
  4867  002A48  0012               	return	
  4868  002A4A                     l3126:
  4869  002A4A  90D8               	bcf	status,0,c
  4870  002A4C  361C               	rlcf	__tdiv_to_l_@quot,f,c
  4871  002A4E  361D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4872  002A50  361E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4873  002A52  361F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4874  002A54  0621               	decf	__tdiv_to_l_@exp1,f,c
  4875  002A56                     l3128:
  4876  002A56  5021               	movf	__tdiv_to_l_@exp1,w,c
  4877  002A58  A4D8               	btfss	status,2,c
  4878  002A5A  D7F7               	goto	l3126
  4879  002A5C                     l839:
  4880  002A5C  C01C  F013         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4881  002A60  C01D  F014         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4882  002A64  C01E  F015         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4883  002A68  C01F  F016         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4884  002A6C  0012               	return		;funcret
  4885  002A6E                     __end_of__tdiv_to_l_:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           intcon	equ	0xFF2
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           indf2	equ	0xFDF
  4897                           postinc2	equ	0xFDE
  4898                           postdec2	equ	0xFDD
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function __div_to_l_ *****************
  4904 ;; Defined at:
  4905 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;  f1              3   18[COMRAM] unsigned long 
  4908 ;;  f2              3   21[COMRAM] unsigned long 
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  quot            4   24[COMRAM] unsigned long 
  4911 ;;  exp1            1   29[COMRAM] unsigned char 
  4912 ;;  cntr            1   28[COMRAM] unsigned char 
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  4   18[COMRAM] unsigned long 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, status,0
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4922 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;Total ram usage:       12 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    4
  4929 ;; This function calls:
  4930 ;;		Nothing
  4931 ;; This function is called by:
  4932 ;;		_sprintf
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text10
  4937  002A6E                     __ptext10:
  4938                           	opt stack 0
  4939  002A6E                     __div_to_l_:
  4940                           	opt stack 25
  4941                           
  4942                           ;incstack = 0
  4943  002A6E  3415               	rlcf	__div_to_l_@f1+2,w,c
  4944  002A70  3416               	rlcf	__div_to_l_@f1+3,w,c
  4945  002A72  6E1E               	movwf	__div_to_l_@exp1,c
  4946  002A74  501E               	movf	__div_to_l_@exp1,w,c
  4947  002A76  A4D8               	btfss	status,2,c
  4948  002A78  D009               	goto	l3136
  4949  002A7A  0E00               	movlw	0
  4950  002A7C  6E13               	movwf	?__div_to_l_,c
  4951  002A7E  0E00               	movlw	0
  4952  002A80  6E14               	movwf	?__div_to_l_+1,c
  4953  002A82  0E00               	movlw	0
  4954  002A84  6E15               	movwf	?__div_to_l_+2,c
  4955  002A86  0E00               	movlw	0
  4956  002A88  6E16               	movwf	?__div_to_l_+3,c
  4957  002A8A  0012               	return	
  4958  002A8C                     l3136:
  4959  002A8C  3418               	rlcf	__div_to_l_@f2+2,w,c
  4960  002A8E  3419               	rlcf	__div_to_l_@f2+3,w,c
  4961  002A90  6E1D               	movwf	__div_to_l_@cntr,c
  4962  002A92  501D               	movf	__div_to_l_@cntr,w,c
  4963  002A94  A4D8               	btfss	status,2,c
  4964  002A96  D009               	goto	l3142
  4965  002A98  0E00               	movlw	0
  4966  002A9A  6E13               	movwf	?__div_to_l_,c
  4967  002A9C  0E00               	movlw	0
  4968  002A9E  6E14               	movwf	?__div_to_l_+1,c
  4969  002AA0  0E00               	movlw	0
  4970  002AA2  6E15               	movwf	?__div_to_l_+2,c
  4971  002AA4  0E00               	movlw	0
  4972  002AA6  6E16               	movwf	?__div_to_l_+3,c
  4973  002AA8  0012               	return	
  4974  002AAA                     l3142:
  4975  002AAA  8E15               	bsf	__div_to_l_@f1+2,7,c
  4976  002AAC  0EFF               	movlw	255
  4977  002AAE  1613               	andwf	__div_to_l_@f1,f,c
  4978  002AB0  0EFF               	movlw	255
  4979  002AB2  1614               	andwf	__div_to_l_@f1+1,f,c
  4980  002AB4  0EFF               	movlw	255
  4981  002AB6  1615               	andwf	__div_to_l_@f1+2,f,c
  4982  002AB8  0E00               	movlw	0
  4983  002ABA  1616               	andwf	__div_to_l_@f1+3,f,c
  4984  002ABC  8E18               	bsf	__div_to_l_@f2+2,7,c
  4985  002ABE  0EFF               	movlw	255
  4986  002AC0  1616               	andwf	__div_to_l_@f2,f,c
  4987  002AC2  0EFF               	movlw	255
  4988  002AC4  1617               	andwf	__div_to_l_@f2+1,f,c
  4989  002AC6  0EFF               	movlw	255
  4990  002AC8  1618               	andwf	__div_to_l_@f2+2,f,c
  4991  002ACA  0E00               	movlw	0
  4992  002ACC  1619               	andwf	__div_to_l_@f2+3,f,c
  4993  002ACE  0E00               	movlw	0
  4994  002AD0  6E19               	movwf	__div_to_l_@quot,c
  4995  002AD2  0E00               	movlw	0
  4996  002AD4  6E1A               	movwf	__div_to_l_@quot+1,c
  4997  002AD6  0E00               	movlw	0
  4998  002AD8  6E1B               	movwf	__div_to_l_@quot+2,c
  4999  002ADA  0E00               	movlw	0
  5000  002ADC  6E1C               	movwf	__div_to_l_@quot+3,c
  5001  002ADE  0E7F               	movlw	127
  5002  002AE0  5E1E               	subwf	__div_to_l_@exp1,f,c
  5003  002AE2  501D               	movf	__div_to_l_@cntr,w,c
  5004  002AE4  0FA0               	addlw	160
  5005  002AE6  5E1E               	subwf	__div_to_l_@exp1,f,c
  5006  002AE8  0E20               	movlw	32
  5007  002AEA  6E1D               	movwf	__div_to_l_@cntr,c
  5008  002AEC                     l3156:
  5009  002AEC  90D8               	bcf	status,0,c
  5010  002AEE  3619               	rlcf	__div_to_l_@quot,f,c
  5011  002AF0  361A               	rlcf	__div_to_l_@quot+1,f,c
  5012  002AF2  361B               	rlcf	__div_to_l_@quot+2,f,c
  5013  002AF4  361C               	rlcf	__div_to_l_@quot+3,f,c
  5014  002AF6  5016               	movf	__div_to_l_@f2,w,c
  5015  002AF8  5C13               	subwf	__div_to_l_@f1,w,c
  5016  002AFA  5017               	movf	__div_to_l_@f2+1,w,c
  5017  002AFC  5814               	subwfb	__div_to_l_@f1+1,w,c
  5018  002AFE  5018               	movf	__div_to_l_@f2+2,w,c
  5019  002B00  5815               	subwfb	__div_to_l_@f1+2,w,c
  5020  002B02  5019               	movf	__div_to_l_@f2+3,w,c
  5021  002B04  5816               	subwfb	__div_to_l_@f1+3,w,c
  5022  002B06  A0D8               	btfss	status,0,c
  5023  002B08  D009               	goto	l3164
  5024  002B0A  5016               	movf	__div_to_l_@f2,w,c
  5025  002B0C  5E13               	subwf	__div_to_l_@f1,f,c
  5026  002B0E  5017               	movf	__div_to_l_@f2+1,w,c
  5027  002B10  5A14               	subwfb	__div_to_l_@f1+1,f,c
  5028  002B12  5018               	movf	__div_to_l_@f2+2,w,c
  5029  002B14  5A15               	subwfb	__div_to_l_@f1+2,f,c
  5030  002B16  5019               	movf	__div_to_l_@f2+3,w,c
  5031  002B18  5A16               	subwfb	__div_to_l_@f1+3,f,c
  5032  002B1A  8019               	bsf	__div_to_l_@quot,0,c
  5033  002B1C                     l3164:
  5034  002B1C  90D8               	bcf	status,0,c
  5035  002B1E  3613               	rlcf	__div_to_l_@f1,f,c
  5036  002B20  3614               	rlcf	__div_to_l_@f1+1,f,c
  5037  002B22  3615               	rlcf	__div_to_l_@f1+2,f,c
  5038  002B24  3616               	rlcf	__div_to_l_@f1+3,f,c
  5039  002B26  2E1D               	decfsz	__div_to_l_@cntr,f,c
  5040  002B28  D7E1               	goto	l3156
  5041  002B2A  AE1E               	btfss	__div_to_l_@exp1,7,c
  5042  002B2C  D016               	goto	l3180
  5043  002B2E  501E               	movf	__div_to_l_@exp1,w,c
  5044  002B30  0A80               	xorlw	128
  5045  002B32  0F9F               	addlw	159
  5046  002B34  B0D8               	btfsc	status,0,c
  5047  002B36  D009               	goto	l3176
  5048  002B38  0E00               	movlw	0
  5049  002B3A  6E13               	movwf	?__div_to_l_,c
  5050  002B3C  0E00               	movlw	0
  5051  002B3E  6E14               	movwf	?__div_to_l_+1,c
  5052  002B40  0E00               	movlw	0
  5053  002B42  6E15               	movwf	?__div_to_l_+2,c
  5054  002B44  0E00               	movlw	0
  5055  002B46  6E16               	movwf	?__div_to_l_+3,c
  5056  002B48  0012               	return	
  5057  002B4A                     l3176:
  5058  002B4A  90D8               	bcf	status,0,c
  5059  002B4C  321C               	rrcf	__div_to_l_@quot+3,f,c
  5060  002B4E  321B               	rrcf	__div_to_l_@quot+2,f,c
  5061  002B50  321A               	rrcf	__div_to_l_@quot+1,f,c
  5062  002B52  3219               	rrcf	__div_to_l_@quot,f,c
  5063  002B54  3E1E               	incfsz	__div_to_l_@exp1,f,c
  5064  002B56  D7F9               	goto	l3176
  5065  002B58  D015               	goto	l735
  5066  002B5A                     l3180:
  5067  002B5A  0E1F               	movlw	31
  5068  002B5C  641E               	cpfsgt	__div_to_l_@exp1,c
  5069  002B5E  D00F               	goto	l3188
  5070  002B60  0E00               	movlw	0
  5071  002B62  6E13               	movwf	?__div_to_l_,c
  5072  002B64  0E00               	movlw	0
  5073  002B66  6E14               	movwf	?__div_to_l_+1,c
  5074  002B68  0E00               	movlw	0
  5075  002B6A  6E15               	movwf	?__div_to_l_+2,c
  5076  002B6C  0E00               	movlw	0
  5077  002B6E  6E16               	movwf	?__div_to_l_+3,c
  5078  002B70  0012               	return	
  5079  002B72                     l3186:
  5080  002B72  90D8               	bcf	status,0,c
  5081  002B74  3619               	rlcf	__div_to_l_@quot,f,c
  5082  002B76  361A               	rlcf	__div_to_l_@quot+1,f,c
  5083  002B78  361B               	rlcf	__div_to_l_@quot+2,f,c
  5084  002B7A  361C               	rlcf	__div_to_l_@quot+3,f,c
  5085  002B7C  061E               	decf	__div_to_l_@exp1,f,c
  5086  002B7E                     l3188:
  5087  002B7E  501E               	movf	__div_to_l_@exp1,w,c
  5088  002B80  A4D8               	btfss	status,2,c
  5089  002B82  D7F7               	goto	l3186
  5090  002B84                     l735:
  5091  002B84  C019  F013         	movff	__div_to_l_@quot,?__div_to_l_
  5092  002B88  C01A  F014         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5093  002B8C  C01B  F015         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5094  002B90  C01C  F016         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5095  002B94  0012               	return		;funcret
  5096  002B96                     __end_of__div_to_l_:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           intcon	equ	0xFF2
  5105                           postinc0	equ	0xFEE
  5106                           wreg	equ	0xFE8
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___lltoft *****************
  5115 ;; Defined at:
  5116 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  c               4   26[COMRAM] unsigned long 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  exp             1   34[COMRAM] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  3   26[COMRAM] float 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;Total ram usage:        9 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    5
  5137 ;; This function calls:
  5138 ;;		___ftpack
  5139 ;; This function is called by:
  5140 ;;		_sprintf
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text11
  5145  003556                     __ptext11:
  5146                           	opt stack 0
  5147  003556                     ___lltoft:
  5148                           	opt stack 24
  5149                           
  5150                           ;incstack = 0
  5151  003556  0E8E               	movlw	142
  5152  003558  6E23               	movwf	___lltoft@exp,c
  5153  00355A  D006               	goto	l4428
  5154  00355C                     l4426:
  5155  00355C  90D8               	bcf	status,0,c
  5156  00355E  321E               	rrcf	___lltoft@c+3,f,c
  5157  003560  321D               	rrcf	___lltoft@c+2,f,c
  5158  003562  321C               	rrcf	___lltoft@c+1,f,c
  5159  003564  321B               	rrcf	___lltoft@c,f,c
  5160  003566  2A23               	incf	___lltoft@exp,f,c
  5161  003568                     l4428:
  5162  003568  0E00               	movlw	0
  5163  00356A  141B               	andwf	___lltoft@c,w,c
  5164  00356C  6E1F               	movwf	??___lltoft& (0+255),c
  5165  00356E  0E00               	movlw	0
  5166  003570  141C               	andwf	___lltoft@c+1,w,c
  5167  003572  6E20               	movwf	(??___lltoft+1)& (0+255),c
  5168  003574  0E00               	movlw	0
  5169  003576  141D               	andwf	___lltoft@c+2,w,c
  5170  003578  6E21               	movwf	(??___lltoft+2)& (0+255),c
  5171  00357A  0EFF               	movlw	255
  5172  00357C  141E               	andwf	___lltoft@c+3,w,c
  5173  00357E  6E22               	movwf	(??___lltoft+3)& (0+255),c
  5174  003580  501F               	movf	??___lltoft,w,c
  5175  003582  1020               	iorwf	??___lltoft+1,w,c
  5176  003584  1021               	iorwf	??___lltoft+2,w,c
  5177  003586  1022               	iorwf	??___lltoft+3,w,c
  5178  003588  A4D8               	btfss	status,2,c
  5179  00358A  D7E8               	goto	l4426
  5180  00358C  C01B  F013         	movff	___lltoft@c,___ftpack@arg
  5181  003590  C01C  F014         	movff	___lltoft@c+1,___ftpack@arg+1
  5182  003594  C01D  F015         	movff	___lltoft@c+2,___ftpack@arg+2
  5183  003598  C023  F016         	movff	___lltoft@exp,___ftpack@exp
  5184  00359C  0E00               	movlw	0
  5185  00359E  6E17               	movwf	___ftpack@sign,c
  5186  0035A0  EC17  F018         	call	___ftpack	;wreg free
  5187  0035A4  C013  F01B         	movff	?___ftpack,?___lltoft
  5188  0035A8  C014  F01C         	movff	?___ftpack+1,?___lltoft+1
  5189  0035AC  C015  F01D         	movff	?___ftpack+2,?___lltoft+2
  5190  0035B0  0012               	return	
  5191  0035B2                     __end_of___lltoft:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           postinc0	equ	0xFEE
  5201                           wreg	equ	0xFE8
  5202                           indf2	equ	0xFDF
  5203                           postinc2	equ	0xFDE
  5204                           postdec2	equ	0xFDD
  5205                           fsr2h	equ	0xFDA
  5206                           fsr2l	equ	0xFD9
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function ___llmod *****************
  5210 ;; Defined at:
  5211 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  dividend        4   31[COMRAM] unsigned long 
  5214 ;;  divisor         4   35[COMRAM] unsigned long 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  counter         1   39[COMRAM] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  4   31[COMRAM] unsigned long 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:        9 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    4
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_sprintf
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text12
  5241  0034F0                     __ptext12:
  5242                           	opt stack 0
  5243  0034F0                     ___llmod:
  5244                           	opt stack 25
  5245                           
  5246                           ;incstack = 0
  5247  0034F0  5024               	movf	___llmod@divisor,w,c
  5248  0034F2  1025               	iorwf	___llmod@divisor+1,w,c
  5249  0034F4  1026               	iorwf	___llmod@divisor+2,w,c
  5250  0034F6  1027               	iorwf	___llmod@divisor+3,w,c
  5251  0034F8  B4D8               	btfsc	status,2,c
  5252  0034FA  D024               	goto	l924
  5253  0034FC  0E01               	movlw	1
  5254  0034FE  6E28               	movwf	___llmod@counter,c
  5255  003500  D006               	goto	l3294
  5256  003502                     l3292:
  5257  003502  90D8               	bcf	status,0,c
  5258  003504  3624               	rlcf	___llmod@divisor,f,c
  5259  003506  3625               	rlcf	___llmod@divisor+1,f,c
  5260  003508  3626               	rlcf	___llmod@divisor+2,f,c
  5261  00350A  3627               	rlcf	___llmod@divisor+3,f,c
  5262  00350C  2A28               	incf	___llmod@counter,f,c
  5263  00350E                     l3294:
  5264  00350E  AE27               	btfss	___llmod@divisor+3,7,c
  5265  003510  D7F8               	goto	l3292
  5266  003512                     l3296:
  5267  003512  5024               	movf	___llmod@divisor,w,c
  5268  003514  5C20               	subwf	___llmod@dividend,w,c
  5269  003516  5025               	movf	___llmod@divisor+1,w,c
  5270  003518  5821               	subwfb	___llmod@dividend+1,w,c
  5271  00351A  5026               	movf	___llmod@divisor+2,w,c
  5272  00351C  5822               	subwfb	___llmod@dividend+2,w,c
  5273  00351E  5027               	movf	___llmod@divisor+3,w,c
  5274  003520  5823               	subwfb	___llmod@dividend+3,w,c
  5275  003522  A0D8               	btfss	status,0,c
  5276  003524  D008               	goto	l3300
  5277  003526  5024               	movf	___llmod@divisor,w,c
  5278  003528  5E20               	subwf	___llmod@dividend,f,c
  5279  00352A  5025               	movf	___llmod@divisor+1,w,c
  5280  00352C  5A21               	subwfb	___llmod@dividend+1,f,c
  5281  00352E  5026               	movf	___llmod@divisor+2,w,c
  5282  003530  5A22               	subwfb	___llmod@dividend+2,f,c
  5283  003532  5027               	movf	___llmod@divisor+3,w,c
  5284  003534  5A23               	subwfb	___llmod@dividend+3,f,c
  5285  003536                     l3300:
  5286  003536  90D8               	bcf	status,0,c
  5287  003538  3227               	rrcf	___llmod@divisor+3,f,c
  5288  00353A  3226               	rrcf	___llmod@divisor+2,f,c
  5289  00353C  3225               	rrcf	___llmod@divisor+1,f,c
  5290  00353E  3224               	rrcf	___llmod@divisor,f,c
  5291  003540  2E28               	decfsz	___llmod@counter,f,c
  5292  003542  D7E7               	goto	l3296
  5293  003544                     l924:
  5294  003544  C020  F020         	movff	___llmod@dividend,?___llmod
  5295  003548  C021  F021         	movff	___llmod@dividend+1,?___llmod+1
  5296  00354C  C022  F022         	movff	___llmod@dividend+2,?___llmod+2
  5297  003550  C023  F023         	movff	___llmod@dividend+3,?___llmod+3
  5298  003554  0012               	return		;funcret
  5299  003556                     __end_of___llmod:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function ___lldiv *****************
  5318 ;; Defined at:
  5319 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  dividend        4   18[COMRAM] unsigned long 
  5322 ;;  divisor         4   22[COMRAM] unsigned long 
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  quotient        4   26[COMRAM] unsigned long 
  5325 ;;  counter         1   30[COMRAM] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  4   18[COMRAM] unsigned long 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5335 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5338 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;Total ram usage:       13 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    4
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_sprintf
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text13
  5350  00330C                     __ptext13:
  5351                           	opt stack 0
  5352  00330C                     ___lldiv:
  5353                           	opt stack 25
  5354                           
  5355                           ;incstack = 0
  5356  00330C  0E00               	movlw	0
  5357  00330E  6E1B               	movwf	___lldiv@quotient,c
  5358  003310  0E00               	movlw	0
  5359  003312  6E1C               	movwf	___lldiv@quotient+1,c
  5360  003314  0E00               	movlw	0
  5361  003316  6E1D               	movwf	___lldiv@quotient+2,c
  5362  003318  0E00               	movlw	0
  5363  00331A  6E1E               	movwf	___lldiv@quotient+3,c
  5364  00331C  5017               	movf	___lldiv@divisor,w,c
  5365  00331E  1018               	iorwf	___lldiv@divisor+1,w,c
  5366  003320  1019               	iorwf	___lldiv@divisor+2,w,c
  5367  003322  101A               	iorwf	___lldiv@divisor+3,w,c
  5368  003324  B4D8               	btfsc	status,2,c
  5369  003326  D02A               	goto	l914
  5370  003328  0E01               	movlw	1
  5371  00332A  6E1F               	movwf	___lldiv@counter,c
  5372  00332C  D006               	goto	l3274
  5373  00332E                     l3272:
  5374  00332E  90D8               	bcf	status,0,c
  5375  003330  3617               	rlcf	___lldiv@divisor,f,c
  5376  003332  3618               	rlcf	___lldiv@divisor+1,f,c
  5377  003334  3619               	rlcf	___lldiv@divisor+2,f,c
  5378  003336  361A               	rlcf	___lldiv@divisor+3,f,c
  5379  003338  2A1F               	incf	___lldiv@counter,f,c
  5380  00333A                     l3274:
  5381  00333A  AE1A               	btfss	___lldiv@divisor+3,7,c
  5382  00333C  D7F8               	goto	l3272
  5383  00333E                     l3276:
  5384  00333E  90D8               	bcf	status,0,c
  5385  003340  361B               	rlcf	___lldiv@quotient,f,c
  5386  003342  361C               	rlcf	___lldiv@quotient+1,f,c
  5387  003344  361D               	rlcf	___lldiv@quotient+2,f,c
  5388  003346  361E               	rlcf	___lldiv@quotient+3,f,c
  5389  003348  5017               	movf	___lldiv@divisor,w,c
  5390  00334A  5C13               	subwf	___lldiv@dividend,w,c
  5391  00334C  5018               	movf	___lldiv@divisor+1,w,c
  5392  00334E  5814               	subwfb	___lldiv@dividend+1,w,c
  5393  003350  5019               	movf	___lldiv@divisor+2,w,c
  5394  003352  5815               	subwfb	___lldiv@dividend+2,w,c
  5395  003354  501A               	movf	___lldiv@divisor+3,w,c
  5396  003356  5816               	subwfb	___lldiv@dividend+3,w,c
  5397  003358  A0D8               	btfss	status,0,c
  5398  00335A  D009               	goto	l3284
  5399  00335C  5017               	movf	___lldiv@divisor,w,c
  5400  00335E  5E13               	subwf	___lldiv@dividend,f,c
  5401  003360  5018               	movf	___lldiv@divisor+1,w,c
  5402  003362  5A14               	subwfb	___lldiv@dividend+1,f,c
  5403  003364  5019               	movf	___lldiv@divisor+2,w,c
  5404  003366  5A15               	subwfb	___lldiv@dividend+2,f,c
  5405  003368  501A               	movf	___lldiv@divisor+3,w,c
  5406  00336A  5A16               	subwfb	___lldiv@dividend+3,f,c
  5407  00336C  801B               	bsf	___lldiv@quotient,0,c
  5408  00336E                     l3284:
  5409  00336E  90D8               	bcf	status,0,c
  5410  003370  321A               	rrcf	___lldiv@divisor+3,f,c
  5411  003372  3219               	rrcf	___lldiv@divisor+2,f,c
  5412  003374  3218               	rrcf	___lldiv@divisor+1,f,c
  5413  003376  3217               	rrcf	___lldiv@divisor,f,c
  5414  003378  2E1F               	decfsz	___lldiv@counter,f,c
  5415  00337A  D7E1               	goto	l3276
  5416  00337C                     l914:
  5417  00337C  C01B  F013         	movff	___lldiv@quotient,?___lldiv
  5418  003380  C01C  F014         	movff	___lldiv@quotient+1,?___lldiv+1
  5419  003384  C01D  F015         	movff	___lldiv@quotient+2,?___lldiv+2
  5420  003388  C01E  F016         	movff	___lldiv@quotient+3,?___lldiv+3
  5421  00338C  0012               	return		;funcret
  5422  00338E                     __end_of___lldiv:
  5423                           	opt stack 0
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           prodh	equ	0xFF4
  5429                           prodl	equ	0xFF3
  5430                           intcon	equ	0xFF2
  5431                           postinc0	equ	0xFEE
  5432                           wreg	equ	0xFE8
  5433                           indf2	equ	0xFDF
  5434                           postinc2	equ	0xFDE
  5435                           postdec2	equ	0xFDD
  5436                           fsr2h	equ	0xFDA
  5437                           fsr2l	equ	0xFD9
  5438                           status	equ	0xFD8
  5439                           
  5440 ;; *************** function ___fttol *****************
  5441 ;; Defined at:
  5442 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  f1              3    4[BANK0 ] float 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  lval            4   14[BANK0 ] unsigned long 
  5447 ;;  exp1            1   18[BANK0 ] unsigned char 
  5448 ;;  sign1           1   13[BANK0 ] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  4    4[BANK0 ] long 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:       15 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    4
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_sprintf
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           	psect	text14
  5473  0027F8                     __ptext14:
  5474                           	opt stack 0
  5475  0027F8                     ___fttol:
  5476                           	opt stack 25
  5477                           
  5478                           ;incstack = 0
  5479  0027F8  C066  F068         	movff	___fttol@f1+2,??___fttol
  5480  0027FC  0100               	movlb	0	; () banked
  5481  0027FE  6B69               	clrf	(??___fttol+1)& (0+255),b
  5482  002800  6B6A               	clrf	(??___fttol+2)& (0+255),b
  5483  002802  0100               	movlb	0	; () banked
  5484  002804  3565               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5485  002806  0100               	movlb	0	; () banked
  5486  002808  3768               	rlcf	??___fttol& (0+255),f,b
  5487  00280A  E301               	bnc	u5181
  5488  00280C  8169               	bsf	(??___fttol+1)& (0+255),0,b
  5489  00280E                     u5181:
  5490  00280E  0100               	movlb	0	; () banked
  5491  002810  5168               	movf	??___fttol& (0+255),w,b
  5492  002812  0100               	movlb	0	; () banked
  5493  002814  6F72               	movwf	___fttol@exp1& (0+255),b
  5494  002816  0100               	movlb	0	; () banked
  5495  002818  5172               	movf	___fttol@exp1& (0+255),w,b
  5496  00281A  A4D8               	btfss	status,2,c
  5497  00281C  D00A               	goto	l4384
  5498                           
  5499                           ; BSR set to: 0
  5500  00281E  0E00               	movlw	0
  5501  002820  0100               	movlb	0	; () banked
  5502  002822  6F64               	movwf	?___fttol& (0+255),b
  5503  002824  0E00               	movlw	0
  5504  002826  6F65               	movwf	(?___fttol+1)& (0+255),b
  5505  002828  0E00               	movlw	0
  5506  00282A  6F66               	movwf	(?___fttol+2)& (0+255),b
  5507  00282C  0E00               	movlw	0
  5508  00282E  6F67               	movwf	(?___fttol+3)& (0+255),b
  5509                           
  5510                           ; BSR set to: 0
  5511  002830  0012               	return	
  5512  002832                     l4384:
  5513                           
  5514                           ; BSR set to: 0
  5515  002832  0E17               	movlw	23
  5516  002834  0100               	movlb	0	; () banked
  5517  002836  6F68               	movwf	??___fttol& (0+255),b
  5518  002838  C064  F069         	movff	___fttol@f1,??___fttol+1
  5519  00283C  C065  F06A         	movff	___fttol@f1+1,??___fttol+2
  5520  002840  C066  F06B         	movff	___fttol@f1+2,??___fttol+3
  5521  002844  0100               	movlb	0	; () banked
  5522  002846  2968               	incf	??___fttol& (0+255),w,b
  5523  002848  0100               	movlb	0	; () banked
  5524  00284A  6F6C               	movwf	(??___fttol+4)& (0+255),b
  5525  00284C  D005               	goto	u5200
  5526  00284E                     u5205:
  5527  00284E  0100               	movlb	0	; () banked
  5528  002850  90D8               	bcf	status,0,c
  5529  002852  336B               	rrcf	(??___fttol+3)& (0+255),f,b
  5530  002854  336A               	rrcf	(??___fttol+2)& (0+255),f,b
  5531  002856  3369               	rrcf	(??___fttol+1)& (0+255),f,b
  5532  002858                     u5200:
  5533  002858  0100               	movlb	0	; () banked
  5534  00285A  2F6C               	decfsz	(??___fttol+4)& (0+255),f,b
  5535  00285C  D7F8               	goto	u5205
  5536  00285E  0100               	movlb	0	; () banked
  5537  002860  5169               	movf	(??___fttol+1)& (0+255),w,b
  5538  002862  0100               	movlb	0	; () banked
  5539  002864  6F6D               	movwf	___fttol@sign1& (0+255),b
  5540                           
  5541                           ; BSR set to: 0
  5542  002866  0100               	movlb	0	; () banked
  5543  002868  8F65               	bsf	(___fttol@f1+1)& (0+255),7,b
  5544                           
  5545                           ; BSR set to: 0
  5546  00286A  0EFF               	movlw	255
  5547  00286C  0100               	movlb	0	; () banked
  5548  00286E  1764               	andwf	___fttol@f1& (0+255),f,b
  5549  002870  0EFF               	movlw	255
  5550  002872  0100               	movlb	0	; () banked
  5551  002874  1765               	andwf	(___fttol@f1+1)& (0+255),f,b
  5552  002876  0E00               	movlw	0
  5553  002878  0100               	movlb	0	; () banked
  5554  00287A  1766               	andwf	(___fttol@f1+2)& (0+255),f,b
  5555                           
  5556                           ; BSR set to: 0
  5557  00287C  0100               	movlb	0	; () banked
  5558  00287E  5164               	movf	___fttol@f1& (0+255),w,b
  5559  002880  0100               	movlb	0	; () banked
  5560  002882  6F6E               	movwf	___fttol@lval& (0+255),b
  5561  002884  0100               	movlb	0	; () banked
  5562  002886  5165               	movf	(___fttol@f1+1)& (0+255),w,b
  5563  002888  0100               	movlb	0	; () banked
  5564  00288A  6F6F               	movwf	(___fttol@lval+1)& (0+255),b
  5565  00288C  0100               	movlb	0	; () banked
  5566  00288E  5166               	movf	(___fttol@f1+2)& (0+255),w,b
  5567  002890  0100               	movlb	0	; () banked
  5568  002892  6F70               	movwf	(___fttol@lval+2)& (0+255),b
  5569  002894  0100               	movlb	0	; () banked
  5570  002896  6B71               	clrf	(___fttol@lval+3)& (0+255),b
  5571                           
  5572                           ; BSR set to: 0
  5573  002898  0E8E               	movlw	142
  5574  00289A  0100               	movlb	0	; () banked
  5575  00289C  5F72               	subwf	___fttol@exp1& (0+255),f,b
  5576                           
  5577                           ; BSR set to: 0
  5578  00289E  0100               	movlb	0	; () banked
  5579  0028A0  AF72               	btfss	___fttol@exp1& (0+255),7,b
  5580  0028A2  D01A               	goto	l4406
  5581                           
  5582                           ; BSR set to: 0
  5583  0028A4  0100               	movlb	0	; () banked
  5584  0028A6  5172               	movf	___fttol@exp1& (0+255),w,b
  5585  0028A8  0A80               	xorlw	128
  5586  0028AA  0F8F               	addlw	143
  5587  0028AC  B0D8               	btfsc	status,0,c
  5588  0028AE  D00A               	goto	l4402
  5589                           
  5590                           ; BSR set to: 0
  5591  0028B0  0E00               	movlw	0
  5592  0028B2  0100               	movlb	0	; () banked
  5593  0028B4  6F64               	movwf	?___fttol& (0+255),b
  5594  0028B6  0E00               	movlw	0
  5595  0028B8  6F65               	movwf	(?___fttol+1)& (0+255),b
  5596  0028BA  0E00               	movlw	0
  5597  0028BC  6F66               	movwf	(?___fttol+2)& (0+255),b
  5598  0028BE  0E00               	movlw	0
  5599  0028C0  6F67               	movwf	(?___fttol+3)& (0+255),b
  5600                           
  5601                           ; BSR set to: 0
  5602  0028C2  0012               	return	
  5603  0028C4                     l4402:
  5604                           
  5605                           ; BSR set to: 0
  5606  0028C4  0100               	movlb	0	; () banked
  5607  0028C6  90D8               	bcf	status,0,c
  5608  0028C8  3371               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5609  0028CA  3370               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5610  0028CC  336F               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5611  0028CE  336E               	rrcf	___fttol@lval& (0+255),f,b
  5612                           
  5613                           ; BSR set to: 0
  5614  0028D0  0100               	movlb	0	; () banked
  5615  0028D2  3F72               	incfsz	___fttol@exp1& (0+255),f,b
  5616  0028D4  D7F7               	goto	l4402
  5617                           
  5618                           ; BSR set to: 0
  5619  0028D6  D01B               	goto	l4416
  5620  0028D8                     l4406:
  5621                           
  5622                           ; BSR set to: 0
  5623  0028D8  0E17               	movlw	23
  5624  0028DA  0100               	movlb	0	; () banked
  5625  0028DC  6572               	cpfsgt	___fttol@exp1& (0+255),b
  5626  0028DE  D012               	goto	l4414
  5627                           
  5628                           ; BSR set to: 0
  5629  0028E0  0E00               	movlw	0
  5630  0028E2  0100               	movlb	0	; () banked
  5631  0028E4  6F64               	movwf	?___fttol& (0+255),b
  5632  0028E6  0E00               	movlw	0
  5633  0028E8  6F65               	movwf	(?___fttol+1)& (0+255),b
  5634  0028EA  0E00               	movlw	0
  5635  0028EC  6F66               	movwf	(?___fttol+2)& (0+255),b
  5636  0028EE  0E00               	movlw	0
  5637  0028F0  6F67               	movwf	(?___fttol+3)& (0+255),b
  5638                           
  5639                           ; BSR set to: 0
  5640  0028F2  0012               	return	
  5641  0028F4                     l4412:
  5642                           
  5643                           ; BSR set to: 0
  5644  0028F4  0100               	movlb	0	; () banked
  5645  0028F6  90D8               	bcf	status,0,c
  5646  0028F8  376E               	rlcf	___fttol@lval& (0+255),f,b
  5647  0028FA  376F               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5648  0028FC  3770               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5649  0028FE  3771               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5650  002900  0100               	movlb	0	; () banked
  5651  002902  0772               	decf	___fttol@exp1& (0+255),f,b
  5652  002904                     l4414:
  5653                           
  5654                           ; BSR set to: 0
  5655  002904  0100               	movlb	0	; () banked
  5656  002906  5172               	movf	___fttol@exp1& (0+255),w,b
  5657  002908  0100               	movlb	0	; () banked
  5658  00290A  A4D8               	btfss	status,2,c
  5659  00290C  D7F3               	goto	l4412
  5660  00290E                     l4416:
  5661                           
  5662                           ; BSR set to: 0
  5663  00290E  0100               	movlb	0	; () banked
  5664  002910  516D               	movf	___fttol@sign1& (0+255),w,b
  5665  002912  0100               	movlb	0	; () banked
  5666  002914  B4D8               	btfsc	status,2,c
  5667  002916  D009               	goto	l4420
  5668                           
  5669                           ; BSR set to: 0
  5670  002918  0100               	movlb	0	; () banked
  5671  00291A  1F71               	comf	(___fttol@lval+3)& (0+255),f,b
  5672  00291C  1F70               	comf	(___fttol@lval+2)& (0+255),f,b
  5673  00291E  1F6F               	comf	(___fttol@lval+1)& (0+255),f,b
  5674  002920  6D6E               	negf	___fttol@lval& (0+255),b
  5675  002922  0E00               	movlw	0
  5676  002924  236F               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5677  002926  2370               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5678  002928  2371               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5679  00292A                     l4420:
  5680                           
  5681                           ; BSR set to: 0
  5682  00292A  C06E  F064         	movff	___fttol@lval,?___fttol
  5683  00292E  C06F  F065         	movff	___fttol@lval+1,?___fttol+1
  5684  002932  C070  F066         	movff	___fttol@lval+2,?___fttol+2
  5685  002936  C071  F067         	movff	___fttol@lval+3,?___fttol+3
  5686  00293A  0012               	return	
  5687  00293C                     __end_of___fttol:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           indf2	equ	0xFDF
  5699                           postinc2	equ	0xFDE
  5700                           postdec2	equ	0xFDD
  5701                           fsr2h	equ	0xFDA
  5702                           fsr2l	equ	0xFD9
  5703                           status	equ	0xFD8
  5704                           
  5705 ;; *************** function ___ftsub *****************
  5706 ;; Defined at:
  5707 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  f1              3   16[BANK0 ] float 
  5710 ;;  f2              3   19[BANK0 ] float 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;		None
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  3   16[BANK0 ] float 
  5715 ;; Registers used:
  5716 ;;		wreg, status,2, status,0, cstack
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5722 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;Total ram usage:        6 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    6
  5729 ;; This function calls:
  5730 ;;		___ftadd
  5731 ;; This function is called by:
  5732 ;;		_sprintf
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text15
  5737  003662                     __ptext15:
  5738                           	opt stack 0
  5739  003662                     ___ftsub:
  5740                           	opt stack 23
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;incstack = 0
  5744  003662  0100               	movlb	0	; () banked
  5745  003664  5173               	movf	___ftsub@f2& (0+255),w,b
  5746  003666  0100               	movlb	0	; () banked
  5747  003668  1174               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5748  00366A  0100               	movlb	0	; () banked
  5749  00366C  1175               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5750  00366E  B4D8               	btfsc	status,2,c
  5751  003670  D009               	goto	l4374
  5752                           
  5753                           ; BSR set to: 0
  5754  003672  0E00               	movlw	0
  5755  003674  0100               	movlb	0	; () banked
  5756  003676  1B73               	xorwf	___ftsub@f2& (0+255),f,b
  5757  003678  0E00               	movlw	0
  5758  00367A  0100               	movlb	0	; () banked
  5759  00367C  1B74               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5760  00367E  0E80               	movlw	128
  5761  003680  0100               	movlb	0	; () banked
  5762  003682  1B75               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5763  003684                     l4374:
  5764                           
  5765                           ; BSR set to: 0
  5766  003684  C070  F067         	movff	___ftsub@f1,___ftadd@f1
  5767  003688  C071  F068         	movff	___ftsub@f1+1,___ftadd@f1+1
  5768  00368C  C072  F069         	movff	___ftsub@f1+2,___ftadd@f1+2
  5769  003690  C073  F06A         	movff	___ftsub@f2,___ftadd@f2
  5770  003694  C074  F06B         	movff	___ftsub@f2+1,___ftadd@f2+1
  5771  003698  C075  F06C         	movff	___ftsub@f2+2,___ftadd@f2+2
  5772  00369C  ECE8  F011         	call	___ftadd	;wreg free
  5773  0036A0  C067  F070         	movff	?___ftadd,?___ftsub
  5774  0036A4  C068  F071         	movff	?___ftadd+1,?___ftsub+1
  5775  0036A8  C069  F072         	movff	?___ftadd+2,?___ftsub+2
  5776  0036AC  0012               	return	
  5777  0036AE                     __end_of___ftsub:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           postinc0	equ	0xFEE
  5787                           wreg	equ	0xFE8
  5788                           indf2	equ	0xFDF
  5789                           postinc2	equ	0xFDE
  5790                           postdec2	equ	0xFDD
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function ___ftadd *****************
  5796 ;; Defined at:
  5797 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  f1              3    7[BANK0 ] float 
  5800 ;;  f2              3   10[BANK0 ] float 
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  exp1            1   15[BANK0 ] unsigned char 
  5803 ;;  exp2            1   14[BANK0 ] unsigned char 
  5804 ;;  sign            1   13[BANK0 ] unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  3    7[BANK0 ] float 
  5807 ;; Registers used:
  5808 ;;		wreg, status,2, status,0, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Totals:         3       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;Total ram usage:       12 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    5
  5821 ;; This function calls:
  5822 ;;		___ftpack
  5823 ;; This function is called by:
  5824 ;;		_sprintf
  5825 ;;		___ftsub
  5826 ;; This function uses a non-reentrant model
  5827 ;;
  5828                           
  5829                           	psect	text16
  5830  0023D0                     __ptext16:
  5831                           	opt stack 0
  5832  0023D0                     ___ftadd:
  5833                           	opt stack 23
  5834                           
  5835                           ;incstack = 0
  5836  0023D0  C069  F039         	movff	___ftadd@f1+2,??___ftadd
  5837  0023D4  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5838  0023D6  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5839  0023D8  0100               	movlb	0	; () banked
  5840  0023DA  3568               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5841  0023DC  3639               	rlcf	??___ftadd& (0+255),f,c
  5842  0023DE  E301               	bnc	u4711
  5843  0023E0  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5844  0023E2                     u4711:
  5845  0023E2  5039               	movf	??___ftadd,w,c
  5846  0023E4  0100               	movlb	0	; () banked
  5847  0023E6  6F6F               	movwf	___ftadd@exp1& (0+255),b
  5848  0023E8  C06C  F039         	movff	___ftadd@f2+2,??___ftadd
  5849  0023EC  6A3A               	clrf	(??___ftadd+1)& (0+255),c
  5850  0023EE  6A3B               	clrf	(??___ftadd+2)& (0+255),c
  5851  0023F0  0100               	movlb	0	; () banked
  5852  0023F2  356B               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5853  0023F4  3639               	rlcf	??___ftadd& (0+255),f,c
  5854  0023F6  E301               	bnc	u4721
  5855  0023F8  803A               	bsf	(??___ftadd+1)& (0+255),0,c
  5856  0023FA                     u4721:
  5857  0023FA  5039               	movf	??___ftadd,w,c
  5858  0023FC  0100               	movlb	0	; () banked
  5859  0023FE  6F6E               	movwf	___ftadd@exp2& (0+255),b
  5860                           
  5861                           ; BSR set to: 0
  5862  002400  0100               	movlb	0	; () banked
  5863  002402  516F               	movf	___ftadd@exp1& (0+255),w,b
  5864  002404  0100               	movlb	0	; () banked
  5865  002406  B4D8               	btfsc	status,2,c
  5866  002408  D00F               	goto	l790
  5867                           
  5868                           ; BSR set to: 0
  5869  00240A  0100               	movlb	0	; () banked
  5870  00240C  516E               	movf	___ftadd@exp2& (0+255),w,b
  5871  00240E  0100               	movlb	0	; () banked
  5872  002410  5D6F               	subwf	___ftadd@exp1& (0+255),w,b
  5873  002412  B0D8               	btfsc	status,0,c
  5874  002414  D010               	goto	l4120
  5875                           
  5876                           ; BSR set to: 0
  5877  002416  0100               	movlb	0	; () banked
  5878  002418  516F               	movf	___ftadd@exp1& (0+255),w,b
  5879  00241A  0800               	sublw	0
  5880  00241C  0100               	movlb	0	; () banked
  5881  00241E  256E               	addwf	___ftadd@exp2& (0+255),w,b
  5882  002420  6E39               	movwf	??___ftadd& (0+255),c
  5883  002422  0E18               	movlw	24
  5884  002424  6439               	cpfsgt	??___ftadd,c
  5885  002426  D007               	goto	l4120
  5886  002428                     l790:
  5887                           
  5888                           ; BSR set to: 0
  5889  002428  C06A  F067         	movff	___ftadd@f2,?___ftadd
  5890  00242C  C06B  F068         	movff	___ftadd@f2+1,?___ftadd+1
  5891  002430  C06C  F069         	movff	___ftadd@f2+2,?___ftadd+2
  5892  002434  0012               	return	
  5893  002436                     l4120:
  5894                           
  5895                           ; BSR set to: 0
  5896  002436  0100               	movlb	0	; () banked
  5897  002438  516E               	movf	___ftadd@exp2& (0+255),w,b
  5898  00243A  0100               	movlb	0	; () banked
  5899  00243C  B4D8               	btfsc	status,2,c
  5900  00243E  D00F               	goto	l794
  5901                           
  5902                           ; BSR set to: 0
  5903  002440  0100               	movlb	0	; () banked
  5904  002442  516F               	movf	___ftadd@exp1& (0+255),w,b
  5905  002444  0100               	movlb	0	; () banked
  5906  002446  5D6E               	subwf	___ftadd@exp2& (0+255),w,b
  5907  002448  B0D8               	btfsc	status,0,c
  5908  00244A  D010               	goto	l4126
  5909                           
  5910                           ; BSR set to: 0
  5911  00244C  0100               	movlb	0	; () banked
  5912  00244E  516E               	movf	___ftadd@exp2& (0+255),w,b
  5913  002450  0800               	sublw	0
  5914  002452  0100               	movlb	0	; () banked
  5915  002454  256F               	addwf	___ftadd@exp1& (0+255),w,b
  5916  002456  6E39               	movwf	??___ftadd& (0+255),c
  5917  002458  0E18               	movlw	24
  5918  00245A  6439               	cpfsgt	??___ftadd,c
  5919  00245C  D007               	goto	l4126
  5920  00245E                     l794:
  5921                           
  5922                           ; BSR set to: 0
  5923  00245E  C067  F067         	movff	___ftadd@f1,?___ftadd
  5924  002462  C068  F068         	movff	___ftadd@f1+1,?___ftadd+1
  5925  002466  C069  F069         	movff	___ftadd@f1+2,?___ftadd+2
  5926  00246A  0012               	return	
  5927  00246C                     l4126:
  5928                           
  5929                           ; BSR set to: 0
  5930  00246C  0E06               	movlw	6
  5931  00246E  0100               	movlb	0	; () banked
  5932  002470  6F6D               	movwf	___ftadd@sign& (0+255),b
  5933                           
  5934                           ; BSR set to: 0
  5935  002472  0100               	movlb	0	; () banked
  5936  002474  AF69               	btfss	(___ftadd@f1+2)& (0+255),7,b
  5937  002476  D002               	goto	l4132
  5938                           
  5939                           ; BSR set to: 0
  5940  002478  0100               	movlb	0	; () banked
  5941  00247A  8F6D               	bsf	___ftadd@sign& (0+255),7,b
  5942  00247C                     l4132:
  5943                           
  5944                           ; BSR set to: 0
  5945  00247C  0100               	movlb	0	; () banked
  5946  00247E  AF6C               	btfss	(___ftadd@f2+2)& (0+255),7,b
  5947  002480  D002               	goto	l796
  5948                           
  5949                           ; BSR set to: 0
  5950  002482  0100               	movlb	0	; () banked
  5951  002484  8D6D               	bsf	___ftadd@sign& (0+255),6,b
  5952  002486                     l796:
  5953                           
  5954                           ; BSR set to: 0
  5955  002486  0100               	movlb	0	; () banked
  5956  002488  8F68               	bsf	(___ftadd@f1+1)& (0+255),7,b
  5957                           
  5958                           ; BSR set to: 0
  5959  00248A  0EFF               	movlw	255
  5960  00248C  0100               	movlb	0	; () banked
  5961  00248E  1767               	andwf	___ftadd@f1& (0+255),f,b
  5962  002490  0EFF               	movlw	255
  5963  002492  0100               	movlb	0	; () banked
  5964  002494  1768               	andwf	(___ftadd@f1+1)& (0+255),f,b
  5965  002496  0E00               	movlw	0
  5966  002498  0100               	movlb	0	; () banked
  5967  00249A  1769               	andwf	(___ftadd@f1+2)& (0+255),f,b
  5968  00249C  0100               	movlb	0	; () banked
  5969  00249E  8F6B               	bsf	(___ftadd@f2+1)& (0+255),7,b
  5970                           
  5971                           ; BSR set to: 0
  5972  0024A0  0EFF               	movlw	255
  5973  0024A2  0100               	movlb	0	; () banked
  5974  0024A4  176A               	andwf	___ftadd@f2& (0+255),f,b
  5975  0024A6  0EFF               	movlw	255
  5976  0024A8  0100               	movlb	0	; () banked
  5977  0024AA  176B               	andwf	(___ftadd@f2+1)& (0+255),f,b
  5978  0024AC  0E00               	movlw	0
  5979  0024AE  0100               	movlb	0	; () banked
  5980  0024B0  176C               	andwf	(___ftadd@f2+2)& (0+255),f,b
  5981                           
  5982                           ; BSR set to: 0
  5983  0024B2  0100               	movlb	0	; () banked
  5984  0024B4  516E               	movf	___ftadd@exp2& (0+255),w,b
  5985  0024B6  0100               	movlb	0	; () banked
  5986  0024B8  5D6F               	subwf	___ftadd@exp1& (0+255),w,b
  5987  0024BA  B0D8               	btfsc	status,0,c
  5988  0024BC  D024               	goto	l4152
  5989  0024BE                     l4142:
  5990                           
  5991                           ; BSR set to: 0
  5992  0024BE  0100               	movlb	0	; () banked
  5993  0024C0  90D8               	bcf	status,0,c
  5994  0024C2  376A               	rlcf	___ftadd@f2& (0+255),f,b
  5995  0024C4  376B               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  5996  0024C6  376C               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  5997  0024C8  0100               	movlb	0	; () banked
  5998  0024CA  076E               	decf	___ftadd@exp2& (0+255),f,b
  5999                           
  6000                           ; BSR set to: 0
  6001  0024CC  0100               	movlb	0	; () banked
  6002  0024CE  516F               	movf	___ftadd@exp1& (0+255),w,b
  6003  0024D0  0100               	movlb	0	; () banked
  6004  0024D2  196E               	xorwf	___ftadd@exp2& (0+255),w,b
  6005  0024D4  B4D8               	btfsc	status,2,c
  6006  0024D6  D010               	goto	l4150
  6007                           
  6008                           ; BSR set to: 0
  6009  0024D8  0100               	movlb	0	; () banked
  6010  0024DA  076D               	decf	___ftadd@sign& (0+255),f,b
  6011  0024DC  C06D  F039         	movff	___ftadd@sign,??___ftadd
  6012  0024E0  0E07               	movlw	7
  6013  0024E2  1639               	andwf	??___ftadd,f,c
  6014  0024E4  B4D8               	btfsc	status,2,c
  6015  0024E6  D008               	goto	l4150
  6016  0024E8  D7EA               	goto	l4142
  6017  0024EA                     l4148:
  6018                           
  6019                           ; BSR set to: 0
  6020  0024EA  0100               	movlb	0	; () banked
  6021  0024EC  90D8               	bcf	status,0,c
  6022  0024EE  3369               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6023  0024F0  3368               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6024  0024F2  3367               	rrcf	___ftadd@f1& (0+255),f,b
  6025  0024F4  0100               	movlb	0	; () banked
  6026  0024F6  2B6F               	incf	___ftadd@exp1& (0+255),f,b
  6027  0024F8                     l4150:
  6028                           
  6029                           ; BSR set to: 0
  6030  0024F8  0100               	movlb	0	; () banked
  6031  0024FA  516E               	movf	___ftadd@exp2& (0+255),w,b
  6032  0024FC  0100               	movlb	0	; () banked
  6033  0024FE  196F               	xorwf	___ftadd@exp1& (0+255),w,b
  6034  002500  B4D8               	btfsc	status,2,c
  6035  002502  D02A               	goto	l805
  6036  002504  D7F2               	goto	l4148
  6037  002506                     l4152:
  6038                           
  6039                           ; BSR set to: 0
  6040  002506  0100               	movlb	0	; () banked
  6041  002508  516F               	movf	___ftadd@exp1& (0+255),w,b
  6042  00250A  0100               	movlb	0	; () banked
  6043  00250C  5D6E               	subwf	___ftadd@exp2& (0+255),w,b
  6044  00250E  B0D8               	btfsc	status,0,c
  6045  002510  D023               	goto	l805
  6046  002512                     l4154:
  6047                           
  6048                           ; BSR set to: 0
  6049  002512  0100               	movlb	0	; () banked
  6050  002514  90D8               	bcf	status,0,c
  6051  002516  3767               	rlcf	___ftadd@f1& (0+255),f,b
  6052  002518  3768               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6053  00251A  3769               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6054  00251C  0100               	movlb	0	; () banked
  6055  00251E  076F               	decf	___ftadd@exp1& (0+255),f,b
  6056                           
  6057                           ; BSR set to: 0
  6058  002520  0100               	movlb	0	; () banked
  6059  002522  516F               	movf	___ftadd@exp1& (0+255),w,b
  6060  002524  0100               	movlb	0	; () banked
  6061  002526  196E               	xorwf	___ftadd@exp2& (0+255),w,b
  6062  002528  B4D8               	btfsc	status,2,c
  6063  00252A  D010               	goto	l4162
  6064                           
  6065                           ; BSR set to: 0
  6066  00252C  0100               	movlb	0	; () banked
  6067  00252E  076D               	decf	___ftadd@sign& (0+255),f,b
  6068  002530  C06D  F039         	movff	___ftadd@sign,??___ftadd
  6069  002534  0E07               	movlw	7
  6070  002536  1639               	andwf	??___ftadd,f,c
  6071  002538  B4D8               	btfsc	status,2,c
  6072  00253A  D008               	goto	l4162
  6073  00253C  D7EA               	goto	l4154
  6074  00253E                     l4160:
  6075                           
  6076                           ; BSR set to: 0
  6077  00253E  0100               	movlb	0	; () banked
  6078  002540  90D8               	bcf	status,0,c
  6079  002542  336C               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6080  002544  336B               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6081  002546  336A               	rrcf	___ftadd@f2& (0+255),f,b
  6082  002548  0100               	movlb	0	; () banked
  6083  00254A  2B6E               	incf	___ftadd@exp2& (0+255),f,b
  6084  00254C                     l4162:
  6085                           
  6086                           ; BSR set to: 0
  6087  00254C  0100               	movlb	0	; () banked
  6088  00254E  516E               	movf	___ftadd@exp2& (0+255),w,b
  6089  002550  0100               	movlb	0	; () banked
  6090  002552  196F               	xorwf	___ftadd@exp1& (0+255),w,b
  6091  002554  A4D8               	btfss	status,2,c
  6092  002556  D7F3               	goto	l4160
  6093  002558                     l805:
  6094                           
  6095                           ; BSR set to: 0
  6096  002558  0100               	movlb	0	; () banked
  6097  00255A  AF6D               	btfss	___ftadd@sign& (0+255),7,b
  6098  00255C  D012               	goto	l814
  6099                           
  6100                           ; BSR set to: 0
  6101  00255E  0EFF               	movlw	255
  6102  002560  0100               	movlb	0	; () banked
  6103  002562  1B67               	xorwf	___ftadd@f1& (0+255),f,b
  6104  002564  0EFF               	movlw	255
  6105  002566  0100               	movlb	0	; () banked
  6106  002568  1B68               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6107  00256A  0EFF               	movlw	255
  6108  00256C  0100               	movlb	0	; () banked
  6109  00256E  1B69               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6110  002570  0E01               	movlw	1
  6111  002572  0100               	movlb	0	; () banked
  6112  002574  2767               	addwf	___ftadd@f1& (0+255),f,b
  6113  002576  0E00               	movlw	0
  6114  002578  0100               	movlb	0	; () banked
  6115  00257A  2368               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6116  00257C  0E00               	movlw	0
  6117  00257E  0100               	movlb	0	; () banked
  6118  002580  2369               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6119  002582                     l814:
  6120                           
  6121                           ; BSR set to: 0
  6122  002582  0100               	movlb	0	; () banked
  6123  002584  AD6D               	btfss	___ftadd@sign& (0+255),6,b
  6124  002586  D012               	goto	l4168
  6125                           
  6126                           ; BSR set to: 0
  6127  002588  0EFF               	movlw	255
  6128  00258A  0100               	movlb	0	; () banked
  6129  00258C  1B6A               	xorwf	___ftadd@f2& (0+255),f,b
  6130  00258E  0EFF               	movlw	255
  6131  002590  0100               	movlb	0	; () banked
  6132  002592  1B6B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6133  002594  0EFF               	movlw	255
  6134  002596  0100               	movlb	0	; () banked
  6135  002598  1B6C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6136  00259A  0E01               	movlw	1
  6137  00259C  0100               	movlb	0	; () banked
  6138  00259E  276A               	addwf	___ftadd@f2& (0+255),f,b
  6139  0025A0  0E00               	movlw	0
  6140  0025A2  0100               	movlb	0	; () banked
  6141  0025A4  236B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6142  0025A6  0E00               	movlw	0
  6143  0025A8  0100               	movlb	0	; () banked
  6144  0025AA  236C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6145  0025AC                     l4168:
  6146                           
  6147                           ; BSR set to: 0
  6148  0025AC  0E00               	movlw	0
  6149  0025AE  0100               	movlb	0	; () banked
  6150  0025B0  6F6D               	movwf	___ftadd@sign& (0+255),b
  6151                           
  6152                           ; BSR set to: 0
  6153  0025B2  0100               	movlb	0	; () banked
  6154  0025B4  5167               	movf	___ftadd@f1& (0+255),w,b
  6155  0025B6  0100               	movlb	0	; () banked
  6156  0025B8  276A               	addwf	___ftadd@f2& (0+255),f,b
  6157  0025BA  0100               	movlb	0	; () banked
  6158  0025BC  5168               	movf	(___ftadd@f1+1)& (0+255),w,b
  6159  0025BE  0100               	movlb	0	; () banked
  6160  0025C0  236B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6161  0025C2  0100               	movlb	0	; () banked
  6162  0025C4  5169               	movf	(___ftadd@f1+2)& (0+255),w,b
  6163  0025C6  0100               	movlb	0	; () banked
  6164  0025C8  236C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6165                           
  6166                           ; BSR set to: 0
  6167  0025CA  0100               	movlb	0	; () banked
  6168  0025CC  AF6C               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6169  0025CE  D015               	goto	l4178
  6170                           
  6171                           ; BSR set to: 0
  6172  0025D0  0EFF               	movlw	255
  6173  0025D2  0100               	movlb	0	; () banked
  6174  0025D4  1B6A               	xorwf	___ftadd@f2& (0+255),f,b
  6175  0025D6  0EFF               	movlw	255
  6176  0025D8  0100               	movlb	0	; () banked
  6177  0025DA  1B6B               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6178  0025DC  0EFF               	movlw	255
  6179  0025DE  0100               	movlb	0	; () banked
  6180  0025E0  1B6C               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6181  0025E2  0E01               	movlw	1
  6182  0025E4  0100               	movlb	0	; () banked
  6183  0025E6  276A               	addwf	___ftadd@f2& (0+255),f,b
  6184  0025E8  0E00               	movlw	0
  6185  0025EA  0100               	movlb	0	; () banked
  6186  0025EC  236B               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6187  0025EE  0E00               	movlw	0
  6188  0025F0  0100               	movlb	0	; () banked
  6189  0025F2  236C               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6190                           
  6191                           ; BSR set to: 0
  6192  0025F4  0E01               	movlw	1
  6193  0025F6  0100               	movlb	0	; () banked
  6194  0025F8  6F6D               	movwf	___ftadd@sign& (0+255),b
  6195  0025FA                     l4178:
  6196                           
  6197                           ; BSR set to: 0
  6198  0025FA  C06A  F013         	movff	___ftadd@f2,___ftpack@arg
  6199  0025FE  C06B  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  6200  002602  C06C  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  6201  002606  C06F  F016         	movff	___ftadd@exp1,___ftpack@exp
  6202  00260A  C06D  F017         	movff	___ftadd@sign,___ftpack@sign
  6203  00260E  EC17  F018         	call	___ftpack	;wreg free
  6204  002612  C013  F067         	movff	?___ftpack,?___ftadd
  6205  002616  C014  F068         	movff	?___ftpack+1,?___ftadd+1
  6206  00261A  C015  F069         	movff	?___ftpack+2,?___ftadd+2
  6207  00261E  0012               	return	
  6208  002620                     __end_of___ftadd:
  6209                           	opt stack 0
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           intcon	equ	0xFF2
  6217                           postinc0	equ	0xFEE
  6218                           wreg	equ	0xFE8
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function ___ftneg *****************
  6227 ;; Defined at:
  6228 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  f1              3   18[COMRAM] float 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;		None
  6233 ;; Return value:  Size  Location     Type
  6234 ;;                  3   18[COMRAM] float 
  6235 ;; Registers used:
  6236 ;;		wreg, status,2, status,0
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6242 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;Total ram usage:        3 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    4
  6249 ;; This function calls:
  6250 ;;		Nothing
  6251 ;; This function is called by:
  6252 ;;		_sprintf
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text17
  6257  00379C                     __ptext17:
  6258                           	opt stack 0
  6259  00379C                     ___ftneg:
  6260                           	opt stack 25
  6261                           
  6262                           ;incstack = 0
  6263  00379C  5013               	movf	___ftneg@f1,w,c
  6264  00379E  1014               	iorwf	___ftneg@f1+1,w,c
  6265  0037A0  1015               	iorwf	___ftneg@f1+2,w,c
  6266  0037A2  B4D8               	btfsc	status,2,c
  6267  0037A4  D006               	goto	l864
  6268  0037A6  0E00               	movlw	0
  6269  0037A8  1A13               	xorwf	___ftneg@f1,f,c
  6270  0037AA  0E00               	movlw	0
  6271  0037AC  1A14               	xorwf	___ftneg@f1+1,f,c
  6272  0037AE  0E80               	movlw	128
  6273  0037B0  1A15               	xorwf	___ftneg@f1+2,f,c
  6274  0037B2                     l864:
  6275  0037B2  C013  F013         	movff	___ftneg@f1,?___ftneg
  6276  0037B6  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  6277  0037BA  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  6278  0037BE  0012               	return		;funcret
  6279  0037C0                     __end_of___ftneg:
  6280                           	opt stack 0
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon	equ	0xFF2
  6288                           postinc0	equ	0xFEE
  6289                           wreg	equ	0xFE8
  6290                           indf2	equ	0xFDF
  6291                           postinc2	equ	0xFDE
  6292                           postdec2	equ	0xFDD
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function ___ftge *****************
  6298 ;; Defined at:
  6299 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;  ff1             3   18[COMRAM] float 
  6302 ;;  ff2             3   21[COMRAM] float 
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:        9 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    4
  6321 ;; This function calls:
  6322 ;;		Nothing
  6323 ;; This function is called by:
  6324 ;;		_sprintf
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text18
  6329  0030DC                     __ptext18:
  6330                           	opt stack 0
  6331  0030DC                     ___ftge:
  6332                           	opt stack 25
  6333                           
  6334                           ;incstack = 0
  6335  0030DC  AE15               	btfss	___ftge@ff1+2,7,c
  6336  0030DE  D016               	goto	l3202
  6337  0030E0  C013  F019         	movff	___ftge@ff1,??___ftge
  6338  0030E4  C014  F01A         	movff	___ftge@ff1+1,??___ftge+1
  6339  0030E8  C015  F01B         	movff	___ftge@ff1+2,??___ftge+2
  6340  0030EC  1E19               	comf	??___ftge,f,c
  6341  0030EE  1E1A               	comf	??___ftge+1,f,c
  6342  0030F0  1E1B               	comf	??___ftge+2,f,c
  6343  0030F2  2A19               	incf	??___ftge,f,c
  6344  0030F4  0E00               	movlw	0
  6345  0030F6  221A               	addwfc	??___ftge+1,f,c
  6346  0030F8  221B               	addwfc	??___ftge+2,f,c
  6347  0030FA  0E00               	movlw	0
  6348  0030FC  2419               	addwf	??___ftge,w,c
  6349  0030FE  6E13               	movwf	___ftge@ff1,c
  6350  003100  0E00               	movlw	0
  6351  003102  201A               	addwfc	??___ftge+1,w,c
  6352  003104  6E14               	movwf	___ftge@ff1+1,c
  6353  003106  0E80               	movlw	128
  6354  003108  201B               	addwfc	??___ftge+2,w,c
  6355  00310A  6E15               	movwf	___ftge@ff1+2,c
  6356  00310C                     l3202:
  6357  00310C  AE18               	btfss	___ftge@ff2+2,7,c
  6358  00310E  D016               	goto	l3206
  6359  003110  C016  F019         	movff	___ftge@ff2,??___ftge
  6360  003114  C017  F01A         	movff	___ftge@ff2+1,??___ftge+1
  6361  003118  C018  F01B         	movff	___ftge@ff2+2,??___ftge+2
  6362  00311C  1E19               	comf	??___ftge,f,c
  6363  00311E  1E1A               	comf	??___ftge+1,f,c
  6364  003120  1E1B               	comf	??___ftge+2,f,c
  6365  003122  2A19               	incf	??___ftge,f,c
  6366  003124  0E00               	movlw	0
  6367  003126  221A               	addwfc	??___ftge+1,f,c
  6368  003128  221B               	addwfc	??___ftge+2,f,c
  6369  00312A  0E00               	movlw	0
  6370  00312C  2419               	addwf	??___ftge,w,c
  6371  00312E  6E16               	movwf	___ftge@ff2,c
  6372  003130  0E00               	movlw	0
  6373  003132  201A               	addwfc	??___ftge+1,w,c
  6374  003134  6E17               	movwf	___ftge@ff2+1,c
  6375  003136  0E80               	movlw	128
  6376  003138  201B               	addwfc	??___ftge+2,w,c
  6377  00313A  6E18               	movwf	___ftge@ff2+2,c
  6378  00313C                     l3206:
  6379  00313C  0E00               	movlw	0
  6380  00313E  1A13               	xorwf	___ftge@ff1,f,c
  6381  003140  0E00               	movlw	0
  6382  003142  1A14               	xorwf	___ftge@ff1+1,f,c
  6383  003144  0E80               	movlw	128
  6384  003146  1A15               	xorwf	___ftge@ff1+2,f,c
  6385  003148  0E00               	movlw	0
  6386  00314A  1A16               	xorwf	___ftge@ff2,f,c
  6387  00314C  0E00               	movlw	0
  6388  00314E  1A17               	xorwf	___ftge@ff2+1,f,c
  6389  003150  0E80               	movlw	128
  6390  003152  1A18               	xorwf	___ftge@ff2+2,f,c
  6391  003154  5016               	movf	___ftge@ff2,w,c
  6392  003156  5C13               	subwf	___ftge@ff1,w,c
  6393  003158  5017               	movf	___ftge@ff2+1,w,c
  6394  00315A  5814               	subwfb	___ftge@ff1+1,w,c
  6395  00315C  5018               	movf	___ftge@ff2+2,w,c
  6396  00315E  5815               	subwfb	___ftge@ff1+2,w,c
  6397  003160  B0D8               	btfsc	status,0,c
  6398  003162  D002               	goto	l3212
  6399  003164  90D8               	bcf	status,0,c
  6400  003166  0012               	return	
  6401  003168                     l3212:
  6402  003168  80D8               	bsf	status,0,c
  6403  00316A  0012               	return	
  6404  00316C                     __end_of___ftge:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           postdec2	equ	0xFDD
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function ___lwtoft *****************
  6423 ;; Defined at:
  6424 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  c               2   26[COMRAM] unsigned int 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  3   26[COMRAM] float 
  6431 ;; Registers used:
  6432 ;;		wreg, status,2, status,0, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6438 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6441 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6442 ;;Total ram usage:        3 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    5
  6445 ;; This function calls:
  6446 ;;		___ftpack
  6447 ;; This function is called by:
  6448 ;;		_main
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           	psect	text19
  6453  0037C0                     __ptext19:
  6454                           	opt stack 0
  6455  0037C0                     ___lwtoft:
  6456                           	opt stack 25
  6457                           
  6458                           ;incstack = 0
  6459  0037C0  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  6460  0037C4  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  6461  0037C8  6A15               	clrf	___ftpack@arg+2,c
  6462  0037CA  0E8E               	movlw	142
  6463  0037CC  6E16               	movwf	___ftpack@exp,c
  6464  0037CE  0E00               	movlw	0
  6465  0037D0  6E17               	movwf	___ftpack@sign,c
  6466  0037D2  EC17  F018         	call	___ftpack	;wreg free
  6467  0037D6  C013  F01B         	movff	?___ftpack,?___lwtoft
  6468  0037DA  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  6469  0037DE  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  6470  0037E2  0012               	return	
  6471  0037E4                     __end_of___lwtoft:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           intcon	equ	0xFF2
  6480                           postinc0	equ	0xFEE
  6481                           wreg	equ	0xFE8
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           postdec2	equ	0xFDD
  6485                           fsr2h	equ	0xFDA
  6486                           fsr2l	equ	0xFD9
  6487                           status	equ	0xFD8
  6488                           
  6489 ;; *************** function ___ftpack *****************
  6490 ;; Defined at:
  6491 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;  arg             3   18[COMRAM] unsigned um
  6494 ;;  exp             1   21[COMRAM] unsigned char 
  6495 ;;  sign            1   22[COMRAM] unsigned char 
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;		None
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  3   18[COMRAM] float 
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6507 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;Total ram usage:        8 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    4
  6514 ;; This function calls:
  6515 ;;		Nothing
  6516 ;; This function is called by:
  6517 ;;		___ftadd
  6518 ;;		___ftmul
  6519 ;;		___lltoft
  6520 ;;		___lwtoft
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text20
  6525  00302E                     __ptext20:
  6526                           	opt stack 0
  6527  00302E                     ___ftpack:
  6528                           	opt stack 23
  6529                           
  6530                           ;incstack = 0
  6531  00302E  5016               	movf	___ftpack@exp,w,c
  6532  003030  B4D8               	btfsc	status,2,c
  6533  003032  D005               	goto	l4074
  6534  003034  5013               	movf	___ftpack@arg,w,c
  6535  003036  1014               	iorwf	___ftpack@arg+1,w,c
  6536  003038  1015               	iorwf	___ftpack@arg+2,w,c
  6537  00303A  A4D8               	btfss	status,2,c
  6538  00303C  D00C               	goto	l4080
  6539  00303E                     l4074:
  6540  00303E  0E00               	movlw	0
  6541  003040  6E13               	movwf	?___ftpack,c
  6542  003042  0E00               	movlw	0
  6543  003044  6E14               	movwf	?___ftpack+1,c
  6544  003046  0E00               	movlw	0
  6545  003048  6E15               	movwf	?___ftpack+2,c
  6546  00304A  0012               	return	
  6547  00304C                     l4078:
  6548  00304C  2A16               	incf	___ftpack@exp,f,c
  6549  00304E  90D8               	bcf	status,0,c
  6550  003050  3215               	rrcf	___ftpack@arg+2,f,c
  6551  003052  3214               	rrcf	___ftpack@arg+1,f,c
  6552  003054  3213               	rrcf	___ftpack@arg,f,c
  6553  003056                     l4080:
  6554  003056  0E00               	movlw	0
  6555  003058  1413               	andwf	___ftpack@arg,w,c
  6556  00305A  6E18               	movwf	??___ftpack& (0+255),c
  6557  00305C  0E00               	movlw	0
  6558  00305E  1414               	andwf	___ftpack@arg+1,w,c
  6559  003060  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6560  003062  0EFE               	movlw	254
  6561  003064  1415               	andwf	___ftpack@arg+2,w,c
  6562  003066  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6563  003068  5018               	movf	??___ftpack,w,c
  6564  00306A  1019               	iorwf	??___ftpack+1,w,c
  6565  00306C  101A               	iorwf	??___ftpack+2,w,c
  6566  00306E  B4D8               	btfsc	status,2,c
  6567  003070  D00C               	goto	l4086
  6568  003072  D7EC               	goto	l4078
  6569  003074                     l4082:
  6570  003074  2A16               	incf	___ftpack@exp,f,c
  6571  003076  0E01               	movlw	1
  6572  003078  2613               	addwf	___ftpack@arg,f,c
  6573  00307A  0E00               	movlw	0
  6574  00307C  2214               	addwfc	___ftpack@arg+1,f,c
  6575  00307E  0E00               	movlw	0
  6576  003080  2215               	addwfc	___ftpack@arg+2,f,c
  6577  003082  90D8               	bcf	status,0,c
  6578  003084  3215               	rrcf	___ftpack@arg+2,f,c
  6579  003086  3214               	rrcf	___ftpack@arg+1,f,c
  6580  003088  3213               	rrcf	___ftpack@arg,f,c
  6581  00308A                     l4086:
  6582  00308A  0E00               	movlw	0
  6583  00308C  1413               	andwf	___ftpack@arg,w,c
  6584  00308E  6E18               	movwf	??___ftpack& (0+255),c
  6585  003090  0E00               	movlw	0
  6586  003092  1414               	andwf	___ftpack@arg+1,w,c
  6587  003094  6E19               	movwf	(??___ftpack+1)& (0+255),c
  6588  003096  0EFF               	movlw	255
  6589  003098  1415               	andwf	___ftpack@arg+2,w,c
  6590  00309A  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  6591  00309C  5018               	movf	??___ftpack,w,c
  6592  00309E  1019               	iorwf	??___ftpack+1,w,c
  6593  0030A0  101A               	iorwf	??___ftpack+2,w,c
  6594  0030A2  B4D8               	btfsc	status,2,c
  6595  0030A4  D006               	goto	l4090
  6596  0030A6  D7E6               	goto	l4082
  6597  0030A8                     l4088:
  6598  0030A8  0616               	decf	___ftpack@exp,f,c
  6599  0030AA  90D8               	bcf	status,0,c
  6600  0030AC  3613               	rlcf	___ftpack@arg,f,c
  6601  0030AE  3614               	rlcf	___ftpack@arg+1,f,c
  6602  0030B0  3615               	rlcf	___ftpack@arg+2,f,c
  6603  0030B2                     l4090:
  6604  0030B2  BE14               	btfsc	___ftpack@arg+1,7,c
  6605  0030B4  D003               	goto	l767
  6606  0030B6  0E02               	movlw	2
  6607  0030B8  6016               	cpfslt	___ftpack@exp,c
  6608  0030BA  D7F6               	goto	l4088
  6609  0030BC                     l767:
  6610  0030BC  A016               	btfss	___ftpack@exp,0,c
  6611  0030BE  9E14               	bcf	___ftpack@arg+1,7,c
  6612  0030C0  90D8               	bcf	status,0,c
  6613  0030C2  3216               	rrcf	___ftpack@exp,f,c
  6614  0030C4  5016               	movf	___ftpack@exp,w,c
  6615  0030C6  1215               	iorwf	___ftpack@arg+2,f,c
  6616  0030C8  5017               	movf	___ftpack@sign,w,c
  6617  0030CA  A4D8               	btfss	status,2,c
  6618  0030CC  8E15               	bsf	___ftpack@arg+2,7,c
  6619  0030CE  C013  F013         	movff	___ftpack@arg,?___ftpack
  6620  0030D2  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  6621  0030D6  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  6622  0030DA  0012               	return	
  6623  0030DC                     __end_of___ftpack:
  6624                           	opt stack 0
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           intcon	equ	0xFF2
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function _WriteTimer3 *****************
  6642 ;; Defined at:
  6643 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t3write.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;  timer3          2   18[COMRAM] unsigned int 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  timer           2   20[COMRAM] struct Timers
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		None
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;Total ram usage:        4 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    4
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_main
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text21
  6672  0038D2                     __ptext21:
  6673                           	opt stack 0
  6674  0038D2                     _WriteTimer3:
  6675                           	opt stack 26
  6676                           
  6677                           ;incstack = 0
  6678  0038D2  C013  F015         	movff	WriteTimer3@timer3,WriteTimer3@timer
  6679  0038D6  C014  F016         	movff	WriteTimer3@timer3+1,WriteTimer3@timer+1
  6680  0038DA  C016  FFB3         	movff	WriteTimer3@timer+1,4019	;volatile
  6681  0038DE  C015  FFB2         	movff	WriteTimer3@timer,4018	;volatile
  6682  0038E2  0012               	return		;funcret
  6683  0038E4                     __end_of_WriteTimer3:
  6684                           	opt stack 0
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           postinc0	equ	0xFEE
  6693                           wreg	equ	0xFE8
  6694                           indf2	equ	0xFDF
  6695                           postinc2	equ	0xFDE
  6696                           postdec2	equ	0xFDD
  6697                           fsr2h	equ	0xFDA
  6698                           fsr2l	equ	0xFD9
  6699                           status	equ	0xFD8
  6700                           
  6701 ;; *************** function _TMR_SysTick_configure *****************
  6702 ;; Defined at:
  6703 ;;		line 86 in file "TMR_SysTick.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  interrupt_pr    1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  interrupt_pr    1   22[COMRAM] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, status,2, status,0, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    7
  6724 ;; This function calls:
  6725 ;;		TMR_SysTick@enable_interrupt
  6726 ;;		_reload_timer
  6727 ;;		_start_timer
  6728 ;; This function is called by:
  6729 ;;		_main
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text22
  6734  00374E                     __ptext22:
  6735                           	opt stack 0
  6736  00374E                     _TMR_SysTick_configure:
  6737                           	opt stack 23
  6738                           
  6739                           ;incstack = 0
  6740                           ;TMR_SysTick_configure@interrupt_priority stored from wreg
  6741  00374E  6E17               	movwf	TMR_SysTick_configure@interrupt_priority,c
  6742                           
  6743                           ;TMR_SysTick.c: 88: T0CON = 0x08;
  6744  003750  0E08               	movlw	8
  6745  003752  6ED5               	movwf	4053,c	;volatile
  6746                           
  6747                           ;TMR_SysTick.c: 89: TMR0H = 0;
  6748  003754  0E00               	movlw	0
  6749  003756  6ED7               	movwf	4055,c	;volatile
  6750                           
  6751                           ;TMR_SysTick.c: 90: TMR0L = 0;
  6752  003758  0E00               	movlw	0
  6753  00375A  6ED6               	movwf	4054,c	;volatile
  6754                           
  6755                           ;TMR_SysTick.c: 92: systick_tmr_reload = 65535 - (10000000 / 1000 / 4);
  6756  00375C  0EF6               	movlw	246
  6757  00375E  6E4B               	movwf	_systick_tmr_reload+1,c	;volatile
  6758  003760  0E3B               	movlw	59
  6759  003762  6E4A               	movwf	_systick_tmr_reload,c	;volatile
  6760                           
  6761                           ;TMR_SysTick.c: 94: reload_timer();
  6762  003764  EC8D  F01C         	call	_reload_timer	;wreg free
  6763                           
  6764                           ;TMR_SysTick.c: 96: systick_interrupt_priority = interrupt_priority;
  6765  003768  C017  F04C         	movff	TMR_SysTick_configure@interrupt_priority,_systick_interrupt_priority	;volatile
  6766                           
  6767                           ;TMR_SysTick.c: 98: enable_interrupt();
  6768  00376C  EC38  F01C         	call	TMR_SysTick@enable_interrupt	;wreg free
  6769                           
  6770                           ;TMR_SysTick.c: 100: start_timer();
  6771  003770  ECB4  F01C         	call	_start_timer	;wreg free
  6772  003774  0012               	return		;funcret
  6773  003776                     __end_of_TMR_SysTick_configure:
  6774                           	opt stack 0
  6775                           tblptru	equ	0xFF8
  6776                           tblptrh	equ	0xFF7
  6777                           tblptrl	equ	0xFF6
  6778                           tablat	equ	0xFF5
  6779                           prodh	equ	0xFF4
  6780                           prodl	equ	0xFF3
  6781                           intcon	equ	0xFF2
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           fsr2h	equ	0xFDA
  6788                           fsr2l	equ	0xFD9
  6789                           status	equ	0xFD8
  6790                           
  6791 ;; *************** function _start_timer *****************
  6792 ;; Defined at:
  6793 ;;		line 21 in file "TMR_SysTick.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;		None
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  1    wreg      void 
  6800 ;; Registers used:
  6801 ;;		None
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6811 ;;Total ram usage:        0 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    4
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_TMR_SysTick_configure
  6818 ;;		_TMR_SysTick_startTimer
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text23
  6823  003968                     __ptext23:
  6824                           	opt stack 0
  6825  003968                     _start_timer:
  6826                           	opt stack 25
  6827                           
  6828                           ;TMR_SysTick.c: 23: T0CONbits.TMR0ON = 1;
  6829                           
  6830                           ;incstack = 0
  6831  003968  8ED5               	bsf	4053,7,c	;volatile
  6832  00396A  0012               	return		;funcret
  6833  00396C                     __end_of_start_timer:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           intcon	equ	0xFF2
  6842                           postinc0	equ	0xFEE
  6843                           wreg	equ	0xFE8
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           postdec2	equ	0xFDD
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function TMR_SysTick@enable_interrupt *****************
  6852 ;; Defined at:
  6853 ;;		line 46 in file "TMR_SysTick.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;		None
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  1    wreg      void 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;Total ram usage:        0 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    6
  6874 ;; This function calls:
  6875 ;;		_reload_timer
  6876 ;; This function is called by:
  6877 ;;		_TMR_SysTick_configure
  6878 ;;		_TMR_SysTick_enableInterrupt
  6879 ;;		_TMR_SysTick_switchInterruptPriority
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text24
  6884  003870                     __ptext24:
  6885                           	opt stack 0
  6886  003870                     TMR_SysTick@enable_interrupt:
  6887                           	opt stack 23
  6888                           
  6889                           ;TMR_SysTick.c: 48: if(systick_interrupt_priority == 0) {
  6890                           
  6891                           ;incstack = 0
  6892  003870  504C               	movf	_systick_interrupt_priority,w,c	;volatile
  6893  003872  A4D8               	btfss	status,2,c
  6894  003874  D002               	goto	l2992
  6895                           
  6896                           ;TMR_SysTick.c: 49: INTCON2bits.TMR0IP = 0;
  6897  003876  94F1               	bcf	intcon2,2,c	;volatile
  6898                           
  6899                           ;TMR_SysTick.c: 50: }
  6900  003878  D003               	goto	l2996
  6901  00387A                     l2992:
  6902                           
  6903                           ;TMR_SysTick.c: 52: else if(systick_interrupt_priority == 1) {
  6904  00387A  044C               	decf	_systick_interrupt_priority,w,c	;volatile
  6905  00387C  B4D8               	btfsc	status,2,c
  6906                           
  6907                           ;TMR_SysTick.c: 53: INTCON2bits.TMR0IP = 1;
  6908  00387E  84F1               	bsf	intcon2,2,c	;volatile
  6909  003880                     l2996:
  6910                           
  6911                           ;TMR_SysTick.c: 54: }
  6912                           ;TMR_SysTick.c: 56: reload_timer();
  6913  003880  EC8D  F01C         	call	_reload_timer	;wreg free
  6914                           
  6915                           ;TMR_SysTick.c: 58: INTCONbits.TMR0IF = 0;
  6916  003884  94F2               	bcf	intcon,2,c	;volatile
  6917                           
  6918                           ;TMR_SysTick.c: 59: INTCONbits.TMR0IE = 1;
  6919  003886  8AF2               	bsf	intcon,5,c	;volatile
  6920  003888  0012               	return		;funcret
  6921  00388A                     __end_ofTMR_SysTick@enable_interrupt:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           intcon2	equ	0xFF1
  6931                           postinc0	equ	0xFEE
  6932                           wreg	equ	0xFE8
  6933                           indf2	equ	0xFDF
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           fsr2h	equ	0xFDA
  6937                           fsr2l	equ	0xFD9
  6938                           status	equ	0xFD8
  6939                           
  6940 ;; *************** function _reload_timer *****************
  6941 ;; Defined at:
  6942 ;;		line 33 in file "TMR_SysTick.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;		None
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;		None
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  1    wreg      void 
  6949 ;; Registers used:
  6950 ;;		cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;Total ram usage:        0 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    5
  6963 ;; This function calls:
  6964 ;;		_WriteTimer0
  6965 ;; This function is called by:
  6966 ;;		TMR_SysTick@enable_interrupt
  6967 ;;		_TMR_SysTick_configure
  6968 ;;		_TMR_SysTick_resetCounter
  6969 ;;		_TMR_SysTick_setCounter
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text25
  6974  00391A                     __ptext25:
  6975                           	opt stack 0
  6976  00391A                     _reload_timer:
  6977                           	opt stack 24
  6978                           
  6979                           ;TMR_SysTick.c: 35: WriteTimer0(systick_tmr_reload);
  6980                           
  6981                           ;incstack = 0
  6982  00391A  C04A  F013         	movff	_systick_tmr_reload,WriteTimer0@timer0	;volatile
  6983  00391E  C04B  F014         	movff	_systick_tmr_reload+1,WriteTimer0@timer0+1	;volatile
  6984  003922  EC72  F01C         	call	_WriteTimer0	;wreg free
  6985  003926  0012               	return		;funcret
  6986  003928                     __end_of_reload_timer:
  6987                           	opt stack 0
  6988                           tblptru	equ	0xFF8
  6989                           tblptrh	equ	0xFF7
  6990                           tblptrl	equ	0xFF6
  6991                           tablat	equ	0xFF5
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           intcon2	equ	0xFF1
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           indf2	equ	0xFDF
  6999                           postinc2	equ	0xFDE
  7000                           postdec2	equ	0xFDD
  7001                           fsr2h	equ	0xFDA
  7002                           fsr2l	equ	0xFD9
  7003                           status	equ	0xFD8
  7004                           
  7005 ;; *************** function _WriteTimer0 *****************
  7006 ;; Defined at:
  7007 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t0write.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  timer0          2   18[COMRAM] unsigned int 
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;  timer           2   20[COMRAM] struct Timers
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      void 
  7014 ;; Registers used:
  7015 ;;		None
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;Total ram usage:        4 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    4
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_reload_timer
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text26
  7036  0038E4                     __ptext26:
  7037                           	opt stack 0
  7038  0038E4                     _WriteTimer0:
  7039                           	opt stack 24
  7040                           
  7041                           ;incstack = 0
  7042  0038E4  C013  F015         	movff	WriteTimer0@timer0,WriteTimer0@timer
  7043  0038E8  C014  F016         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  7044  0038EC  C016  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  7045  0038F0  C015  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  7046  0038F4  0012               	return		;funcret
  7047  0038F6                     __end_of_WriteTimer0:
  7048                           	opt stack 0
  7049                           tblptru	equ	0xFF8
  7050                           tblptrh	equ	0xFF7
  7051                           tblptrl	equ	0xFF6
  7052                           tablat	equ	0xFF5
  7053                           prodh	equ	0xFF4
  7054                           prodl	equ	0xFF3
  7055                           intcon	equ	0xFF2
  7056                           intcon2	equ	0xFF1
  7057                           postinc0	equ	0xFEE
  7058                           wreg	equ	0xFE8
  7059                           indf2	equ	0xFDF
  7060                           postinc2	equ	0xFDE
  7061                           postdec2	equ	0xFDD
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function _IO_LED_configureIO *****************
  7067 ;; Defined at:
  7068 ;;		line 5 in file "IO_LED.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      void 
  7075 ;; Registers used:
  7076 ;;		None
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;Total ram usage:        0 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    4
  7089 ;; This function calls:
  7090 ;;		Nothing
  7091 ;; This function is called by:
  7092 ;;		_main
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text27
  7097  0038F6                     __ptext27:
  7098                           	opt stack 0
  7099  0038F6                     _IO_LED_configureIO:
  7100                           	opt stack 26
  7101                           
  7102                           ;IO_LED.c: 7: TRISHbits.TRISH0 = 0;
  7103                           
  7104                           ;incstack = 0
  7105  0038F6  9099               	bcf	3993,0,c	;volatile
  7106                           
  7107                           ;IO_LED.c: 8: TRISHbits.TRISH1 = 0;
  7108  0038F8  9299               	bcf	3993,1,c	;volatile
  7109                           
  7110                           ;IO_LED.c: 9: TRISHbits.TRISH2 = 0;
  7111  0038FA  9499               	bcf	3993,2,c	;volatile
  7112                           
  7113                           ;IO_LED.c: 10: TRISHbits.TRISH3 = 0;
  7114  0038FC  9699               	bcf	3993,3,c	;volatile
  7115                           
  7116                           ;IO_LED.c: 12: LATHbits.LATH0 = 1;
  7117  0038FE  8090               	bsf	3984,0,c	;volatile
  7118                           
  7119                           ;IO_LED.c: 13: LATHbits.LATH1 = 1;
  7120  003900  8290               	bsf	3984,1,c	;volatile
  7121                           
  7122                           ;IO_LED.c: 14: LATHbits.LATH2 = 1;
  7123  003902  8490               	bsf	3984,2,c	;volatile
  7124                           
  7125                           ;IO_LED.c: 15: LATHbits.LATH3 = 1;
  7126  003904  8690               	bsf	3984,3,c	;volatile
  7127  003906  0012               	return		;funcret
  7128  003908                     __end_of_IO_LED_configureIO:
  7129                           	opt stack 0
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           intcon	equ	0xFF2
  7137                           intcon2	equ	0xFF1
  7138                           postinc0	equ	0xFEE
  7139                           wreg	equ	0xFE8
  7140                           indf2	equ	0xFDF
  7141                           postinc2	equ	0xFDE
  7142                           postdec2	equ	0xFDD
  7143                           fsr2h	equ	0xFDA
  7144                           fsr2l	equ	0xFD9
  7145                           status	equ	0xFD8
  7146                           
  7147 ;; *************** function _IO_LCD_puts *****************
  7148 ;; Defined at:
  7149 ;;		line 243 in file "IO_LCD.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;  str             2   21[COMRAM] PTR unsigned char 
  7152 ;;		 -> main@buff(20), 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  i               1   23[COMRAM] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      void 
  7157 ;; Registers used:
  7158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7164 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;Total ram usage:        3 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    5
  7171 ;; This function calls:
  7172 ;;		_write_data
  7173 ;; This function is called by:
  7174 ;;		_main
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text28
  7179  0036E6                     __ptext28:
  7180                           	opt stack 0
  7181  0036E6                     _IO_LCD_puts:
  7182                           	opt stack 25
  7183                           
  7184                           ;IO_LCD.c: 245: char i =0;
  7185                           
  7186                           ;incstack = 0
  7187  0036E6  0E00               	movlw	0
  7188  0036E8  6E18               	movwf	IO_LCD_puts@i,c
  7189                           
  7190                           ;IO_LCD.c: 247: while(str[i] != (0)) {
  7191  0036EA  D00C               	goto	l3484
  7192  0036EC                     l3480:
  7193                           
  7194                           ;IO_LCD.c: 249: write_data(str[i]);
  7195  0036EC  5018               	movf	IO_LCD_puts@i,w,c
  7196  0036EE  0D01               	mullw	1
  7197  0036F0  50F3               	movf	prodl,w,c
  7198  0036F2  2416               	addwf	IO_LCD_puts@str,w,c
  7199  0036F4  6ED9               	movwf	fsr2l,c
  7200  0036F6  50F4               	movf	prodh,w,c
  7201  0036F8  2017               	addwfc	IO_LCD_puts@str+1,w,c
  7202  0036FA  6EDA               	movwf	fsr2h,c
  7203  0036FC  50DF               	movf	indf2,w,c
  7204  0036FE  ECCB  F015         	call	_write_data
  7205                           
  7206                           ;IO_LCD.c: 250: i++;
  7207  003702  2A18               	incf	IO_LCD_puts@i,f,c
  7208  003704                     l3484:
  7209  003704  5018               	movf	IO_LCD_puts@i,w,c
  7210  003706  0D01               	mullw	1
  7211  003708  50F3               	movf	prodl,w,c
  7212  00370A  2416               	addwf	IO_LCD_puts@str,w,c
  7213  00370C  6ED9               	movwf	fsr2l,c
  7214  00370E  50F4               	movf	prodh,w,c
  7215  003710  2017               	addwfc	IO_LCD_puts@str+1,w,c
  7216  003712  6EDA               	movwf	fsr2h,c
  7217  003714  50DF               	movf	indf2,w,c
  7218  003716  B4D8               	btfsc	status,2,c
  7219  003718  0012               	return	
  7220  00371A  D7E8               	goto	l3480
  7221  00371C                     __end_of_IO_LCD_puts:
  7222                           	opt stack 0
  7223                           tblptru	equ	0xFF8
  7224                           tblptrh	equ	0xFF7
  7225                           tblptrl	equ	0xFF6
  7226                           tablat	equ	0xFF5
  7227                           prodh	equ	0xFF4
  7228                           prodl	equ	0xFF3
  7229                           intcon	equ	0xFF2
  7230                           intcon2	equ	0xFF1
  7231                           postinc0	equ	0xFEE
  7232                           wreg	equ	0xFE8
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function _IO_LCD_putrs *****************
  7241 ;; Defined at:
  7242 ;;		line 256 in file "IO_LCD.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  str             2   21[COMRAM] PTR const unsigned char 
  7245 ;;		 -> STR_5(8), STR_4(8), STR_3(8), STR_2(13), 
  7246 ;;		 -> STR_1(15), 
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;  i               1   25[COMRAM] unsigned char 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;Total ram usage:        5 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    5
  7265 ;; This function calls:
  7266 ;;		_write_data
  7267 ;; This function is called by:
  7268 ;;		_main
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text29
  7273  0035B2                     __ptext29:
  7274                           	opt stack 0
  7275  0035B2                     _IO_LCD_putrs:
  7276                           	opt stack 25
  7277                           
  7278                           ;IO_LCD.c: 258: char i = 0;
  7279                           
  7280                           ;incstack = 0
  7281  0035B2  0E00               	movlw	0
  7282  0035B4  6E1A               	movwf	IO_LCD_putrs@i,c
  7283                           
  7284                           ;IO_LCD.c: 260: while(str[i] != (0)) {
  7285  0035B6  D015               	goto	l3492
  7286  0035B8                     l3488:
  7287                           
  7288                           ;IO_LCD.c: 262: write_data(str[i]);
  7289  0035B8  501A               	movf	IO_LCD_putrs@i,w,c
  7290  0035BA  0D01               	mullw	1
  7291  0035BC  C016  F018         	movff	IO_LCD_putrs@str,??_IO_LCD_putrs
  7292  0035C0  C017  F019         	movff	IO_LCD_putrs@str+1,??_IO_LCD_putrs+1
  7293  0035C4  50F3               	movf	prodl,w,c
  7294  0035C6  2618               	addwf	??_IO_LCD_putrs,f,c
  7295  0035C8  50F4               	movf	prodh,w,c
  7296  0035CA  2219               	addwfc	??_IO_LCD_putrs+1,f,c
  7297  0035CC  C018  FFF6         	movff	??_IO_LCD_putrs,tblptrl
  7298  0035D0  C019  FFF7         	movff	??_IO_LCD_putrs+1,tblptrh
  7299  0035D4                     	if	0	;tblptru may be non-zero
  7300  0035D4                     	endif
  7301  0035D4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7302  0035D4  0E00               	movlw	low (__mediumconst shr (0+16))
  7303  0035D6  6EF8               	movwf	tblptru,c
  7304  0035D8                     	endif
  7305  0035D8  0008               	tblrd		*
  7306  0035DA  50F5               	movf	tablat,w,c
  7307  0035DC  ECCB  F015         	call	_write_data
  7308                           
  7309                           ;IO_LCD.c: 263: i++;
  7310  0035E0  2A1A               	incf	IO_LCD_putrs@i,f,c
  7311  0035E2                     l3492:
  7312  0035E2  501A               	movf	IO_LCD_putrs@i,w,c
  7313  0035E4  0D01               	mullw	1
  7314  0035E6  C016  F018         	movff	IO_LCD_putrs@str,??_IO_LCD_putrs
  7315  0035EA  C017  F019         	movff	IO_LCD_putrs@str+1,??_IO_LCD_putrs+1
  7316  0035EE  50F3               	movf	prodl,w,c
  7317  0035F0  2618               	addwf	??_IO_LCD_putrs,f,c
  7318  0035F2  50F4               	movf	prodh,w,c
  7319  0035F4  2219               	addwfc	??_IO_LCD_putrs+1,f,c
  7320  0035F6  C018  FFF6         	movff	??_IO_LCD_putrs,tblptrl
  7321  0035FA  C019  FFF7         	movff	??_IO_LCD_putrs+1,tblptrh
  7322  0035FE                     	if	0	;tblptru may be non-zero
  7323  0035FE                     	endif
  7324  0035FE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7325  0035FE  0E00               	movlw	low (__mediumconst shr (0+16))
  7326  003600  6EF8               	movwf	tblptru,c
  7327  003602                     	endif
  7328  003602  0008               	tblrd		*
  7329  003604  50F5               	movf	tablat,w,c
  7330  003606  0900               	iorlw	0
  7331  003608  B4D8               	btfsc	status,2,c
  7332  00360A  0012               	return	
  7333  00360C  D7D5               	goto	l3488
  7334  00360E                     __end_of_IO_LCD_putrs:
  7335                           	opt stack 0
  7336                           tblptru	equ	0xFF8
  7337                           tblptrh	equ	0xFF7
  7338                           tblptrl	equ	0xFF6
  7339                           tablat	equ	0xFF5
  7340                           prodh	equ	0xFF4
  7341                           prodl	equ	0xFF3
  7342                           intcon	equ	0xFF2
  7343                           intcon2	equ	0xFF1
  7344                           postinc0	equ	0xFEE
  7345                           wreg	equ	0xFE8
  7346                           indf2	equ	0xFDF
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _write_data *****************
  7354 ;; Defined at:
  7355 ;;		line 84 in file "IO_LCD.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  data            1    wreg     unsigned char 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  data            1   20[COMRAM] unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;Total ram usage:        3 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    4
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_IO_LCD_puts
  7380 ;;		_IO_LCD_putrs
  7381 ;;		_IO_LCD_putc
  7382 ;;		_IO_LCD_putrc
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           	psect	text30
  7387  002B96                     __ptext30:
  7388                           	opt stack 0
  7389  002B96                     _write_data:
  7390                           	opt stack 25
  7391                           
  7392                           ;incstack = 0
  7393                           ;write_data@data stored from wreg
  7394  002B96  6E15               	movwf	write_data@data,c
  7395                           
  7396                           ;IO_LCD.c: 86: LATHbits.LATH7 = 1;
  7397  002B98  8E90               	bsf	3984,7,c	;volatile
  7398                           
  7399                           ;IO_LCD.c: 111: LATJbits.LATJ7 = (data >> 7) & 0x01;
  7400  002B9A  6A13               	clrf	??_write_data& (0+255),c
  7401  002B9C  AE15               	btfss	write_data@data,7,c
  7402  002B9E  D001               	bra	u3035
  7403  002BA0  2A13               	incf	??_write_data& (0+255),f,c
  7404  002BA2                     u3035:
  7405  002BA2  0E01               	movlw	1
  7406  002BA4  1613               	andwf	??_write_data,f,c
  7407  002BA6  3213               	rrcf	??_write_data,f,c
  7408  002BA8  3213               	rrcf	??_write_data,f,c
  7409  002BAA  5091               	movf	3985,w,c	;volatile
  7410  002BAC  1813               	xorwf	??_write_data,w,c
  7411  002BAE  0B7F               	andlw	-129
  7412  002BB0  1813               	xorwf	??_write_data,w,c
  7413  002BB2  6E91               	movwf	3985,c	;volatile
  7414                           
  7415                           ;IO_LCD.c: 112: LATJbits.LATJ6 = (data >> 6) & 0x01;
  7416  002BB4  C015  F013         	movff	write_data@data,??_write_data
  7417  002BB8  0E06               	movlw	6
  7418  002BBA  6E14               	movwf	(??_write_data+1)& (0+255),c
  7419  002BBC                     u3045:
  7420  002BBC  90D8               	bcf	status,0,c
  7421  002BBE  3213               	rrcf	??_write_data,f,c
  7422  002BC0  2E14               	decfsz	(??_write_data+1)& (0+255),f,c
  7423  002BC2  D7FC               	goto	u3045
  7424  002BC4  0E01               	movlw	1
  7425  002BC6  1613               	andwf	??_write_data,f,c
  7426  002BC8  3A13               	swapf	??_write_data,f,c
  7427  002BCA  4613               	rlncf	??_write_data,f,c
  7428  002BCC  4613               	rlncf	??_write_data,f,c
  7429  002BCE  5091               	movf	3985,w,c	;volatile
  7430  002BD0  1813               	xorwf	??_write_data,w,c
  7431  002BD2  0BBF               	andlw	-65
  7432  002BD4  1813               	xorwf	??_write_data,w,c
  7433  002BD6  6E91               	movwf	3985,c	;volatile
  7434                           
  7435                           ;IO_LCD.c: 113: LATJbits.LATJ5 = (data >> 5) & 0x01;
  7436  002BD8  C015  F013         	movff	write_data@data,??_write_data
  7437  002BDC  0E05               	movlw	5
  7438  002BDE  6E14               	movwf	(??_write_data+1)& (0+255),c
  7439  002BE0                     u3055:
  7440  002BE0  90D8               	bcf	status,0,c
  7441  002BE2  3213               	rrcf	??_write_data,f,c
  7442  002BE4  2E14               	decfsz	(??_write_data+1)& (0+255),f,c
  7443  002BE6  D7FC               	goto	u3055
  7444  002BE8  0E01               	movlw	1
  7445  002BEA  1613               	andwf	??_write_data,f,c
  7446  002BEC  3A13               	swapf	??_write_data,f,c
  7447  002BEE  4613               	rlncf	??_write_data,f,c
  7448  002BF0  5091               	movf	3985,w,c	;volatile
  7449  002BF2  1813               	xorwf	??_write_data,w,c
  7450  002BF4  0BDF               	andlw	-33
  7451  002BF6  1813               	xorwf	??_write_data,w,c
  7452  002BF8  6E91               	movwf	3985,c	;volatile
  7453                           
  7454                           ;IO_LCD.c: 114: LATJbits.LATJ4 = (data >> 4) & 0x01;
  7455  002BFA  C015  F013         	movff	write_data@data,??_write_data
  7456  002BFE  3A13               	swapf	??_write_data,f,c
  7457  002C00  0E0F               	movlw	15
  7458  002C02  1613               	andwf	??_write_data,f,c
  7459  002C04  0E01               	movlw	1
  7460  002C06  1613               	andwf	??_write_data,f,c
  7461  002C08  3A13               	swapf	??_write_data,f,c
  7462  002C0A  5091               	movf	3985,w,c	;volatile
  7463  002C0C  1813               	xorwf	??_write_data,w,c
  7464  002C0E  0BEF               	andlw	-17
  7465  002C10  1813               	xorwf	??_write_data,w,c
  7466  002C12  6E91               	movwf	3985,c	;volatile
  7467                           
  7468                           ;IO_LCD.c: 116: LATHbits.LATH6 = 1;
  7469  002C14  8C90               	bsf	3984,6,c	;volatile
  7470                           
  7471                           ;IO_LCD.c: 117: _delay((unsigned long)((20)*(10000000/4000000.0)));
  7472  002C16  0E10               	movlw	16
  7473  002C18                     u5887:
  7474  002C18  2EE8               	decfsz	wreg,f,c
  7475  002C1A  D7FE               	goto	u5887
  7476  002C1C  D000               	nop2		;nop
  7477                           
  7478                           ;IO_LCD.c: 118: LATHbits.LATH6 = 0;
  7479  002C1E  9C90               	bcf	3984,6,c	;volatile
  7480                           
  7481                           ;IO_LCD.c: 120: _delay((unsigned long)((20)*(10000000/4000000.0)));
  7482  002C20  0E10               	movlw	16
  7483  002C22                     u5897:
  7484  002C22  2EE8               	decfsz	wreg,f,c
  7485  002C24  D7FE               	goto	u5897
  7486  002C26  D000               	nop2		;nop
  7487                           
  7488                           ;IO_LCD.c: 122: LATJbits.LATJ7 = (data >> 3) & 0x01;
  7489  002C28  C015  F013         	movff	write_data@data,??_write_data
  7490  002C2C  90D8               	bcf	status,0,c
  7491  002C2E  3213               	rrcf	??_write_data,f,c
  7492  002C30  90D8               	bcf	status,0,c
  7493  002C32  3213               	rrcf	??_write_data,f,c
  7494  002C34  90D8               	bcf	status,0,c
  7495  002C36  3213               	rrcf	??_write_data,f,c
  7496  002C38  0E01               	movlw	1
  7497  002C3A  1613               	andwf	??_write_data,f,c
  7498  002C3C  3213               	rrcf	??_write_data,f,c
  7499  002C3E  3213               	rrcf	??_write_data,f,c
  7500  002C40  5091               	movf	3985,w,c	;volatile
  7501  002C42  1813               	xorwf	??_write_data,w,c
  7502  002C44  0B7F               	andlw	-129
  7503  002C46  1813               	xorwf	??_write_data,w,c
  7504  002C48  6E91               	movwf	3985,c	;volatile
  7505                           
  7506                           ;IO_LCD.c: 123: LATJbits.LATJ6 = (data >> 2) & 0x01;
  7507  002C4A  C015  F013         	movff	write_data@data,??_write_data
  7508  002C4E  90D8               	bcf	status,0,c
  7509  002C50  3213               	rrcf	??_write_data,f,c
  7510  002C52  90D8               	bcf	status,0,c
  7511  002C54  3213               	rrcf	??_write_data,f,c
  7512  002C56  0E01               	movlw	1
  7513  002C58  1613               	andwf	??_write_data,f,c
  7514  002C5A  3A13               	swapf	??_write_data,f,c
  7515  002C5C  4613               	rlncf	??_write_data,f,c
  7516  002C5E  4613               	rlncf	??_write_data,f,c
  7517  002C60  5091               	movf	3985,w,c	;volatile
  7518  002C62  1813               	xorwf	??_write_data,w,c
  7519  002C64  0BBF               	andlw	-65
  7520  002C66  1813               	xorwf	??_write_data,w,c
  7521  002C68  6E91               	movwf	3985,c	;volatile
  7522                           
  7523                           ;IO_LCD.c: 124: LATJbits.LATJ5 = (data >> 1) & 0x01;
  7524  002C6A  C015  F013         	movff	write_data@data,??_write_data
  7525  002C6E  90D8               	bcf	status,0,c
  7526  002C70  3213               	rrcf	??_write_data,f,c
  7527  002C72  0E01               	movlw	1
  7528  002C74  1613               	andwf	??_write_data,f,c
  7529  002C76  3A13               	swapf	??_write_data,f,c
  7530  002C78  4613               	rlncf	??_write_data,f,c
  7531  002C7A  5091               	movf	3985,w,c	;volatile
  7532  002C7C  1813               	xorwf	??_write_data,w,c
  7533  002C7E  0BDF               	andlw	-33
  7534  002C80  1813               	xorwf	??_write_data,w,c
  7535  002C82  6E91               	movwf	3985,c	;volatile
  7536                           
  7537                           ;IO_LCD.c: 125: LATJbits.LATJ4 = data & 0x01;
  7538  002C84  C015  F013         	movff	write_data@data,??_write_data
  7539  002C88  0E01               	movlw	1
  7540  002C8A  1613               	andwf	??_write_data,f,c
  7541  002C8C  3A13               	swapf	??_write_data,f,c
  7542  002C8E  5091               	movf	3985,w,c	;volatile
  7543  002C90  1813               	xorwf	??_write_data,w,c
  7544  002C92  0BEF               	andlw	-17
  7545  002C94  1813               	xorwf	??_write_data,w,c
  7546  002C96  6E91               	movwf	3985,c	;volatile
  7547                           
  7548                           ;IO_LCD.c: 127: LATHbits.LATH6 = 1;
  7549  002C98  8C90               	bsf	3984,6,c	;volatile
  7550                           
  7551                           ;IO_LCD.c: 128: _delay((unsigned long)((20)*(10000000/4000000.0)));
  7552  002C9A  0E10               	movlw	16
  7553  002C9C                     u5907:
  7554  002C9C  2EE8               	decfsz	wreg,f,c
  7555  002C9E  D7FE               	goto	u5907
  7556  002CA0  D000               	nop2		;nop
  7557                           
  7558                           ;IO_LCD.c: 129: LATHbits.LATH6 = 0;
  7559  002CA2  9C90               	bcf	3984,6,c	;volatile
  7560                           
  7561                           ;IO_LCD.c: 131: _delay((unsigned long)((20)*(10000000/4000000.0)));
  7562  002CA4  0E10               	movlw	16
  7563  002CA6                     u5917:
  7564  002CA6  2EE8               	decfsz	wreg,f,c
  7565  002CA8  D7FE               	goto	u5917
  7566  002CAA  D000               	nop2		;nop
  7567                           
  7568                           ;IO_LCD.c: 135: _delay((unsigned long)((60)*(10000000/4000000.0)));
  7569  002CAC  0E32               	movlw	50
  7570  002CAE                     u5927:
  7571  002CAE  2EE8               	decfsz	wreg,f,c
  7572  002CB0  D7FE               	goto	u5927
  7573                           
  7574                           ;IO_LCD.c: 137: LATHbits.LATH7 = 0;
  7575  002CB2  9E90               	bcf	3984,7,c	;volatile
  7576  002CB4  0012               	return		;funcret
  7577  002CB6                     __end_of_write_data:
  7578                           	opt stack 0
  7579                           tblptru	equ	0xFF8
  7580                           tblptrh	equ	0xFF7
  7581                           tblptrl	equ	0xFF6
  7582                           tablat	equ	0xFF5
  7583                           prodh	equ	0xFF4
  7584                           prodl	equ	0xFF3
  7585                           intcon	equ	0xFF2
  7586                           intcon2	equ	0xFF1
  7587                           postinc0	equ	0xFEE
  7588                           wreg	equ	0xFE8
  7589                           indf2	equ	0xFDF
  7590                           postinc2	equ	0xFDE
  7591                           postdec2	equ	0xFDD
  7592                           fsr2h	equ	0xFDA
  7593                           fsr2l	equ	0xFD9
  7594                           status	equ	0xFD8
  7595                           
  7596 ;; *************** function _IO_LCD_configureIO *****************
  7597 ;; Defined at:
  7598 ;;		line 141 in file "IO_LCD.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;		None
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;		None
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      void 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:        0 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    5
  7619 ;; This function calls:
  7620 ;;		_write_port
  7621 ;; This function is called by:
  7622 ;;		_main
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           	psect	text31
  7627  0038A4                     __ptext31:
  7628                           	opt stack 0
  7629  0038A4                     _IO_LCD_configureIO:
  7630                           	opt stack 25
  7631                           
  7632                           ;IO_LCD.c: 158: TRISJbits.TRISJ7 = 0;
  7633                           
  7634                           ;incstack = 0
  7635  0038A4  9E9A               	bcf	3994,7,c	;volatile
  7636                           
  7637                           ;IO_LCD.c: 159: TRISJbits.TRISJ6 = 0;
  7638  0038A6  9C9A               	bcf	3994,6,c	;volatile
  7639                           
  7640                           ;IO_LCD.c: 160: TRISJbits.TRISJ5 = 0;
  7641  0038A8  9A9A               	bcf	3994,5,c	;volatile
  7642                           
  7643                           ;IO_LCD.c: 161: TRISJbits.TRISJ4 = 0;
  7644  0038AA  989A               	bcf	3994,4,c	;volatile
  7645                           
  7646                           ;IO_LCD.c: 165: TRISHbits.TRISH6 = 0;
  7647  0038AC  9C99               	bcf	3993,6,c	;volatile
  7648                           
  7649                           ;IO_LCD.c: 166: TRISHbits.TRISH7 = 0;
  7650  0038AE  9E99               	bcf	3993,7,c	;volatile
  7651                           
  7652                           ;IO_LCD.c: 168: LATHbits.LATH6 = 0;
  7653  0038B0  9C90               	bcf	3984,6,c	;volatile
  7654                           
  7655                           ;IO_LCD.c: 169: LATHbits.LATH7 = 0;
  7656  0038B2  9E90               	bcf	3984,7,c	;volatile
  7657                           
  7658                           ;IO_LCD.c: 171: write_port(0x00);
  7659  0038B4  0E00               	movlw	0
  7660  0038B6  EC06  F01A         	call	_write_port
  7661  0038BA  0012               	return		;funcret
  7662  0038BC                     __end_of_IO_LCD_configureIO:
  7663                           	opt stack 0
  7664                           tblptru	equ	0xFF8
  7665                           tblptrh	equ	0xFF7
  7666                           tblptrl	equ	0xFF6
  7667                           tablat	equ	0xFF5
  7668                           prodh	equ	0xFF4
  7669                           prodl	equ	0xFF3
  7670                           intcon	equ	0xFF2
  7671                           intcon2	equ	0xFF1
  7672                           postinc0	equ	0xFEE
  7673                           wreg	equ	0xFE8
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           fsr2h	equ	0xFDA
  7678                           fsr2l	equ	0xFD9
  7679                           status	equ	0xFD8
  7680                           
  7681 ;; *************** function _write_port *****************
  7682 ;; Defined at:
  7683 ;;		line 7 in file "IO_LCD.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  data            1    wreg     unsigned char 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  data            1   19[COMRAM] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        2 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    4
  7704 ;; This function calls:
  7705 ;;		Nothing
  7706 ;; This function is called by:
  7707 ;;		_IO_LCD_configureIO
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           	psect	text32
  7712  00340C                     __ptext32:
  7713                           	opt stack 0
  7714  00340C                     _write_port:
  7715                           	opt stack 25
  7716                           
  7717                           ;incstack = 0
  7718                           ;write_port@data stored from wreg
  7719  00340C  6E14               	movwf	write_port@data,c
  7720                           
  7721                           ;IO_LCD.c: 24: LATJbits.LATJ7 = (data >> 3) & 0x01;
  7722  00340E  C014  F013         	movff	write_port@data,??_write_port
  7723  003412  90D8               	bcf	status,0,c
  7724  003414  3213               	rrcf	??_write_port,f,c
  7725  003416  90D8               	bcf	status,0,c
  7726  003418  3213               	rrcf	??_write_port,f,c
  7727  00341A  90D8               	bcf	status,0,c
  7728  00341C  3213               	rrcf	??_write_port,f,c
  7729  00341E  0E01               	movlw	1
  7730  003420  1613               	andwf	??_write_port,f,c
  7731  003422  3213               	rrcf	??_write_port,f,c
  7732  003424  3213               	rrcf	??_write_port,f,c
  7733  003426  5091               	movf	3985,w,c	;volatile
  7734  003428  1813               	xorwf	??_write_port,w,c
  7735  00342A  0B7F               	andlw	-129
  7736  00342C  1813               	xorwf	??_write_port,w,c
  7737  00342E  6E91               	movwf	3985,c	;volatile
  7738                           
  7739                           ;IO_LCD.c: 25: LATJbits.LATJ6 = (data >> 2) & 0x01;
  7740  003430  C014  F013         	movff	write_port@data,??_write_port
  7741  003434  90D8               	bcf	status,0,c
  7742  003436  3213               	rrcf	??_write_port,f,c
  7743  003438  90D8               	bcf	status,0,c
  7744  00343A  3213               	rrcf	??_write_port,f,c
  7745  00343C  0E01               	movlw	1
  7746  00343E  1613               	andwf	??_write_port,f,c
  7747  003440  3A13               	swapf	??_write_port,f,c
  7748  003442  4613               	rlncf	??_write_port,f,c
  7749  003444  4613               	rlncf	??_write_port,f,c
  7750  003446  5091               	movf	3985,w,c	;volatile
  7751  003448  1813               	xorwf	??_write_port,w,c
  7752  00344A  0BBF               	andlw	-65
  7753  00344C  1813               	xorwf	??_write_port,w,c
  7754  00344E  6E91               	movwf	3985,c	;volatile
  7755                           
  7756                           ;IO_LCD.c: 26: LATJbits.LATJ5 = (data >> 1) & 0x01;
  7757  003450  C014  F013         	movff	write_port@data,??_write_port
  7758  003454  90D8               	bcf	status,0,c
  7759  003456  3213               	rrcf	??_write_port,f,c
  7760  003458  0E01               	movlw	1
  7761  00345A  1613               	andwf	??_write_port,f,c
  7762  00345C  3A13               	swapf	??_write_port,f,c
  7763  00345E  4613               	rlncf	??_write_port,f,c
  7764  003460  5091               	movf	3985,w,c	;volatile
  7765  003462  1813               	xorwf	??_write_port,w,c
  7766  003464  0BDF               	andlw	-33
  7767  003466  1813               	xorwf	??_write_port,w,c
  7768  003468  6E91               	movwf	3985,c	;volatile
  7769                           
  7770                           ;IO_LCD.c: 27: LATJbits.LATJ4 = data & 0x01;
  7771  00346A  C014  F013         	movff	write_port@data,??_write_port
  7772  00346E  0E01               	movlw	1
  7773  003470  1613               	andwf	??_write_port,f,c
  7774  003472  3A13               	swapf	??_write_port,f,c
  7775  003474  5091               	movf	3985,w,c	;volatile
  7776  003476  1813               	xorwf	??_write_port,w,c
  7777  003478  0BEF               	andlw	-17
  7778  00347A  1813               	xorwf	??_write_port,w,c
  7779  00347C  6E91               	movwf	3985,c	;volatile
  7780  00347E  0012               	return		;funcret
  7781  003480                     __end_of_write_port:
  7782                           	opt stack 0
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           intcon	equ	0xFF2
  7790                           intcon2	equ	0xFF1
  7791                           postinc0	equ	0xFEE
  7792                           wreg	equ	0xFE8
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           fsr2h	equ	0xFDA
  7797                           fsr2l	equ	0xFD9
  7798                           status	equ	0xFD8
  7799                           
  7800 ;; *************** function _IO_LCD_SetCursor *****************
  7801 ;; Defined at:
  7802 ;;		line 269 in file "IO_LCD.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;  row             1    wreg     unsigned char 
  7805 ;;  col             1   21[COMRAM] unsigned char 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;  row             1   22[COMRAM] unsigned char 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      void 
  7810 ;; Registers used:
  7811 ;;		wreg, status,2, status,0, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7817 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;Total ram usage:        2 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    5
  7824 ;; This function calls:
  7825 ;;		_write_cmd
  7826 ;; This function is called by:
  7827 ;;		_main
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text33
  7832  00360E                     __ptext33:
  7833                           	opt stack 0
  7834  00360E                     _IO_LCD_SetCursor:
  7835                           	opt stack 25
  7836                           
  7837                           ;incstack = 0
  7838                           ;IO_LCD_SetCursor@row stored from wreg
  7839  00360E  6E17               	movwf	IO_LCD_SetCursor@row,c
  7840                           
  7841                           ;IO_LCD.c: 271: switch(row) {
  7842  003610  D017               	goto	l3506
  7843  003612                     l3496:
  7844                           
  7845                           ;IO_LCD.c: 273: write_cmd(0x80 | col - 1);
  7846  003612  0416               	decf	IO_LCD_SetCursor@col,w,c
  7847  003614  0980               	iorlw	128
  7848  003616  EC5B  F016         	call	_write_cmd
  7849                           
  7850                           ;IO_LCD.c: 274: break;
  7851  00361A  D01F               	goto	l3508
  7852  00361C                     l3498:
  7853                           
  7854                           ;IO_LCD.c: 276: write_cmd(0x80 | col + 39);
  7855  00361C  5016               	movf	IO_LCD_SetCursor@col,w,c
  7856  00361E  0F27               	addlw	39
  7857  003620  0980               	iorlw	128
  7858  003622  EC5B  F016         	call	_write_cmd
  7859                           
  7860                           ;IO_LCD.c: 277: break;
  7861  003626  D019               	goto	l3508
  7862  003628                     l3500:
  7863                           
  7864                           ;IO_LCD.c: 279: write_cmd(0x80 | col + 19);
  7865  003628  5016               	movf	IO_LCD_SetCursor@col,w,c
  7866  00362A  0F13               	addlw	19
  7867  00362C  0980               	iorlw	128
  7868  00362E  EC5B  F016         	call	_write_cmd
  7869                           
  7870                           ;IO_LCD.c: 280: break;
  7871  003632  D013               	goto	l3508
  7872  003634                     l3502:
  7873                           
  7874                           ;IO_LCD.c: 282: write_cmd(0x80 | col + 83);
  7875  003634  5016               	movf	IO_LCD_SetCursor@col,w,c
  7876  003636  0F53               	addlw	83
  7877  003638  0980               	iorlw	128
  7878  00363A  EC5B  F016         	call	_write_cmd
  7879                           
  7880                           ;IO_LCD.c: 286: }
  7881                           
  7882                           ;IO_LCD.c: 285: break;
  7883                           
  7884                           ;IO_LCD.c: 284: default:
  7885                           
  7886                           ;IO_LCD.c: 283: break;
  7887  00363E  D00D               	goto	l3508
  7888  003640                     l3506:
  7889  003640  5017               	movf	IO_LCD_SetCursor@row,w,c
  7890                           
  7891                           ; Switch size 1, requested type "space"
  7892                           ; Number of cases is 4, Range of values is 1 to 4
  7893                           ; switch strategies available:
  7894                           ; Name         Instructions Cycles
  7895                           ; simple_byte           13     7 (average)
  7896                           ;	Chosen strategy is simple_byte
  7897  003642  0A01               	xorlw	1	; case 1
  7898  003644  B4D8               	btfsc	status,2,c
  7899  003646  D7E5               	goto	l3496
  7900  003648  0A03               	xorlw	3	; case 2
  7901  00364A  B4D8               	btfsc	status,2,c
  7902  00364C  D7E7               	goto	l3498
  7903  00364E  0A01               	xorlw	1	; case 3
  7904  003650  B4D8               	btfsc	status,2,c
  7905  003652  D7EA               	goto	l3500
  7906  003654  0A07               	xorlw	7	; case 4
  7907  003656  B4D8               	btfsc	status,2,c
  7908  003658  D7ED               	goto	l3502
  7909  00365A                     l3508:
  7910                           
  7911                           ;IO_LCD.c: 288: _delay((unsigned long)((60)*(10000000/4000000.0)));
  7912  00365A  0E32               	movlw	50
  7913  00365C                     u5937:
  7914  00365C  2EE8               	decfsz	wreg,f,c
  7915  00365E  D7FE               	goto	u5937
  7916  003660  0012               	return		;funcret
  7917  003662                     __end_of_IO_LCD_SetCursor:
  7918                           	opt stack 0
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           intcon2	equ	0xFF1
  7927                           postinc0	equ	0xFEE
  7928                           wreg	equ	0xFE8
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           postdec2	equ	0xFDD
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function _IO_LCD_Init *****************
  7937 ;; Defined at:
  7938 ;;		line 176 in file "IO_LCD.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;		None
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;		None
  7943 ;; Return value:  Size  Location     Type
  7944 ;;                  1    wreg      void 
  7945 ;; Registers used:
  7946 ;;		wreg, status,2, status,0, cstack
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;Total ram usage:        1 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    5
  7959 ;; This function calls:
  7960 ;;		_write_cmd
  7961 ;; This function is called by:
  7962 ;;		_main
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text34
  7967  00316C                     __ptext34:
  7968                           	opt stack 0
  7969  00316C                     _IO_LCD_Init:
  7970                           	opt stack 25
  7971                           
  7972                           ;IO_LCD.c: 178: _delay((unsigned long)((40)*(10000000/4000.0)));
  7973                           
  7974                           ;incstack = 0
  7975  00316C  0E82               	movlw	130
  7976  00316E  6E16               	movwf	??_IO_LCD_Init& (0+255),c
  7977  003170  0EDE               	movlw	222
  7978  003172                     u5947:
  7979  003172  2EE8               	decfsz	wreg,f,c
  7980  003174  D7FE               	goto	u5947
  7981  003176  2E16               	decfsz	??_IO_LCD_Init& (0+255),f,c
  7982  003178  D7FC               	goto	u5947
  7983                           
  7984                           ;IO_LCD.c: 180: write_cmd(0x30);
  7985  00317A  0E30               	movlw	48
  7986  00317C  EC5B  F016         	call	_write_cmd
  7987                           
  7988                           ;IO_LCD.c: 181: _delay((unsigned long)((5)*(10000000/4000.0)));
  7989  003180  0E11               	movlw	17
  7990  003182  6E16               	movwf	??_IO_LCD_Init& (0+255),c
  7991  003184  0E3A               	movlw	58
  7992  003186                     u5957:
  7993  003186  2EE8               	decfsz	wreg,f,c
  7994  003188  D7FE               	goto	u5957
  7995  00318A  2E16               	decfsz	??_IO_LCD_Init& (0+255),f,c
  7996  00318C  D7FC               	goto	u5957
  7997  00318E  D000               	nop2	
  7998                           
  7999                           ;IO_LCD.c: 182: write_cmd(0x30);
  8000  003190  0E30               	movlw	48
  8001  003192  EC5B  F016         	call	_write_cmd
  8002                           
  8003                           ;IO_LCD.c: 183: _delay((unsigned long)((150)*(10000000/4000000.0)));
  8004  003196  0E7D               	movlw	125
  8005  003198                     u5967:
  8006  003198  2EE8               	decfsz	wreg,f,c
  8007  00319A  D7FE               	goto	u5967
  8008                           
  8009                           ;IO_LCD.c: 184: write_cmd(0x30);
  8010  00319C  0E30               	movlw	48
  8011  00319E  EC5B  F016         	call	_write_cmd
  8012                           
  8013                           ;IO_LCD.c: 185: _delay((unsigned long)((150)*(10000000/4000000.0)));
  8014  0031A2  0E7D               	movlw	125
  8015  0031A4                     u5977:
  8016  0031A4  2EE8               	decfsz	wreg,f,c
  8017  0031A6  D7FE               	goto	u5977
  8018                           
  8019                           ;IO_LCD.c: 195: write_cmd(0x20);
  8020  0031A8  0E20               	movlw	32
  8021  0031AA  EC5B  F016         	call	_write_cmd
  8022                           
  8023                           ;IO_LCD.c: 199: _delay((unsigned long)((60)*(10000000/4000000.0)));
  8024  0031AE  0E32               	movlw	50
  8025  0031B0                     u5987:
  8026  0031B0  2EE8               	decfsz	wreg,f,c
  8027  0031B2  D7FE               	goto	u5987
  8028                           
  8029                           ;IO_LCD.c: 200: write_cmd(0x08);
  8030  0031B4  0E08               	movlw	8
  8031  0031B6  EC5B  F016         	call	_write_cmd
  8032                           
  8033                           ;IO_LCD.c: 201: _delay((unsigned long)((60)*(10000000/4000000.0)));
  8034  0031BA  0E32               	movlw	50
  8035  0031BC                     u5997:
  8036  0031BC  2EE8               	decfsz	wreg,f,c
  8037  0031BE  D7FE               	goto	u5997
  8038                           
  8039                           ;IO_LCD.c: 202: write_cmd(0x01);
  8040  0031C0  0E01               	movlw	1
  8041  0031C2  EC5B  F016         	call	_write_cmd
  8042                           
  8043                           ;IO_LCD.c: 203: _delay((unsigned long)((4)*(10000000/4000.0)));
  8044  0031C6  0E0D               	movlw	13
  8045  0031C8  6E16               	movwf	??_IO_LCD_Init& (0+255),c
  8046  0031CA  0EFC               	movlw	252
  8047  0031CC                     u6007:
  8048  0031CC  2EE8               	decfsz	wreg,f,c
  8049  0031CE  D7FE               	goto	u6007
  8050  0031D0  2E16               	decfsz	??_IO_LCD_Init& (0+255),f,c
  8051  0031D2  D7FC               	goto	u6007
  8052                           
  8053                           ;IO_LCD.c: 204: write_cmd(0x06);
  8054  0031D4  0E06               	movlw	6
  8055  0031D6  EC5B  F016         	call	_write_cmd
  8056                           
  8057                           ;IO_LCD.c: 205: _delay((unsigned long)((60)*(10000000/4000000.0)));
  8058  0031DA  0E32               	movlw	50
  8059  0031DC                     u6017:
  8060  0031DC  2EE8               	decfsz	wreg,f,c
  8061  0031DE  D7FE               	goto	u6017
  8062                           
  8063                           ;IO_LCD.c: 206: write_cmd(0x0C);
  8064  0031E0  0E0C               	movlw	12
  8065  0031E2  EC5B  F016         	call	_write_cmd
  8066                           
  8067                           ;IO_LCD.c: 207: _delay((unsigned long)((60)*(10000000/4000000.0)));
  8068  0031E6  0E32               	movlw	50
  8069  0031E8                     u6027:
  8070  0031E8  2EE8               	decfsz	wreg,f,c
  8071  0031EA  D7FE               	goto	u6027
  8072                           
  8073                           ;IO_LCD.c: 209: lcd_state.blink_on = 0;
  8074  0031EC  9448               	bcf	_lcd_state+2,2,c
  8075                           
  8076                           ;IO_LCD.c: 210: lcd_state.cursor_on = 0;
  8077  0031EE  9248               	bcf	_lcd_state+2,1,c
  8078                           
  8079                           ;IO_LCD.c: 211: lcd_state.display_on = 1;
  8080  0031F0  8048               	bsf	_lcd_state+2,0,c
  8081                           
  8082                           ;IO_LCD.c: 212: lcd_state.DDRAM_addr = 0x00;
  8083  0031F2  0E00               	movlw	0
  8084  0031F4  6E46               	movwf	_lcd_state,c
  8085                           
  8086                           ;IO_LCD.c: 213: lcd_state.CGRAM_addr = 0x00;
  8087  0031F6  0E00               	movlw	0
  8088  0031F8  6E47               	movwf	_lcd_state+1,c
  8089  0031FA  0012               	return		;funcret
  8090  0031FC                     __end_of_IO_LCD_Init:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           postinc0	equ	0xFEE
  8101                           wreg	equ	0xFE8
  8102                           indf2	equ	0xFDF
  8103                           postinc2	equ	0xFDE
  8104                           postdec2	equ	0xFDD
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _write_cmd *****************
  8110 ;; Defined at:
  8111 ;;		line 33 in file "IO_LCD.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;  cmd             1    wreg     unsigned char 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  cmd             1   20[COMRAM] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  1    wreg      void 
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, status,0
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;Total ram usage:        3 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    4
  8132 ;; This function calls:
  8133 ;;		Nothing
  8134 ;; This function is called by:
  8135 ;;		_IO_LCD_Init
  8136 ;;		_IO_LCD_SetCursor
  8137 ;;		_IO_LCD_CursorHome
  8138 ;;		_IO_LCD_ClearDisplay
  8139 ;;		_IO_LCD_EnableCursor
  8140 ;;		_IO_LCD_DisableCursor
  8141 ;;		_IO_LCD_EnableDisplay
  8142 ;;		_IO_LCD_DisableDisplay
  8143 ;;		_IO_LCD_EnableBlink
  8144 ;;		_IO_LCD_DisableBlink
  8145 ;;		_IO_LCD_SetEntryMode
  8146 ;;		_IO_LCD_ShiftCursor
  8147 ;;		_IO_LCD_ShiftDisplay
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text35
  8152  002CB6                     __ptext35:
  8153                           	opt stack 0
  8154  002CB6                     _write_cmd:
  8155                           	opt stack 25
  8156                           
  8157                           ;incstack = 0
  8158                           ;write_cmd@cmd stored from wreg
  8159  002CB6  6E15               	movwf	write_cmd@cmd,c
  8160                           
  8161                           ;IO_LCD.c: 35: LATHbits.LATH7 = 0;
  8162  002CB8  9E90               	bcf	3984,7,c	;volatile
  8163                           
  8164                           ;IO_LCD.c: 60: LATJbits.LATJ7 = (cmd >> 7) & 0x01;
  8165  002CBA  6A13               	clrf	??_write_cmd& (0+255),c
  8166  002CBC  AE15               	btfss	write_cmd@cmd,7,c
  8167  002CBE  D001               	bra	u3005
  8168  002CC0  2A13               	incf	??_write_cmd& (0+255),f,c
  8169  002CC2                     u3005:
  8170  002CC2  0E01               	movlw	1
  8171  002CC4  1613               	andwf	??_write_cmd,f,c
  8172  002CC6  3213               	rrcf	??_write_cmd,f,c
  8173  002CC8  3213               	rrcf	??_write_cmd,f,c
  8174  002CCA  5091               	movf	3985,w,c	;volatile
  8175  002CCC  1813               	xorwf	??_write_cmd,w,c
  8176  002CCE  0B7F               	andlw	-129
  8177  002CD0  1813               	xorwf	??_write_cmd,w,c
  8178  002CD2  6E91               	movwf	3985,c	;volatile
  8179                           
  8180                           ;IO_LCD.c: 61: LATJbits.LATJ6 = (cmd >> 6) & 0x01;
  8181  002CD4  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8182  002CD8  0E06               	movlw	6
  8183  002CDA  6E14               	movwf	(??_write_cmd+1)& (0+255),c
  8184  002CDC                     u3015:
  8185  002CDC  90D8               	bcf	status,0,c
  8186  002CDE  3213               	rrcf	??_write_cmd,f,c
  8187  002CE0  2E14               	decfsz	(??_write_cmd+1)& (0+255),f,c
  8188  002CE2  D7FC               	goto	u3015
  8189  002CE4  0E01               	movlw	1
  8190  002CE6  1613               	andwf	??_write_cmd,f,c
  8191  002CE8  3A13               	swapf	??_write_cmd,f,c
  8192  002CEA  4613               	rlncf	??_write_cmd,f,c
  8193  002CEC  4613               	rlncf	??_write_cmd,f,c
  8194  002CEE  5091               	movf	3985,w,c	;volatile
  8195  002CF0  1813               	xorwf	??_write_cmd,w,c
  8196  002CF2  0BBF               	andlw	-65
  8197  002CF4  1813               	xorwf	??_write_cmd,w,c
  8198  002CF6  6E91               	movwf	3985,c	;volatile
  8199                           
  8200                           ;IO_LCD.c: 62: LATJbits.LATJ5 = (cmd >> 5) & 0x01;
  8201  002CF8  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8202  002CFC  0E05               	movlw	5
  8203  002CFE  6E14               	movwf	(??_write_cmd+1)& (0+255),c
  8204  002D00                     u3025:
  8205  002D00  90D8               	bcf	status,0,c
  8206  002D02  3213               	rrcf	??_write_cmd,f,c
  8207  002D04  2E14               	decfsz	(??_write_cmd+1)& (0+255),f,c
  8208  002D06  D7FC               	goto	u3025
  8209  002D08  0E01               	movlw	1
  8210  002D0A  1613               	andwf	??_write_cmd,f,c
  8211  002D0C  3A13               	swapf	??_write_cmd,f,c
  8212  002D0E  4613               	rlncf	??_write_cmd,f,c
  8213  002D10  5091               	movf	3985,w,c	;volatile
  8214  002D12  1813               	xorwf	??_write_cmd,w,c
  8215  002D14  0BDF               	andlw	-33
  8216  002D16  1813               	xorwf	??_write_cmd,w,c
  8217  002D18  6E91               	movwf	3985,c	;volatile
  8218                           
  8219                           ;IO_LCD.c: 63: LATJbits.LATJ4 = (cmd >> 4) & 0x01;
  8220  002D1A  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8221  002D1E  3A13               	swapf	??_write_cmd,f,c
  8222  002D20  0E0F               	movlw	15
  8223  002D22  1613               	andwf	??_write_cmd,f,c
  8224  002D24  0E01               	movlw	1
  8225  002D26  1613               	andwf	??_write_cmd,f,c
  8226  002D28  3A13               	swapf	??_write_cmd,f,c
  8227  002D2A  5091               	movf	3985,w,c	;volatile
  8228  002D2C  1813               	xorwf	??_write_cmd,w,c
  8229  002D2E  0BEF               	andlw	-17
  8230  002D30  1813               	xorwf	??_write_cmd,w,c
  8231  002D32  6E91               	movwf	3985,c	;volatile
  8232                           
  8233                           ;IO_LCD.c: 65: LATHbits.LATH6 = 1;
  8234  002D34  8C90               	bsf	3984,6,c	;volatile
  8235                           
  8236                           ;IO_LCD.c: 66: _delay((unsigned long)((20)*(10000000/4000000.0)));
  8237  002D36  0E10               	movlw	16
  8238  002D38                     u6037:
  8239  002D38  2EE8               	decfsz	wreg,f,c
  8240  002D3A  D7FE               	goto	u6037
  8241  002D3C  D000               	nop2		;nop
  8242                           
  8243                           ;IO_LCD.c: 67: LATHbits.LATH6 = 0;
  8244  002D3E  9C90               	bcf	3984,6,c	;volatile
  8245                           
  8246                           ;IO_LCD.c: 68: _delay((unsigned long)((20)*(10000000/4000000.0)));
  8247  002D40  0E10               	movlw	16
  8248  002D42                     u6047:
  8249  002D42  2EE8               	decfsz	wreg,f,c
  8250  002D44  D7FE               	goto	u6047
  8251  002D46  D000               	nop2		;nop
  8252                           
  8253                           ;IO_LCD.c: 70: LATJbits.LATJ7 = (cmd >> 3) & 0x01;
  8254  002D48  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8255  002D4C  90D8               	bcf	status,0,c
  8256  002D4E  3213               	rrcf	??_write_cmd,f,c
  8257  002D50  90D8               	bcf	status,0,c
  8258  002D52  3213               	rrcf	??_write_cmd,f,c
  8259  002D54  90D8               	bcf	status,0,c
  8260  002D56  3213               	rrcf	??_write_cmd,f,c
  8261  002D58  0E01               	movlw	1
  8262  002D5A  1613               	andwf	??_write_cmd,f,c
  8263  002D5C  3213               	rrcf	??_write_cmd,f,c
  8264  002D5E  3213               	rrcf	??_write_cmd,f,c
  8265  002D60  5091               	movf	3985,w,c	;volatile
  8266  002D62  1813               	xorwf	??_write_cmd,w,c
  8267  002D64  0B7F               	andlw	-129
  8268  002D66  1813               	xorwf	??_write_cmd,w,c
  8269  002D68  6E91               	movwf	3985,c	;volatile
  8270                           
  8271                           ;IO_LCD.c: 71: LATJbits.LATJ6 = (cmd >> 2) & 0x01;
  8272  002D6A  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8273  002D6E  90D8               	bcf	status,0,c
  8274  002D70  3213               	rrcf	??_write_cmd,f,c
  8275  002D72  90D8               	bcf	status,0,c
  8276  002D74  3213               	rrcf	??_write_cmd,f,c
  8277  002D76  0E01               	movlw	1
  8278  002D78  1613               	andwf	??_write_cmd,f,c
  8279  002D7A  3A13               	swapf	??_write_cmd,f,c
  8280  002D7C  4613               	rlncf	??_write_cmd,f,c
  8281  002D7E  4613               	rlncf	??_write_cmd,f,c
  8282  002D80  5091               	movf	3985,w,c	;volatile
  8283  002D82  1813               	xorwf	??_write_cmd,w,c
  8284  002D84  0BBF               	andlw	-65
  8285  002D86  1813               	xorwf	??_write_cmd,w,c
  8286  002D88  6E91               	movwf	3985,c	;volatile
  8287                           
  8288                           ;IO_LCD.c: 72: LATJbits.LATJ5 = (cmd >> 1) & 0x01;
  8289  002D8A  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8290  002D8E  90D8               	bcf	status,0,c
  8291  002D90  3213               	rrcf	??_write_cmd,f,c
  8292  002D92  0E01               	movlw	1
  8293  002D94  1613               	andwf	??_write_cmd,f,c
  8294  002D96  3A13               	swapf	??_write_cmd,f,c
  8295  002D98  4613               	rlncf	??_write_cmd,f,c
  8296  002D9A  5091               	movf	3985,w,c	;volatile
  8297  002D9C  1813               	xorwf	??_write_cmd,w,c
  8298  002D9E  0BDF               	andlw	-33
  8299  002DA0  1813               	xorwf	??_write_cmd,w,c
  8300  002DA2  6E91               	movwf	3985,c	;volatile
  8301                           
  8302                           ;IO_LCD.c: 73: LATJbits.LATJ4 = cmd & 0x01;
  8303  002DA4  C015  F013         	movff	write_cmd@cmd,??_write_cmd
  8304  002DA8  0E01               	movlw	1
  8305  002DAA  1613               	andwf	??_write_cmd,f,c
  8306  002DAC  3A13               	swapf	??_write_cmd,f,c
  8307  002DAE  5091               	movf	3985,w,c	;volatile
  8308  002DB0  1813               	xorwf	??_write_cmd,w,c
  8309  002DB2  0BEF               	andlw	-17
  8310  002DB4  1813               	xorwf	??_write_cmd,w,c
  8311  002DB6  6E91               	movwf	3985,c	;volatile
  8312                           
  8313                           ;IO_LCD.c: 75: LATHbits.LATH6 = 1;
  8314  002DB8  8C90               	bsf	3984,6,c	;volatile
  8315                           
  8316                           ;IO_LCD.c: 76: _delay((unsigned long)((20)*(10000000/4000000.0)));
  8317  002DBA  0E10               	movlw	16
  8318  002DBC                     u6057:
  8319  002DBC  2EE8               	decfsz	wreg,f,c
  8320  002DBE  D7FE               	goto	u6057
  8321  002DC0  D000               	nop2		;nop
  8322                           
  8323                           ;IO_LCD.c: 77: LATHbits.LATH6 = 0;
  8324  002DC2  9C90               	bcf	3984,6,c	;volatile
  8325                           
  8326                           ;IO_LCD.c: 78: _delay((unsigned long)((20)*(10000000/4000000.0)));
  8327  002DC4  0E10               	movlw	16
  8328  002DC6                     u6067:
  8329  002DC6  2EE8               	decfsz	wreg,f,c
  8330  002DC8  D7FE               	goto	u6067
  8331  002DCA  D000               	nop2		;nop
  8332  002DCC  0012               	return		;funcret
  8333  002DCE                     __end_of_write_cmd:
  8334                           	opt stack 0
  8335                           tblptru	equ	0xFF8
  8336                           tblptrh	equ	0xFF7
  8337                           tblptrl	equ	0xFF6
  8338                           tablat	equ	0xFF5
  8339                           prodh	equ	0xFF4
  8340                           prodl	equ	0xFF3
  8341                           intcon	equ	0xFF2
  8342                           intcon2	equ	0xFF1
  8343                           postinc0	equ	0xFEE
  8344                           wreg	equ	0xFE8
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           fsr2h	equ	0xFDA
  8349                           fsr2l	equ	0xFD9
  8350                           status	equ	0xFD8
  8351                           
  8352 ;; *************** function _IO_Encoder_getCount *****************
  8353 ;; Defined at:
  8354 ;;		line 45 in file "IO_Encoder.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;		None
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  count           2   20[COMRAM] unsigned int 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  2   18[COMRAM] unsigned int 
  8361 ;; Registers used:
  8362 ;;		wreg, status,2
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8368 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;Total ram usage:        4 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    4
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_main
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text36
  8383  00388A                     __ptext36:
  8384                           	opt stack 0
  8385  00388A                     _IO_Encoder_getCount:
  8386                           	opt stack 26
  8387                           
  8388                           ;IO_Encoder.c: 47: unsigned int count = enc_state.count;
  8389                           
  8390                           ;incstack = 0
  8391  00388A  C043  F015         	movff	_enc_state,IO_Encoder_getCount@count	;volatile
  8392  00388E  C044  F016         	movff	_enc_state+1,IO_Encoder_getCount@count+1	;volatile
  8393                           
  8394                           ;IO_Encoder.c: 49: enc_state.count = 0;
  8395  003892  0E00               	movlw	0
  8396  003894  6E44               	movwf	_enc_state+1,c	;volatile
  8397  003896  0E00               	movlw	0
  8398  003898  6E43               	movwf	_enc_state,c	;volatile
  8399                           
  8400                           ;IO_Encoder.c: 50: return(count);
  8401  00389A  C015  F013         	movff	IO_Encoder_getCount@count,?_IO_Encoder_getCount
  8402  00389E  C016  F014         	movff	IO_Encoder_getCount@count+1,?_IO_Encoder_getCount+1
  8403  0038A2  0012               	return	
  8404  0038A4                     __end_of_IO_Encoder_getCount:
  8405                           	opt stack 0
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           prodh	equ	0xFF4
  8411                           prodl	equ	0xFF3
  8412                           intcon	equ	0xFF2
  8413                           intcon2	equ	0xFF1
  8414                           postinc0	equ	0xFEE
  8415                           wreg	equ	0xFE8
  8416                           indf2	equ	0xFDF
  8417                           postinc2	equ	0xFDE
  8418                           postdec2	equ	0xFDD
  8419                           fsr2h	equ	0xFDA
  8420                           fsr2l	equ	0xFD9
  8421                           status	equ	0xFD8
  8422                           
  8423 ;; *************** function _IO_Encoder_configureIO *****************
  8424 ;; Defined at:
  8425 ;;		line 32 in file "IO_Encoder.c"
  8426 ;; Parameters:    Size  Location     Type
  8427 ;;		None
  8428 ;; Auto vars:     Size  Location     Type
  8429 ;;		None
  8430 ;; Return value:  Size  Location     Type
  8431 ;;                  1    wreg      void 
  8432 ;; Registers used:
  8433 ;;		wreg, status,2
  8434 ;; Tracked objects:
  8435 ;;		On entry : 0/0
  8436 ;;		On exit  : 0/0
  8437 ;;		Unchanged: 0/0
  8438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;Total ram usage:        0 bytes
  8444 ;; Hardware stack levels used:    1
  8445 ;; Hardware stack levels required when called:    4
  8446 ;; This function calls:
  8447 ;;		Nothing
  8448 ;; This function is called by:
  8449 ;;		_main
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           	psect	text37
  8454  003802                     __ptext37:
  8455                           	opt stack 0
  8456  003802                     _IO_Encoder_configureIO:
  8457                           	opt stack 26
  8458                           
  8459                           ;IO_Encoder.c: 34: enc_A = 0;
  8460                           
  8461                           ;incstack = 0
  8462  003802  0E00               	movlw	0
  8463  003804  6E40               	movwf	_enc_A,c	;volatile
  8464                           
  8465                           ;IO_Encoder.c: 35: enc_B = 0;
  8466  003806  0E00               	movlw	0
  8467  003808  6E42               	movwf	_enc_B,c	;volatile
  8468                           
  8469                           ;IO_Encoder.c: 36: enc_A_prev = 0;
  8470  00380A  0E00               	movlw	0
  8471  00380C  6E41               	movwf	_enc_A_prev,c	;volatile
  8472                           
  8473                           ;IO_Encoder.c: 37: enc_state.count = 0;
  8474  00380E  0E00               	movlw	0
  8475  003810  6E44               	movwf	_enc_state+1,c	;volatile
  8476  003812  0E00               	movlw	0
  8477  003814  6E43               	movwf	_enc_state,c	;volatile
  8478                           
  8479                           ;IO_Encoder.c: 38: enc_state.direction = 1;
  8480  003816  8045               	bsf	_enc_state+2,0,c	;volatile
  8481                           
  8482                           ;IO_Encoder.c: 40: TRISGbits.TRISG3 = 1;
  8483  003818  8698               	bsf	3992,3,c	;volatile
  8484                           
  8485                           ;IO_Encoder.c: 41: TRISGbits.TRISG4 = 1;
  8486  00381A  8898               	bsf	3992,4,c	;volatile
  8487  00381C  0012               	return		;funcret
  8488  00381E                     __end_of_IO_Encoder_configureIO:
  8489                           	opt stack 0
  8490                           tblptru	equ	0xFF8
  8491                           tblptrh	equ	0xFF7
  8492                           tblptrl	equ	0xFF6
  8493                           tablat	equ	0xFF5
  8494                           prodh	equ	0xFF4
  8495                           prodl	equ	0xFF3
  8496                           intcon	equ	0xFF2
  8497                           intcon2	equ	0xFF1
  8498                           postinc0	equ	0xFEE
  8499                           wreg	equ	0xFE8
  8500                           indf2	equ	0xFDF
  8501                           postinc2	equ	0xFDE
  8502                           postdec2	equ	0xFDD
  8503                           fsr2h	equ	0xFDA
  8504                           fsr2l	equ	0xFD9
  8505                           status	equ	0xFD8
  8506                           
  8507 ;; *************** function _IO_Buttons_getButton *****************
  8508 ;; Defined at:
  8509 ;;		line 138 in file "IO_Buttons.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  button          1    wreg     enum E6989
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  button          1   19[COMRAM] enum E6989
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      unsigned char 
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;Total ram usage:        1 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    5
  8530 ;; This function calls:
  8531 ;;		_scan_buttons
  8532 ;; This function is called by:
  8533 ;;		_main
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           	psect	text38
  8538  00338E                     __ptext38:
  8539                           	opt stack 0
  8540  00338E                     _IO_Buttons_getButton:
  8541                           	opt stack 25
  8542                           
  8543                           ;incstack = 0
  8544                           ;IO_Buttons_getButton@button stored from wreg
  8545  00338E  6E14               	movwf	IO_Buttons_getButton@button,c
  8546                           
  8547                           ;IO_Buttons.c: 140: if(buttons_use_interrupts == 0) {
  8548  003390  503F               	movf	_buttons_use_interrupts,w,c	;volatile
  8549  003392  A4D8               	btfss	status,2,c
  8550  003394  D027               	goto	l3404
  8551                           
  8552                           ;IO_Buttons.c: 141: scan_buttons();
  8553  003396  EC61  F017         	call	_scan_buttons	;wreg free
  8554                           
  8555                           ;IO_Buttons.c: 142: }
  8556                           ;IO_Buttons.c: 144: switch(button) {
  8557  00339A  D024               	goto	l3404
  8558  00339C                     l3378:
  8559                           
  8560                           ;IO_Buttons.c: 146: return(button_state_bits.PB_1);
  8561  00339C  A049               	btfss	_button_state_bits,0,c	;volatile
  8562  00339E  D002               	goto	u3730
  8563  0033A0  0E01               	movlw	1
  8564  0033A2  0012               	return	
  8565  0033A4                     u3730:
  8566  0033A4  0E00               	movlw	0
  8567  0033A6  0012               	return	
  8568  0033A8                     l3382:
  8569                           
  8570                           ;IO_Buttons.c: 148: return(button_state_bits.PB_2);
  8571  0033A8  A249               	btfss	_button_state_bits,1,c	;volatile
  8572  0033AA  D002               	goto	u3740
  8573  0033AC  0E01               	movlw	1
  8574  0033AE  0012               	return	
  8575  0033B0                     u3740:
  8576  0033B0  0E00               	movlw	0
  8577  0033B2  0012               	return	
  8578  0033B4                     l3386:
  8579                           
  8580                           ;IO_Buttons.c: 150: return(button_state_bits.PB_3);
  8581  0033B4  A449               	btfss	_button_state_bits,2,c	;volatile
  8582  0033B6  D002               	goto	u3750
  8583  0033B8  0E01               	movlw	1
  8584  0033BA  0012               	return	
  8585  0033BC                     u3750:
  8586  0033BC  0E00               	movlw	0
  8587  0033BE  0012               	return	
  8588  0033C0                     l3390:
  8589                           
  8590                           ;IO_Buttons.c: 152: return(button_state_bits.PB_4);
  8591  0033C0  A649               	btfss	_button_state_bits,3,c	;volatile
  8592  0033C2  D002               	goto	u3760
  8593  0033C4  0E01               	movlw	1
  8594  0033C6  0012               	return	
  8595  0033C8                     u3760:
  8596  0033C8  0E00               	movlw	0
  8597  0033CA  0012               	return	
  8598  0033CC                     l3394:
  8599                           
  8600                           ;IO_Buttons.c: 154: return(button_state_bits.PB_5);
  8601  0033CC  A849               	btfss	_button_state_bits,4,c	;volatile
  8602  0033CE  D002               	goto	u3770
  8603  0033D0  0E01               	movlw	1
  8604  0033D2  0012               	return	
  8605  0033D4                     u3770:
  8606  0033D4  0E00               	movlw	0
  8607  0033D6  0012               	return	
  8608  0033D8                     l3398:
  8609                           
  8610                           ;IO_Buttons.c: 156: return(button_state_bits.PB_6);
  8611  0033D8  AA49               	btfss	_button_state_bits,5,c	;volatile
  8612  0033DA  D002               	goto	u3780
  8613  0033DC  0E01               	movlw	1
  8614  0033DE  0012               	return	
  8615  0033E0                     u3780:
  8616  0033E0  0E00               	movlw	0
  8617                           
  8618                           ;IO_Buttons.c: 159: }
  8619                           
  8620                           ;IO_Buttons.c: 158: break;
  8621                           
  8622                           ;IO_Buttons.c: 157: default:
  8623  0033E2  0012               	return	
  8624  0033E4                     l3404:
  8625  0033E4  5014               	movf	IO_Buttons_getButton@button,w,c
  8626                           
  8627                           ; Switch size 1, requested type "space"
  8628                           ; Number of cases is 6, Range of values is 0 to 5
  8629                           ; switch strategies available:
  8630                           ; Name         Instructions Cycles
  8631                           ; simple_byte           19    10 (average)
  8632                           ;	Chosen strategy is simple_byte
  8633  0033E6  0A00               	xorlw	0	; case 0
  8634  0033E8  B4D8               	btfsc	status,2,c
  8635  0033EA  D7D8               	goto	l3378
  8636  0033EC  0A01               	xorlw	1	; case 1
  8637  0033EE  B4D8               	btfsc	status,2,c
  8638  0033F0  D7DB               	goto	l3382
  8639  0033F2  0A03               	xorlw	3	; case 2
  8640  0033F4  B4D8               	btfsc	status,2,c
  8641  0033F6  D7DE               	goto	l3386
  8642  0033F8  0A01               	xorlw	1	; case 3
  8643  0033FA  B4D8               	btfsc	status,2,c
  8644  0033FC  D7E1               	goto	l3390
  8645  0033FE  0A07               	xorlw	7	; case 4
  8646  003400  B4D8               	btfsc	status,2,c
  8647  003402  D7E4               	goto	l3394
  8648  003404  0A01               	xorlw	1	; case 5
  8649  003406  A4D8               	btfss	status,2,c
  8650  003408  0012               	return	
  8651  00340A  D7E6               	goto	l3398
  8652  00340C                     __end_of_IO_Buttons_getButton:
  8653                           	opt stack 0
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           intcon2	equ	0xFF1
  8662                           postinc0	equ	0xFEE
  8663                           wreg	equ	0xFE8
  8664                           indf2	equ	0xFDF
  8665                           postinc2	equ	0xFDE
  8666                           postdec2	equ	0xFDD
  8667                           fsr2h	equ	0xFDA
  8668                           fsr2l	equ	0xFD9
  8669                           status	equ	0xFD8
  8670                           
  8671 ;; *************** function _scan_buttons *****************
  8672 ;; Defined at:
  8673 ;;		line 52 in file "IO_Buttons.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;		None
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;		None
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  1    wreg      void 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;Total ram usage:        1 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    4
  8694 ;; This function calls:
  8695 ;;		Nothing
  8696 ;; This function is called by:
  8697 ;;		_IO_Buttons_getButton
  8698 ;;		_IO_Buttons_getAllButtons
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           	psect	text39
  8703  002EC2                     __ptext39:
  8704                           	opt stack 0
  8705  002EC2                     _scan_buttons:
  8706                           	opt stack 25
  8707                           
  8708                           ;IO_Buttons.c: 54: if(PORTB) {
  8709                           
  8710                           ;incstack = 0
  8711  002EC2  5081               	movf	3969,w,c	;volatile
  8712  002EC4  A4D8               	btfss	status,2,c
  8713  002EC6  F000               	nop		;# 
  8714                           
  8715                           ;IO_Buttons.c: 56: }
  8716                           ;IO_Buttons.c: 58: LATDbits.LATD0 = 1;
  8717  002EC8  808C               	bsf	3980,0,c	;volatile
  8718                           
  8719                           ;IO_Buttons.c: 59: LATDbits.LATD1 = 1;
  8720  002ECA  828C               	bsf	3980,1,c	;volatile
  8721                           
  8722                           ;IO_Buttons.c: 60: LATDbits.LATD2 = 1;
  8723  002ECC  848C               	bsf	3980,2,c	;volatile
  8724                           
  8725                           ;IO_Buttons.c: 62: LATDbits.LATD0 = 0;
  8726  002ECE  908C               	bcf	3980,0,c	;volatile
  8727                           
  8728                           ;IO_Buttons.c: 63: button_state_bits.PB_1 = !PORTBbits.RB4;
  8729  002ED0  B881               	btfsc	3969,4,c	;volatile
  8730  002ED2  D003               	goto	u2850
  8731  002ED4  6A13               	clrf	??_scan_buttons& (0+255),c
  8732  002ED6  2A13               	incf	??_scan_buttons& (0+255),f,c
  8733  002ED8  D001               	goto	u2868
  8734  002EDA                     u2850:
  8735  002EDA  6A13               	clrf	??_scan_buttons& (0+255),c
  8736  002EDC                     u2868:
  8737  002EDC  5049               	movf	_button_state_bits,w,c	;volatile
  8738  002EDE  1813               	xorwf	??_scan_buttons,w,c
  8739  002EE0  0BFE               	andlw	-2
  8740  002EE2  1813               	xorwf	??_scan_buttons,w,c
  8741  002EE4  6E49               	movwf	_button_state_bits,c	;volatile
  8742                           
  8743                           ;IO_Buttons.c: 64: button_state_bits.PB_2 = !PORTBbits.RB5;
  8744  002EE6  BA81               	btfsc	3969,5,c	;volatile
  8745  002EE8  D003               	goto	u2870
  8746  002EEA  6A13               	clrf	??_scan_buttons& (0+255),c
  8747  002EEC  2A13               	incf	??_scan_buttons& (0+255),f,c
  8748  002EEE  D001               	goto	u2888
  8749  002EF0                     u2870:
  8750  002EF0  6A13               	clrf	??_scan_buttons& (0+255),c
  8751  002EF2                     u2888:
  8752  002EF2  4613               	rlncf	??_scan_buttons,f,c
  8753  002EF4  5049               	movf	_button_state_bits,w,c	;volatile
  8754  002EF6  1813               	xorwf	??_scan_buttons,w,c
  8755  002EF8  0BFD               	andlw	-3
  8756  002EFA  1813               	xorwf	??_scan_buttons,w,c
  8757  002EFC  6E49               	movwf	_button_state_bits,c	;volatile
  8758                           
  8759                           ;IO_Buttons.c: 65: LATDbits.LATD0 = 1;
  8760  002EFE  808C               	bsf	3980,0,c	;volatile
  8761                           
  8762                           ;IO_Buttons.c: 67: LATDbits.LATD1 = 0;
  8763  002F00  928C               	bcf	3980,1,c	;volatile
  8764                           
  8765                           ;IO_Buttons.c: 68: button_state_bits.PB_3 = !PORTBbits.RB4;
  8766  002F02  B881               	btfsc	3969,4,c	;volatile
  8767  002F04  D003               	goto	u2890
  8768  002F06  6A13               	clrf	??_scan_buttons& (0+255),c
  8769  002F08  2A13               	incf	??_scan_buttons& (0+255),f,c
  8770  002F0A  D001               	goto	u2908
  8771  002F0C                     u2890:
  8772  002F0C  6A13               	clrf	??_scan_buttons& (0+255),c
  8773  002F0E                     u2908:
  8774  002F0E  4613               	rlncf	??_scan_buttons,f,c
  8775  002F10  4613               	rlncf	??_scan_buttons,f,c
  8776  002F12  5049               	movf	_button_state_bits,w,c	;volatile
  8777  002F14  1813               	xorwf	??_scan_buttons,w,c
  8778  002F16  0BFB               	andlw	-5
  8779  002F18  1813               	xorwf	??_scan_buttons,w,c
  8780  002F1A  6E49               	movwf	_button_state_bits,c	;volatile
  8781                           
  8782                           ;IO_Buttons.c: 69: button_state_bits.PB_4 = !PORTBbits.RB5;
  8783  002F1C  BA81               	btfsc	3969,5,c	;volatile
  8784  002F1E  D003               	goto	u2910
  8785  002F20  6A13               	clrf	??_scan_buttons& (0+255),c
  8786  002F22  2A13               	incf	??_scan_buttons& (0+255),f,c
  8787  002F24  D001               	goto	u2928
  8788  002F26                     u2910:
  8789  002F26  6A13               	clrf	??_scan_buttons& (0+255),c
  8790  002F28                     u2928:
  8791  002F28  4613               	rlncf	??_scan_buttons,f,c
  8792  002F2A  4613               	rlncf	??_scan_buttons,f,c
  8793  002F2C  4613               	rlncf	??_scan_buttons,f,c
  8794  002F2E  5049               	movf	_button_state_bits,w,c	;volatile
  8795  002F30  1813               	xorwf	??_scan_buttons,w,c
  8796  002F32  0BF7               	andlw	-9
  8797  002F34  1813               	xorwf	??_scan_buttons,w,c
  8798  002F36  6E49               	movwf	_button_state_bits,c	;volatile
  8799                           
  8800                           ;IO_Buttons.c: 70: LATDbits.LATD1 = 1;
  8801  002F38  828C               	bsf	3980,1,c	;volatile
  8802                           
  8803                           ;IO_Buttons.c: 72: LATDbits.LATD2 = 0;
  8804  002F3A  948C               	bcf	3980,2,c	;volatile
  8805                           
  8806                           ;IO_Buttons.c: 73: button_state_bits.PB_5 = !PORTBbits.RB4;
  8807  002F3C  B881               	btfsc	3969,4,c	;volatile
  8808  002F3E  D003               	goto	u2930
  8809  002F40  6A13               	clrf	??_scan_buttons& (0+255),c
  8810  002F42  2A13               	incf	??_scan_buttons& (0+255),f,c
  8811  002F44  D001               	goto	u2948
  8812  002F46                     u2930:
  8813  002F46  6A13               	clrf	??_scan_buttons& (0+255),c
  8814  002F48                     u2948:
  8815  002F48  3A13               	swapf	??_scan_buttons,f,c
  8816  002F4A  5049               	movf	_button_state_bits,w,c	;volatile
  8817  002F4C  1813               	xorwf	??_scan_buttons,w,c
  8818  002F4E  0BEF               	andlw	-17
  8819  002F50  1813               	xorwf	??_scan_buttons,w,c
  8820  002F52  6E49               	movwf	_button_state_bits,c	;volatile
  8821                           
  8822                           ;IO_Buttons.c: 74: button_state_bits.PB_6 = !PORTBbits.RB5;
  8823  002F54  BA81               	btfsc	3969,5,c	;volatile
  8824  002F56  D003               	goto	u2950
  8825  002F58  6A13               	clrf	??_scan_buttons& (0+255),c
  8826  002F5A  2A13               	incf	??_scan_buttons& (0+255),f,c
  8827  002F5C  D001               	goto	u2968
  8828  002F5E                     u2950:
  8829  002F5E  6A13               	clrf	??_scan_buttons& (0+255),c
  8830  002F60                     u2968:
  8831  002F60  3A13               	swapf	??_scan_buttons,f,c
  8832  002F62  4613               	rlncf	??_scan_buttons,f,c
  8833  002F64  5049               	movf	_button_state_bits,w,c	;volatile
  8834  002F66  1813               	xorwf	??_scan_buttons,w,c
  8835  002F68  0BDF               	andlw	-33
  8836  002F6A  1813               	xorwf	??_scan_buttons,w,c
  8837  002F6C  6E49               	movwf	_button_state_bits,c	;volatile
  8838                           
  8839                           ;IO_Buttons.c: 75: LATDbits.LATD2 = 1;
  8840  002F6E  848C               	bsf	3980,2,c	;volatile
  8841                           
  8842                           ;IO_Buttons.c: 77: LATDbits.LATD0 = 0;
  8843  002F70  908C               	bcf	3980,0,c	;volatile
  8844                           
  8845                           ;IO_Buttons.c: 78: LATDbits.LATD1 = 0;
  8846  002F72  928C               	bcf	3980,1,c	;volatile
  8847                           
  8848                           ;IO_Buttons.c: 79: LATDbits.LATD2 = 0;
  8849  002F74  948C               	bcf	3980,2,c	;volatile
  8850  002F76  0012               	return		;funcret
  8851  002F78                     __end_of_scan_buttons:
  8852                           	opt stack 0
  8853                           tblptru	equ	0xFF8
  8854                           tblptrh	equ	0xFF7
  8855                           tblptrl	equ	0xFF6
  8856                           tablat	equ	0xFF5
  8857                           prodh	equ	0xFF4
  8858                           prodl	equ	0xFF3
  8859                           intcon	equ	0xFF2
  8860                           intcon2	equ	0xFF1
  8861                           postinc0	equ	0xFEE
  8862                           wreg	equ	0xFE8
  8863                           indf2	equ	0xFDF
  8864                           postinc2	equ	0xFDE
  8865                           postdec2	equ	0xFDD
  8866                           fsr2h	equ	0xFDA
  8867                           fsr2l	equ	0xFD9
  8868                           status	equ	0xFD8
  8869                           
  8870 ;; *************** function _IO_Buttons_configureIO *****************
  8871 ;; Defined at:
  8872 ;;		line 109 in file "IO_Buttons.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;  use_interrup    1    wreg     unsigned char 
  8875 ;;  interrupt_pr    1   18[COMRAM] unsigned char 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  use_interrup    1   19[COMRAM] unsigned char 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8887 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;Total ram usage:        2 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    5
  8894 ;; This function calls:
  8895 ;;		_disable_interrupt
  8896 ;;		_enable_interrupt
  8897 ;; This function is called by:
  8898 ;;		_main
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text40
  8903  00371C                     __ptext40:
  8904                           	opt stack 0
  8905  00371C                     _IO_Buttons_configureIO:
  8906                           	opt stack 25
  8907                           
  8908                           ;incstack = 0
  8909                           ;IO_Buttons_configureIO@use_interrupts stored from wreg
  8910  00371C  6E14               	movwf	IO_Buttons_configureIO@use_interrupts,c
  8911                           
  8912                           ;IO_Buttons.c: 111: TRISDbits.TRISD0 = 0;
  8913  00371E  9095               	bcf	3989,0,c	;volatile
  8914                           
  8915                           ;IO_Buttons.c: 112: TRISDbits.TRISD1 = 0;
  8916  003720  9295               	bcf	3989,1,c	;volatile
  8917                           
  8918                           ;IO_Buttons.c: 113: TRISDbits.TRISD2 = 0;
  8919  003722  9495               	bcf	3989,2,c	;volatile
  8920                           
  8921                           ;IO_Buttons.c: 115: TRISBbits.TRISB4 = 1;
  8922  003724  8893               	bsf	3987,4,c	;volatile
  8923                           
  8924                           ;IO_Buttons.c: 116: TRISBbits.TRISB5 = 1;
  8925  003726  8A93               	bsf	3987,5,c	;volatile
  8926                           
  8927                           ;IO_Buttons.c: 118: LATDbits.LATD0 = 0;
  8928  003728  908C               	bcf	3980,0,c	;volatile
  8929                           
  8930                           ;IO_Buttons.c: 119: LATDbits.LATD1 = 0;
  8931  00372A  928C               	bcf	3980,1,c	;volatile
  8932                           
  8933                           ;IO_Buttons.c: 120: LATDbits.LATD2 = 0;
  8934  00372C  948C               	bcf	3980,2,c	;volatile
  8935                           
  8936                           ;IO_Buttons.c: 122: INTCON2bits.nRBPU = 0;
  8937  00372E  9EF1               	bcf	intcon2,7,c	;volatile
  8938                           
  8939                           ;IO_Buttons.c: 124: if(use_interrupts == 1) {
  8940  003730  0414               	decf	IO_Buttons_configureIO@use_interrupts,w,c
  8941  003732  A4D8               	btfss	status,2,c
  8942  003734  D003               	goto	l3366
  8943                           
  8944                           ;IO_Buttons.c: 125: enable_interrupt();
  8945  003736  EC0F  F01C         	call	_enable_interrupt	;wreg free
  8946                           
  8947                           ;IO_Buttons.c: 126: }
  8948  00373A  D004               	goto	l3370
  8949  00373C                     l3366:
  8950                           
  8951                           ;IO_Buttons.c: 128: else if(use_interrupts == 0) {
  8952  00373C  5014               	movf	IO_Buttons_configureIO@use_interrupts,w,c
  8953  00373E  B4D8               	btfsc	status,2,c
  8954                           
  8955                           ;IO_Buttons.c: 129: disable_interrupt();
  8956  003740  ECA2  F01C         	call	_disable_interrupt	;wreg free
  8957  003744                     l3370:
  8958                           
  8959                           ;IO_Buttons.c: 130: }
  8960                           ;IO_Buttons.c: 132: buttons_use_interrupts = use_interrupts;
  8961  003744  C014  F03F         	movff	IO_Buttons_configureIO@use_interrupts,_buttons_use_interrupts	;volatile
  8962                           
  8963                           ;IO_Buttons.c: 133: buttons_interrupt_priority = interrupt_priority;
  8964  003748  C013  F03E         	movff	IO_Buttons_configureIO@interrupt_priority,_buttons_interrupt_priority	;volatile
  8965  00374C  0012               	return		;funcret
  8966  00374E                     __end_of_IO_Buttons_configureIO:
  8967                           	opt stack 0
  8968                           tblptru	equ	0xFF8
  8969                           tblptrh	equ	0xFF7
  8970                           tblptrl	equ	0xFF6
  8971                           tablat	equ	0xFF5
  8972                           prodh	equ	0xFF4
  8973                           prodl	equ	0xFF3
  8974                           intcon	equ	0xFF2
  8975                           intcon2	equ	0xFF1
  8976                           postinc0	equ	0xFEE
  8977                           wreg	equ	0xFE8
  8978                           indf2	equ	0xFDF
  8979                           postinc2	equ	0xFDE
  8980                           postdec2	equ	0xFDD
  8981                           fsr2h	equ	0xFDA
  8982                           fsr2l	equ	0xFD9
  8983                           status	equ	0xFD8
  8984                           
  8985 ;; *************** function _enable_interrupt *****************
  8986 ;; Defined at:
  8987 ;;		line 33 in file "IO_Buttons.c"
  8988 ;; Parameters:    Size  Location     Type
  8989 ;;		None
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;		None
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  1    wreg      void 
  8994 ;; Registers used:
  8995 ;;		wreg, status,2, status,0
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;Total ram usage:        0 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:    4
  9008 ;; This function calls:
  9009 ;;		Nothing
  9010 ;; This function is called by:
  9011 ;;		_IO_Buttons_configureIO
  9012 ;;		_IO_Buttons_enableInterrupt
  9013 ;;		_IO_Buttons_switchInterruptPriority
  9014 ;; This function uses a non-reentrant model
  9015 ;;
  9016                           
  9017                           	psect	text41
  9018  00381E                     __ptext41:
  9019                           	opt stack 0
  9020  00381E                     _enable_interrupt:
  9021                           	opt stack 25
  9022                           
  9023                           ;IO_Buttons.c: 35: if(PORTB) {
  9024                           
  9025                           ;incstack = 0
  9026  00381E  5081               	movf	3969,w,c	;volatile
  9027  003820  A4D8               	btfss	status,2,c
  9028  003822  F000               	nop		;# 
  9029                           
  9030                           ;IO_Buttons.c: 37: }
  9031                           ;IO_Buttons.c: 39: if(buttons_interrupt_priority == 0) {
  9032  003824  503E               	movf	_buttons_interrupt_priority,w,c	;volatile
  9033  003826  A4D8               	btfss	status,2,c
  9034  003828  D002               	goto	l2936
  9035                           
  9036                           ;IO_Buttons.c: 40: INTCON2bits.RBIP = 0;
  9037  00382A  90F1               	bcf	intcon2,0,c	;volatile
  9038                           
  9039                           ;IO_Buttons.c: 41: }
  9040  00382C  D003               	goto	l38
  9041  00382E                     l2936:
  9042                           
  9043                           ;IO_Buttons.c: 43: else if(buttons_interrupt_priority == 1) {
  9044  00382E  043E               	decf	_buttons_interrupt_priority,w,c	;volatile
  9045  003830  B4D8               	btfsc	status,2,c
  9046                           
  9047                           ;IO_Buttons.c: 44: INTCON2bits.RBIP = 1;
  9048  003832  80F1               	bsf	intcon2,0,c	;volatile
  9049  003834                     l38:
  9050                           
  9051                           ;IO_Buttons.c: 45: }
  9052                           ;IO_Buttons.c: 47: INTCONbits.RBIF = 0;
  9053  003834  90F2               	bcf	intcon,0,c	;volatile
  9054                           
  9055                           ;IO_Buttons.c: 48: INTCONbits.RBIE = 1;
  9056  003836  86F2               	bsf	intcon,3,c	;volatile
  9057  003838  0012               	return		;funcret
  9058  00383A                     __end_of_enable_interrupt:
  9059                           	opt stack 0
  9060                           tblptru	equ	0xFF8
  9061                           tblptrh	equ	0xFF7
  9062                           tblptrl	equ	0xFF6
  9063                           tablat	equ	0xFF5
  9064                           prodh	equ	0xFF4
  9065                           prodl	equ	0xFF3
  9066                           intcon	equ	0xFF2
  9067                           intcon2	equ	0xFF1
  9068                           postinc0	equ	0xFEE
  9069                           wreg	equ	0xFE8
  9070                           indf2	equ	0xFDF
  9071                           postinc2	equ	0xFDE
  9072                           postdec2	equ	0xFDD
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function _disable_interrupt *****************
  9078 ;; Defined at:
  9079 ;;		line 22 in file "IO_Buttons.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;		None
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;		None
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  1    wreg      void 
  9086 ;; Registers used:
  9087 ;;		wreg, status,2
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9097 ;;Total ram usage:        0 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    4
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_IO_Buttons_configureIO
  9104 ;;		_IO_Buttons_disableInterrupt
  9105 ;;		_IO_Buttons_switchInterruptPriority
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           	psect	text42
  9110  003944                     __ptext42:
  9111                           	opt stack 0
  9112  003944                     _disable_interrupt:
  9113                           	opt stack 25
  9114                           
  9115                           ;IO_Buttons.c: 24: if(PORTB) {
  9116                           
  9117                           ;incstack = 0
  9118  003944  5081               	movf	3969,w,c	;volatile
  9119  003946  A4D8               	btfss	status,2,c
  9120  003948  F000               	nop		;# 
  9121                           
  9122                           ;IO_Buttons.c: 26: }
  9123                           ;IO_Buttons.c: 28: INTCONbits.RBIE = 0;
  9124  00394A  96F2               	bcf	intcon,3,c	;volatile
  9125                           
  9126                           ;IO_Buttons.c: 29: INTCONbits.RBIF = 0;
  9127  00394C  90F2               	bcf	intcon,0,c	;volatile
  9128  00394E  0012               	return		;funcret
  9129  003950                     __end_of_disable_interrupt:
  9130                           	opt stack 0
  9131                           tblptru	equ	0xFF8
  9132                           tblptrh	equ	0xFF7
  9133                           tblptrl	equ	0xFF6
  9134                           tablat	equ	0xFF5
  9135                           prodh	equ	0xFF4
  9136                           prodl	equ	0xFF3
  9137                           intcon	equ	0xFF2
  9138                           intcon2	equ	0xFF1
  9139                           postinc0	equ	0xFEE
  9140                           wreg	equ	0xFE8
  9141                           indf2	equ	0xFDF
  9142                           postinc2	equ	0xFDE
  9143                           postdec2	equ	0xFDD
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8
  9147                           
  9148 ;; *************** function _Delay10KTCYx *****************
  9149 ;; Defined at:
  9150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\d10ktcyx.c"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;  unit            1    wreg     unsigned char 
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  unit            1   19[COMRAM] unsigned char 
  9155 ;; Return value:  Size  Location     Type
  9156 ;;                  1    wreg      void 
  9157 ;; Registers used:
  9158 ;;		wreg
  9159 ;; Tracked objects:
  9160 ;;		On entry : 0/0
  9161 ;;		On exit  : 0/0
  9162 ;;		Unchanged: 0/0
  9163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;Total ram usage:        2 bytes
  9169 ;; Hardware stack levels used:    1
  9170 ;; Hardware stack levels required when called:    4
  9171 ;; This function calls:
  9172 ;;		Nothing
  9173 ;; This function is called by:
  9174 ;;		_main
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           	psect	text43
  9179  0038BC                     __ptext43:
  9180                           	opt stack 0
  9181  0038BC                     _Delay10KTCYx:
  9182                           	opt stack 26
  9183                           
  9184                           ;incstack = 0
  9185                           ;Delay10KTCYx@unit stored from wreg
  9186  0038BC  6E14               	movwf	Delay10KTCYx@unit,c
  9187  0038BE  0E0D               	movlw	13
  9188  0038C0  6E13               	movwf	??_Delay10KTCYx& (0+255),c
  9189  0038C2  0EFC               	movlw	252
  9190  0038C4                     u6077:
  9191  0038C4  2EE8               	decfsz	wreg,f,c
  9192  0038C6  D7FE               	goto	u6077
  9193  0038C8  2E13               	decfsz	??_Delay10KTCYx& (0+255),f,c
  9194  0038CA  D7FC               	goto	u6077
  9195  0038CC  2E14               	decfsz	Delay10KTCYx@unit,f,c
  9196  0038CE  D7F7               	goto	l3530
  9197  0038D0  0012               	return	
  9198  0038D2                     __end_of_Delay10KTCYx:
  9199                           	opt stack 0
  9200                           tblptru	equ	0xFF8
  9201                           tblptrh	equ	0xFF7
  9202                           tblptrl	equ	0xFF6
  9203                           tablat	equ	0xFF5
  9204                           prodh	equ	0xFF4
  9205                           prodl	equ	0xFF3
  9206                           intcon	equ	0xFF2
  9207                           intcon2	equ	0xFF1
  9208                           postinc0	equ	0xFEE
  9209                           wreg	equ	0xFE8
  9210                           indf2	equ	0xFDF
  9211                           postinc2	equ	0xFDE
  9212                           postdec2	equ	0xFDD
  9213                           fsr2h	equ	0xFDA
  9214                           fsr2l	equ	0xFD9
  9215                           status	equ	0xFD8
  9216                           
  9217 ;; *************** function _ISR *****************
  9218 ;; Defined at:
  9219 ;;		line 18 in file "test2.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;		None
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;		None
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      void 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;Total ram usage:       14 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    3
  9240 ;; This function calls:
  9241 ;;		_IO_Buttons_ISR
  9242 ;;		_IO_Encoder_ISR
  9243 ;;		_TMR_SysTick_ISR
  9244 ;; This function is called by:
  9245 ;;		Interrupt level 2
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	intcode
  9250  000008                     __pintcode:
  9251                           	opt stack 0
  9252  000008                     _ISR:
  9253                           	opt stack 23
  9254                           
  9255                           ;incstack = 0
  9256  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9257  00000A  CFFA F005          	movff	pclath,??_ISR
  9258  00000E  CFFB F006          	movff	pclatu,??_ISR+1
  9259  000012  EDFE  F018         	call	int_func,f	;refresh shadow registers
  9260                           pclatu	equ	0xFFB
  9261                           pclath	equ	0xFFA
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           intcon2	equ	0xFF1
  9270                           postinc0	equ	0xFEE
  9271                           wreg	equ	0xFE8
  9272                           indf2	equ	0xFDF
  9273                           postinc2	equ	0xFDE
  9274                           postdec2	equ	0xFDD
  9275                           fsr2h	equ	0xFDA
  9276                           fsr2l	equ	0xFD9
  9277                           status	equ	0xFD8
  9278                           
  9279                           	psect	intcode_body
  9280  0031FC                     __pintcode_body:
  9281                           	opt stack 23
  9282  0031FC                     int_func:
  9283                           	opt stack 23
  9284  0031FC  0006               	pop		; remove dummy address from shadow register refresh
  9285  0031FE  CFE9 F007          	movff	fsr0l,??_ISR+2
  9286  003202  CFEA F008          	movff	fsr0h,??_ISR+3
  9287  003206  CFE1 F009          	movff	fsr1l,??_ISR+4
  9288  00320A  CFE2 F00A          	movff	fsr1h,??_ISR+5
  9289  00320E  CFD9 F00B          	movff	fsr2l,??_ISR+6
  9290  003212  CFDA F00C          	movff	fsr2h,??_ISR+7
  9291  003216  CFF3 F00D          	movff	prodl,??_ISR+8
  9292  00321A  CFF4 F00E          	movff	prodh,??_ISR+9
  9293  00321E  CFF6 F00F          	movff	tblptrl,??_ISR+10
  9294  003222  CFF7 F010          	movff	tblptrh,??_ISR+11
  9295  003226  CFF8 F011          	movff	tblptru,??_ISR+12
  9296  00322A  CFF5 F012          	movff	tablat,??_ISR+13
  9297                           
  9298                           ;test2.c: 20: if(INTCONbits.TMR0IF == 1) {
  9299  00322E  A4F2               	btfss	intcon,2,c	;volatile
  9300  003230  D004               	goto	i2l3960
  9301                           
  9302                           ;test2.c: 21: TMR_SysTick_ISR();
  9303  003232  ECA8  F01C         	call	_TMR_SysTick_ISR	;wreg free
  9304                           
  9305                           ;test2.c: 23: IO_Encoder_ISR();
  9306  003236  EC57  F01B         	call	_IO_Encoder_ISR	;wreg free
  9307  00323A                     i2l3960:
  9308                           
  9309                           ;test2.c: 24: }
  9310                           ;test2.c: 26: if(INTCONbits.RBIF == 1) {
  9311  00323A  B0F2               	btfsc	intcon,0,c	;volatile
  9312                           
  9313                           ;test2.c: 28: IO_Buttons_ISR();
  9314  00323C  EC9B  F01C         	call	_IO_Buttons_ISR	;wreg free
  9315                           
  9316                           ;test2.c: 29: }
  9317                           ;test2.c: 31: if(PIR3bits.CCP3IF) {
  9318  003240  A0A4               	btfss	4004,0,c	;volatile
  9319  003242  D004               	goto	i2l357
  9320                           
  9321                           ;test2.c: 33: PIR3bits.CCP3IF = 0;
  9322  003244  90A4               	bcf	4004,0,c	;volatile
  9323                           
  9324                           ;test2.c: 34: done = 1;
  9325  003246  0E01               	movlw	1
  9326  003248  0100               	movlb	0	; () banked
  9327  00324A  6FB5               	movwf	_done& (0+255),b	;volatile
  9328  00324C                     i2l357:
  9329  00324C  C012  FFF5         	movff	??_ISR+13,tablat
  9330  003250  C011  FFF8         	movff	??_ISR+12,tblptru
  9331  003254  C010  FFF7         	movff	??_ISR+11,tblptrh
  9332  003258  C00F  FFF6         	movff	??_ISR+10,tblptrl
  9333  00325C  C00E  FFF4         	movff	??_ISR+9,prodh
  9334  003260  C00D  FFF3         	movff	??_ISR+8,prodl
  9335  003264  C00C  FFDA         	movff	??_ISR+7,fsr2h
  9336  003268  C00B  FFD9         	movff	??_ISR+6,fsr2l
  9337  00326C  C00A  FFE2         	movff	??_ISR+5,fsr1h
  9338  003270  C009  FFE1         	movff	??_ISR+4,fsr1l
  9339  003274  C008  FFEA         	movff	??_ISR+3,fsr0h
  9340  003278  C007  FFE9         	movff	??_ISR+2,fsr0l
  9341  00327C  C006  FFFB         	movff	??_ISR+1,pclatu
  9342  003280  C005  FFFA         	movff	??_ISR,pclath
  9343  003284  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9344  003286  0011               	retfie		f
  9345  003288                     __end_of_ISR:
  9346                           	opt stack 0
  9347                           pclatu	equ	0xFFB
  9348                           pclath	equ	0xFFA
  9349                           tblptru	equ	0xFF8
  9350                           tblptrh	equ	0xFF7
  9351                           tblptrl	equ	0xFF6
  9352                           tablat	equ	0xFF5
  9353                           prodh	equ	0xFF4
  9354                           prodl	equ	0xFF3
  9355                           intcon	equ	0xFF2
  9356                           intcon2	equ	0xFF1
  9357                           postinc0	equ	0xFEE
  9358                           fsr0h	equ	0xFEA
  9359                           fsr0l	equ	0xFE9
  9360                           wreg	equ	0xFE8
  9361                           fsr1h	equ	0xFE2
  9362                           fsr1l	equ	0xFE1
  9363                           indf2	equ	0xFDF
  9364                           postinc2	equ	0xFDE
  9365                           postdec2	equ	0xFDD
  9366                           fsr2h	equ	0xFDA
  9367                           fsr2l	equ	0xFD9
  9368                           status	equ	0xFD8
  9369                           
  9370 ;; *************** function _TMR_SysTick_ISR *****************
  9371 ;; Defined at:
  9372 ;;		line 11 in file "TMR_SysTick.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;		None
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;		None
  9377 ;; Return value:  Size  Location     Type
  9378 ;;                  1    wreg      void 
  9379 ;; Registers used:
  9380 ;;		status,2, status,0, cstack
  9381 ;; Tracked objects:
  9382 ;;		On entry : 0/0
  9383 ;;		On exit  : 0/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;Total ram usage:        0 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    2
  9393 ;; This function calls:
  9394 ;;		i2_reload_timer
  9395 ;; This function is called by:
  9396 ;;		_ISR
  9397 ;; This function uses a non-reentrant model
  9398 ;;
  9399                           
  9400                           	psect	text45
  9401  003950                     __ptext45:
  9402                           	opt stack 0
  9403  003950                     _TMR_SysTick_ISR:
  9404                           	opt stack 23
  9405                           
  9406                           ;TMR_SysTick.c: 13: INTCONbits.TMR0IF = 0;
  9407                           
  9408                           ;incstack = 0
  9409  003950  94F2               	bcf	intcon,2,c	;volatile
  9410                           
  9411                           ;TMR_SysTick.c: 15: counter++;
  9412  003952  4A3C               	infsnz	_counter,f,c	;volatile
  9413  003954  2A3D               	incf	_counter+1,f,c	;volatile
  9414                           
  9415                           ;TMR_SysTick.c: 17: reload_timer();
  9416  003956  EC94  F01C         	call	i2_reload_timer	;wreg free
  9417  00395A  0012               	return		;funcret
  9418  00395C                     __end_of_TMR_SysTick_ISR:
  9419                           	opt stack 0
  9420                           pclatu	equ	0xFFB
  9421                           pclath	equ	0xFFA
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           intcon2	equ	0xFF1
  9430                           postinc0	equ	0xFEE
  9431                           fsr0h	equ	0xFEA
  9432                           fsr0l	equ	0xFE9
  9433                           wreg	equ	0xFE8
  9434                           fsr1h	equ	0xFE2
  9435                           fsr1l	equ	0xFE1
  9436                           indf2	equ	0xFDF
  9437                           postinc2	equ	0xFDE
  9438                           postdec2	equ	0xFDD
  9439                           fsr2h	equ	0xFDA
  9440                           fsr2l	equ	0xFD9
  9441                           status	equ	0xFD8
  9442                           
  9443 ;; *************** function i2_reload_timer *****************
  9444 ;; Defined at:
  9445 ;;		line 33 in file "TMR_SysTick.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;		None
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;		None
  9450 ;; Return value:  Size  Location     Type
  9451 ;;                  1    wreg      void 
  9452 ;; Registers used:
  9453 ;;		cstack
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;Total ram usage:        0 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    1
  9466 ;; This function calls:
  9467 ;;		i2_WriteTimer0
  9468 ;; This function is called by:
  9469 ;;		_TMR_SysTick_ISR
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text46
  9474  003928                     __ptext46:
  9475                           	opt stack 0
  9476  003928                     i2_reload_timer:
  9477                           	opt stack 23
  9478                           
  9479                           ;TMR_SysTick.c: 35: WriteTimer0(systick_tmr_reload);
  9480                           
  9481                           ;incstack = 0
  9482  003928  C04A  F001         	movff	_systick_tmr_reload,i2WriteTimer0@timer0	;volatile
  9483  00392C  C04B  F002         	movff	_systick_tmr_reload+1,i2WriteTimer0@timer0+1	;volatile
  9484  003930  EC84  F01C         	call	i2_WriteTimer0	;wreg free
  9485  003934  0012               	return		;funcret
  9486  003936                     __end_ofi2_reload_timer:
  9487                           	opt stack 0
  9488                           pclatu	equ	0xFFB
  9489                           pclath	equ	0xFFA
  9490                           tblptru	equ	0xFF8
  9491                           tblptrh	equ	0xFF7
  9492                           tblptrl	equ	0xFF6
  9493                           tablat	equ	0xFF5
  9494                           prodh	equ	0xFF4
  9495                           prodl	equ	0xFF3
  9496                           intcon	equ	0xFF2
  9497                           intcon2	equ	0xFF1
  9498                           postinc0	equ	0xFEE
  9499                           fsr0h	equ	0xFEA
  9500                           fsr0l	equ	0xFE9
  9501                           wreg	equ	0xFE8
  9502                           fsr1h	equ	0xFE2
  9503                           fsr1l	equ	0xFE1
  9504                           indf2	equ	0xFDF
  9505                           postinc2	equ	0xFDE
  9506                           postdec2	equ	0xFDD
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function i2_WriteTimer0 *****************
  9512 ;; Defined at:
  9513 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t0write.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;  timer0          2    0[COMRAM] unsigned int 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  WriteTimer0     2    2[COMRAM] struct Timers
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      void 
  9520 ;; Registers used:
  9521 ;;		None
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;Total ram usage:        4 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		i2_reload_timer
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           	psect	text47
  9541  003908                     __ptext47:
  9542                           	opt stack 0
  9543  003908                     i2_WriteTimer0:
  9544                           	opt stack 23
  9545                           
  9546                           ;incstack = 0
  9547  003908  C001  F003         	movff	i2WriteTimer0@timer0,i2WriteTimer0@timer
  9548  00390C  C002  F004         	movff	i2WriteTimer0@timer0+1,i2WriteTimer0@timer+1
  9549  003910  C004  FFD7         	movff	i2WriteTimer0@timer+1,4055	;volatile
  9550  003914  C003  FFD6         	movff	i2WriteTimer0@timer,4054	;volatile
  9551  003918  0012               	return		;funcret
  9552  00391A                     __end_ofi2_WriteTimer0:
  9553                           	opt stack 0
  9554                           pclatu	equ	0xFFB
  9555                           pclath	equ	0xFFA
  9556                           tblptru	equ	0xFF8
  9557                           tblptrh	equ	0xFF7
  9558                           tblptrl	equ	0xFF6
  9559                           tablat	equ	0xFF5
  9560                           prodh	equ	0xFF4
  9561                           prodl	equ	0xFF3
  9562                           intcon	equ	0xFF2
  9563                           intcon2	equ	0xFF1
  9564                           postinc0	equ	0xFEE
  9565                           fsr0h	equ	0xFEA
  9566                           fsr0l	equ	0xFE9
  9567                           wreg	equ	0xFE8
  9568                           fsr1h	equ	0xFE2
  9569                           fsr1l	equ	0xFE1
  9570                           indf2	equ	0xFDF
  9571                           postinc2	equ	0xFDE
  9572                           postdec2	equ	0xFDD
  9573                           fsr2h	equ	0xFDA
  9574                           fsr2l	equ	0xFD9
  9575                           status	equ	0xFD8
  9576                           
  9577 ;; *************** function _IO_Encoder_ISR *****************
  9578 ;; Defined at:
  9579 ;;		line 8 in file "IO_Encoder.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;		None
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;		None
  9584 ;; Return value:  Size  Location     Type
  9585 ;;                  1    wreg      void 
  9586 ;; Registers used:
  9587 ;;		wreg, status,2, status,0
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;Total ram usage:        0 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_ISR
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text48
  9607  0036AE                     __ptext48:
  9608                           	opt stack 0
  9609  0036AE                     _IO_Encoder_ISR:
  9610                           	opt stack 25
  9611                           
  9612                           ;IO_Encoder.c: 10: enc_A = PORTGbits.RG3;
  9613                           
  9614                           ;incstack = 0
  9615  0036AE  0E00               	movlw	0
  9616  0036B0  B686               	btfsc	3974,3,c	;volatile
  9617  0036B2  0E01               	movlw	1
  9618  0036B4  6E40               	movwf	_enc_A,c	;volatile
  9619                           
  9620                           ;IO_Encoder.c: 11: enc_B = PORTGbits.RG4;
  9621  0036B6  0E00               	movlw	0
  9622  0036B8  B886               	btfsc	3974,4,c	;volatile
  9623  0036BA  0E01               	movlw	1
  9624  0036BC  6E42               	movwf	_enc_B,c	;volatile
  9625                           
  9626                           ;IO_Encoder.c: 13: if(!enc_A && enc_A_prev){
  9627  0036BE  5040               	movf	_enc_A,w,c	;volatile
  9628  0036C0  A4D8               	btfss	status,2,c
  9629  0036C2  D00E               	goto	i2l3422
  9630  0036C4  5041               	movf	_enc_A_prev,w,c	;volatile
  9631  0036C6  B4D8               	btfsc	status,2,c
  9632  0036C8  D00B               	goto	i2l3422
  9633                           
  9634                           ;IO_Encoder.c: 16: if(enc_B) {
  9635  0036CA  5042               	movf	_enc_B,w,c	;volatile
  9636  0036CC  B4D8               	btfsc	status,2,c
  9637  0036CE  D004               	goto	i2l3418
  9638                           
  9639                           ;IO_Encoder.c: 18: enc_state.count++;
  9640  0036D0  4A43               	infsnz	_enc_state,f,c	;volatile
  9641  0036D2  2A44               	incf	_enc_state+1,f,c	;volatile
  9642                           
  9643                           ;IO_Encoder.c: 19: enc_state.direction = 1;
  9644  0036D4  8045               	bsf	_enc_state+2,0,c	;volatile
  9645                           
  9646                           ;IO_Encoder.c: 20: }
  9647  0036D6  D004               	goto	i2l3422
  9648  0036D8                     i2l3418:
  9649                           
  9650                           ;IO_Encoder.c: 21: else {
  9651                           ;IO_Encoder.c: 23: enc_state.count--;
  9652  0036D8  0643               	decf	_enc_state,f,c	;volatile
  9653  0036DA  A0D8               	btfss	status,0,c
  9654  0036DC  0644               	decf	_enc_state+1,f,c	;volatile
  9655                           
  9656                           ;IO_Encoder.c: 24: enc_state.direction = 0;
  9657  0036DE  9045               	bcf	_enc_state+2,0,c	;volatile
  9658  0036E0                     i2l3422:
  9659                           
  9660                           ;IO_Encoder.c: 25: }
  9661                           ;IO_Encoder.c: 26: }
  9662                           ;IO_Encoder.c: 28: enc_A_prev = enc_A;
  9663  0036E0  C040  F041         	movff	_enc_A,_enc_A_prev	;volatile
  9664  0036E4  0012               	return		;funcret
  9665  0036E6                     __end_of_IO_Encoder_ISR:
  9666                           	opt stack 0
  9667                           pclatu	equ	0xFFB
  9668                           pclath	equ	0xFFA
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           intcon2	equ	0xFF1
  9677                           postinc0	equ	0xFEE
  9678                           fsr0h	equ	0xFEA
  9679                           fsr0l	equ	0xFE9
  9680                           wreg	equ	0xFE8
  9681                           fsr1h	equ	0xFE2
  9682                           fsr1l	equ	0xFE1
  9683                           indf2	equ	0xFDF
  9684                           postinc2	equ	0xFDE
  9685                           postdec2	equ	0xFDD
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function _IO_Buttons_ISR *****************
  9691 ;; Defined at:
  9692 ;;		line 12 in file "IO_Buttons.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;		None
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      void 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2, status,0, cstack
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;Total ram usage:        0 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    1
  9713 ;; This function calls:
  9714 ;;		i2_disable_interrupt
  9715 ;;		i2_enable_interrupt
  9716 ;;		i2_scan_buttons
  9717 ;; This function is called by:
  9718 ;;		_ISR
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text49
  9723  003936                     __ptext49:
  9724                           	opt stack 0
  9725  003936                     _IO_Buttons_ISR:
  9726                           	opt stack 24
  9727                           
  9728                           ;IO_Buttons.c: 14: disable_interrupt();
  9729                           
  9730                           ;incstack = 0
  9731  003936  ECAE  F01C         	call	i2_disable_interrupt	;wreg free
  9732                           
  9733                           ;IO_Buttons.c: 16: scan_buttons();
  9734  00393A  ECBC  F017         	call	i2_scan_buttons	;wreg free
  9735                           
  9736                           ;IO_Buttons.c: 18: enable_interrupt();
  9737  00393E  EC1D  F01C         	call	i2_enable_interrupt	;wreg free
  9738  003942  0012               	return		;funcret
  9739  003944                     __end_of_IO_Buttons_ISR:
  9740                           	opt stack 0
  9741                           pclatu	equ	0xFFB
  9742                           pclath	equ	0xFFA
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           intcon	equ	0xFF2
  9750                           intcon2	equ	0xFF1
  9751                           postinc0	equ	0xFEE
  9752                           fsr0h	equ	0xFEA
  9753                           fsr0l	equ	0xFE9
  9754                           wreg	equ	0xFE8
  9755                           fsr1h	equ	0xFE2
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function i2_scan_buttons *****************
  9765 ;; Defined at:
  9766 ;;		line 52 in file "IO_Buttons.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;		None
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      void 
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, status,0
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        1 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; This function calls:
  9787 ;;		Nothing
  9788 ;; This function is called by:
  9789 ;;		_IO_Buttons_ISR
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text50
  9794  002F78                     __ptext50:
  9795                           	opt stack 0
  9796  002F78                     i2_scan_buttons:
  9797                           	opt stack 24
  9798                           
  9799                           ;IO_Buttons.c: 54: if(PORTB) {
  9800                           
  9801                           ;incstack = 0
  9802  002F78  5081               	movf	3969,w,c	;volatile
  9803  002F7A  A4D8               	btfss	status,2,c
  9804  002F7C  F000               	nop		;# 
  9805                           
  9806                           ;IO_Buttons.c: 56: }
  9807                           ;IO_Buttons.c: 58: LATDbits.LATD0 = 1;
  9808  002F7E  808C               	bsf	3980,0,c	;volatile
  9809                           
  9810                           ;IO_Buttons.c: 59: LATDbits.LATD1 = 1;
  9811  002F80  828C               	bsf	3980,1,c	;volatile
  9812                           
  9813                           ;IO_Buttons.c: 60: LATDbits.LATD2 = 1;
  9814  002F82  848C               	bsf	3980,2,c	;volatile
  9815                           
  9816                           ;IO_Buttons.c: 62: LATDbits.LATD0 = 0;
  9817  002F84  908C               	bcf	3980,0,c	;volatile
  9818                           
  9819                           ;IO_Buttons.c: 63: button_state_bits.PB_1 = !PORTBbits.RB4;
  9820  002F86  B881               	btfsc	3969,4,c	;volatile
  9821  002F88  D003               	goto	i2u358_40
  9822  002F8A  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9823  002F8C  2A01               	incf	??i2_scan_buttons& (0+255),f,c
  9824  002F8E  D001               	goto	i2u359_48
  9825  002F90                     i2u358_40:
  9826  002F90  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9827  002F92                     i2u359_48:
  9828  002F92  5049               	movf	_button_state_bits,w,c	;volatile
  9829  002F94  1801               	xorwf	??i2_scan_buttons,w,c
  9830  002F96  0BFE               	andlw	-2
  9831  002F98  1801               	xorwf	??i2_scan_buttons,w,c
  9832  002F9A  6E49               	movwf	_button_state_bits,c	;volatile
  9833                           
  9834                           ;IO_Buttons.c: 64: button_state_bits.PB_2 = !PORTBbits.RB5;
  9835  002F9C  BA81               	btfsc	3969,5,c	;volatile
  9836  002F9E  D003               	goto	i2u360_40
  9837  002FA0  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9838  002FA2  2A01               	incf	??i2_scan_buttons& (0+255),f,c
  9839  002FA4  D001               	goto	i2u361_48
  9840  002FA6                     i2u360_40:
  9841  002FA6  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9842  002FA8                     i2u361_48:
  9843  002FA8  4601               	rlncf	??i2_scan_buttons,f,c
  9844  002FAA  5049               	movf	_button_state_bits,w,c	;volatile
  9845  002FAC  1801               	xorwf	??i2_scan_buttons,w,c
  9846  002FAE  0BFD               	andlw	-3
  9847  002FB0  1801               	xorwf	??i2_scan_buttons,w,c
  9848  002FB2  6E49               	movwf	_button_state_bits,c	;volatile
  9849                           
  9850                           ;IO_Buttons.c: 65: LATDbits.LATD0 = 1;
  9851  002FB4  808C               	bsf	3980,0,c	;volatile
  9852                           
  9853                           ;IO_Buttons.c: 67: LATDbits.LATD1 = 0;
  9854  002FB6  928C               	bcf	3980,1,c	;volatile
  9855                           
  9856                           ;IO_Buttons.c: 68: button_state_bits.PB_3 = !PORTBbits.RB4;
  9857  002FB8  B881               	btfsc	3969,4,c	;volatile
  9858  002FBA  D003               	goto	i2u362_40
  9859  002FBC  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9860  002FBE  2A01               	incf	??i2_scan_buttons& (0+255),f,c
  9861  002FC0  D001               	goto	i2u363_48
  9862  002FC2                     i2u362_40:
  9863  002FC2  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9864  002FC4                     i2u363_48:
  9865  002FC4  4601               	rlncf	??i2_scan_buttons,f,c
  9866  002FC6  4601               	rlncf	??i2_scan_buttons,f,c
  9867  002FC8  5049               	movf	_button_state_bits,w,c	;volatile
  9868  002FCA  1801               	xorwf	??i2_scan_buttons,w,c
  9869  002FCC  0BFB               	andlw	-5
  9870  002FCE  1801               	xorwf	??i2_scan_buttons,w,c
  9871  002FD0  6E49               	movwf	_button_state_bits,c	;volatile
  9872                           
  9873                           ;IO_Buttons.c: 69: button_state_bits.PB_4 = !PORTBbits.RB5;
  9874  002FD2  BA81               	btfsc	3969,5,c	;volatile
  9875  002FD4  D003               	goto	i2u364_40
  9876  002FD6  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9877  002FD8  2A01               	incf	??i2_scan_buttons& (0+255),f,c
  9878  002FDA  D001               	goto	i2u365_48
  9879  002FDC                     i2u364_40:
  9880  002FDC  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9881  002FDE                     i2u365_48:
  9882  002FDE  4601               	rlncf	??i2_scan_buttons,f,c
  9883  002FE0  4601               	rlncf	??i2_scan_buttons,f,c
  9884  002FE2  4601               	rlncf	??i2_scan_buttons,f,c
  9885  002FE4  5049               	movf	_button_state_bits,w,c	;volatile
  9886  002FE6  1801               	xorwf	??i2_scan_buttons,w,c
  9887  002FE8  0BF7               	andlw	-9
  9888  002FEA  1801               	xorwf	??i2_scan_buttons,w,c
  9889  002FEC  6E49               	movwf	_button_state_bits,c	;volatile
  9890                           
  9891                           ;IO_Buttons.c: 70: LATDbits.LATD1 = 1;
  9892  002FEE  828C               	bsf	3980,1,c	;volatile
  9893                           
  9894                           ;IO_Buttons.c: 72: LATDbits.LATD2 = 0;
  9895  002FF0  948C               	bcf	3980,2,c	;volatile
  9896                           
  9897                           ;IO_Buttons.c: 73: button_state_bits.PB_5 = !PORTBbits.RB4;
  9898  002FF2  B881               	btfsc	3969,4,c	;volatile
  9899  002FF4  D003               	goto	i2u366_40
  9900  002FF6  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9901  002FF8  2A01               	incf	??i2_scan_buttons& (0+255),f,c
  9902  002FFA  D001               	goto	i2u367_48
  9903  002FFC                     i2u366_40:
  9904  002FFC  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9905  002FFE                     i2u367_48:
  9906  002FFE  3A01               	swapf	??i2_scan_buttons,f,c
  9907  003000  5049               	movf	_button_state_bits,w,c	;volatile
  9908  003002  1801               	xorwf	??i2_scan_buttons,w,c
  9909  003004  0BEF               	andlw	-17
  9910  003006  1801               	xorwf	??i2_scan_buttons,w,c
  9911  003008  6E49               	movwf	_button_state_bits,c	;volatile
  9912                           
  9913                           ;IO_Buttons.c: 74: button_state_bits.PB_6 = !PORTBbits.RB5;
  9914  00300A  BA81               	btfsc	3969,5,c	;volatile
  9915  00300C  D003               	goto	i2u368_40
  9916  00300E  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9917  003010  2A01               	incf	??i2_scan_buttons& (0+255),f,c
  9918  003012  D001               	goto	i2u369_48
  9919  003014                     i2u368_40:
  9920  003014  6A01               	clrf	??i2_scan_buttons& (0+255),c
  9921  003016                     i2u369_48:
  9922  003016  3A01               	swapf	??i2_scan_buttons,f,c
  9923  003018  4601               	rlncf	??i2_scan_buttons,f,c
  9924  00301A  5049               	movf	_button_state_bits,w,c	;volatile
  9925  00301C  1801               	xorwf	??i2_scan_buttons,w,c
  9926  00301E  0BDF               	andlw	-33
  9927  003020  1801               	xorwf	??i2_scan_buttons,w,c
  9928  003022  6E49               	movwf	_button_state_bits,c	;volatile
  9929                           
  9930                           ;IO_Buttons.c: 75: LATDbits.LATD2 = 1;
  9931  003024  848C               	bsf	3980,2,c	;volatile
  9932                           
  9933                           ;IO_Buttons.c: 77: LATDbits.LATD0 = 0;
  9934  003026  908C               	bcf	3980,0,c	;volatile
  9935                           
  9936                           ;IO_Buttons.c: 78: LATDbits.LATD1 = 0;
  9937  003028  928C               	bcf	3980,1,c	;volatile
  9938                           
  9939                           ;IO_Buttons.c: 79: LATDbits.LATD2 = 0;
  9940  00302A  948C               	bcf	3980,2,c	;volatile
  9941  00302C  0012               	return		;funcret
  9942  00302E                     __end_ofi2_scan_buttons:
  9943                           	opt stack 0
  9944                           pclatu	equ	0xFFB
  9945                           pclath	equ	0xFFA
  9946                           tblptru	equ	0xFF8
  9947                           tblptrh	equ	0xFF7
  9948                           tblptrl	equ	0xFF6
  9949                           tablat	equ	0xFF5
  9950                           prodh	equ	0xFF4
  9951                           prodl	equ	0xFF3
  9952                           intcon	equ	0xFF2
  9953                           intcon2	equ	0xFF1
  9954                           postinc0	equ	0xFEE
  9955                           fsr0h	equ	0xFEA
  9956                           fsr0l	equ	0xFE9
  9957                           wreg	equ	0xFE8
  9958                           fsr1h	equ	0xFE2
  9959                           fsr1l	equ	0xFE1
  9960                           indf2	equ	0xFDF
  9961                           postinc2	equ	0xFDE
  9962                           postdec2	equ	0xFDD
  9963                           fsr2h	equ	0xFDA
  9964                           fsr2l	equ	0xFD9
  9965                           status	equ	0xFD8
  9966                           
  9967 ;; *************** function i2_enable_interrupt *****************
  9968 ;; Defined at:
  9969 ;;		line 33 in file "IO_Buttons.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2, status,0
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;Total ram usage:        0 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		_IO_Buttons_ISR
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	text51
  9997  00383A                     __ptext51:
  9998                           	opt stack 0
  9999  00383A                     i2_enable_interrupt:
 10000                           	opt stack 24
 10001                           
 10002                           ;IO_Buttons.c: 35: if(PORTB) {
 10003                           
 10004                           ;incstack = 0
 10005  00383A  5081               	movf	3969,w,c	;volatile
 10006  00383C  A4D8               	btfss	status,2,c
 10007  00383E  F000               	nop		;# 
 10008                           
 10009                           ;IO_Buttons.c: 37: }
 10010                           ;IO_Buttons.c: 39: if(buttons_interrupt_priority == 0) {
 10011  003840  503E               	movf	_buttons_interrupt_priority,w,c	;volatile
 10012  003842  A4D8               	btfss	status,2,c
 10013  003844  D002               	goto	i2l3326
 10014                           
 10015                           ;IO_Buttons.c: 40: INTCON2bits.RBIP = 0;
 10016  003846  90F1               	bcf	intcon2,0,c	;volatile
 10017                           
 10018                           ;IO_Buttons.c: 41: }
 10019  003848  D003               	goto	i2l38
 10020  00384A                     i2l3326:
 10021                           
 10022                           ;IO_Buttons.c: 43: else if(buttons_interrupt_priority == 1) {
 10023  00384A  043E               	decf	_buttons_interrupt_priority,w,c	;volatile
 10024  00384C  B4D8               	btfsc	status,2,c
 10025                           
 10026                           ;IO_Buttons.c: 44: INTCON2bits.RBIP = 1;
 10027  00384E  80F1               	bsf	intcon2,0,c	;volatile
 10028  003850                     i2l38:
 10029                           
 10030                           ;IO_Buttons.c: 45: }
 10031                           ;IO_Buttons.c: 47: INTCONbits.RBIF = 0;
 10032  003850  90F2               	bcf	intcon,0,c	;volatile
 10033                           
 10034                           ;IO_Buttons.c: 48: INTCONbits.RBIE = 1;
 10035  003852  86F2               	bsf	intcon,3,c	;volatile
 10036  003854  0012               	return		;funcret
 10037  003856                     __end_ofi2_enable_interrupt:
 10038                           	opt stack 0
 10039                           pclatu	equ	0xFFB
 10040                           pclath	equ	0xFFA
 10041                           tblptru	equ	0xFF8
 10042                           tblptrh	equ	0xFF7
 10043                           tblptrl	equ	0xFF6
 10044                           tablat	equ	0xFF5
 10045                           prodh	equ	0xFF4
 10046                           prodl	equ	0xFF3
 10047                           intcon	equ	0xFF2
 10048                           intcon2	equ	0xFF1
 10049                           postinc0	equ	0xFEE
 10050                           fsr0h	equ	0xFEA
 10051                           fsr0l	equ	0xFE9
 10052                           wreg	equ	0xFE8
 10053                           fsr1h	equ	0xFE2
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           postdec2	equ	0xFDD
 10058                           fsr2h	equ	0xFDA
 10059                           fsr2l	equ	0xFD9
 10060                           status	equ	0xFD8
 10061                           
 10062 ;; *************** function i2_disable_interrupt *****************
 10063 ;; Defined at:
 10064 ;;		line 22 in file "IO_Buttons.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;		None
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;		None
 10069 ;; Return value:  Size  Location     Type
 10070 ;;                  1    wreg      void 
 10071 ;; Registers used:
 10072 ;;		wreg, status,2
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;Total ram usage:        0 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; This function calls:
 10085 ;;		Nothing
 10086 ;; This function is called by:
 10087 ;;		_IO_Buttons_ISR
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           	psect	text52
 10092  00395C                     __ptext52:
 10093                           	opt stack 0
 10094  00395C                     i2_disable_interrupt:
 10095                           	opt stack 24
 10096                           
 10097                           ;IO_Buttons.c: 24: if(PORTB) {
 10098                           
 10099                           ;incstack = 0
 10100  00395C  5081               	movf	3969,w,c	;volatile
 10101  00395E  A4D8               	btfss	status,2,c
 10102  003960  F000               	nop		;# 
 10103                           
 10104                           ;IO_Buttons.c: 26: }
 10105                           ;IO_Buttons.c: 28: INTCONbits.RBIE = 0;
 10106  003962  96F2               	bcf	intcon,3,c	;volatile
 10107                           
 10108                           ;IO_Buttons.c: 29: INTCONbits.RBIF = 0;
 10109  003964  90F2               	bcf	intcon,0,c	;volatile
 10110  003966  0012               	return		;funcret
 10111  003968                     __end_ofi2_disable_interrupt:
 10112                           	opt stack 0
 10113                           pclatu	equ	0xFFB
 10114                           pclath	equ	0xFFA
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           intcon2	equ	0xFF1
 10123                           postinc0	equ	0xFEE
 10124                           fsr0h	equ	0xFEA
 10125                           fsr0l	equ	0xFE9
 10126                           wreg	equ	0xFE8
 10127                           fsr1h	equ	0xFE2
 10128                           fsr1l	equ	0xFE1
 10129                           indf2	equ	0xFDF
 10130                           postinc2	equ	0xFDE
 10131                           postdec2	equ	0xFDD
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           pclatu	equ	0xFFB
 10136                           pclath	equ	0xFFA
 10137                           tblptru	equ	0xFF8
 10138                           tblptrh	equ	0xFF7
 10139                           tblptrl	equ	0xFF6
 10140                           tablat	equ	0xFF5
 10141                           prodh	equ	0xFF4
 10142                           prodl	equ	0xFF3
 10143                           intcon	equ	0xFF2
 10144                           intcon2	equ	0xFF1
 10145                           postinc0	equ	0xFEE
 10146                           fsr0h	equ	0xFEA
 10147                           fsr0l	equ	0xFE9
 10148                           wreg	equ	0xFE8
 10149                           fsr1h	equ	0xFE2
 10150                           fsr1l	equ	0xFE1
 10151                           indf2	equ	0xFDF
 10152                           postinc2	equ	0xFDE
 10153                           postdec2	equ	0xFDD
 10154                           fsr2h	equ	0xFDA
 10155                           fsr2l	equ	0xFD9
 10156                           status	equ	0xFD8
 10157                           
 10158                           	psect	rparam
 10159  0000                     pclatu	equ	0xFFB
 10160                           pclath	equ	0xFFA
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           intcon2	equ	0xFF1
 10169                           postinc0	equ	0xFEE
 10170                           fsr0h	equ	0xFEA
 10171                           fsr0l	equ	0xFE9
 10172                           wreg	equ	0xFE8
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           fsr2h	equ	0xFDA
 10179                           fsr2l	equ	0xFD9
 10180                           status	equ	0xFD8
 10181                           
 10182                           	psect	temp
 10183  00004D                     btemp:
 10184                           	opt stack 0
 10185  00004D                     	ds	1
 10186  0000                     int$flags	set	btemp
 10187                           pclatu	equ	0xFFB
 10188                           pclath	equ	0xFFA
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           intcon2	equ	0xFF1
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           fsr1h	equ	0xFE2
 10202                           fsr1l	equ	0xFE1
 10203                           indf2	equ	0xFDF
 10204                           postinc2	equ	0xFDE
 10205                           postdec2	equ	0xFDD
 10206                           fsr2h	equ	0xFDA
 10207                           fsr2l	equ	0xFD9
 10208                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    118
    Data        0
    BSS         15
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      76
    BANK0           160     85      86
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_7(CODE[7]), STR_6(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buff(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    IO_LCD_putrs@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[8]), STR_4(CODE[8]), STR_3(CODE[8]), STR_2(CODE[13]), 
		 -> STR_1(CODE[15]), 

    IO_LCD_puts@str	PTR unsigned char  size(2) Largest target is 20
		 -> main@buff(BANK0[20]), 

    sp__IO_Encoder_getState	PTR volatile struct . size(2) Largest target is 3
		 -> enc_state(COMRAM[3]), 

    sp__IO_Buttons_getAllButtons	PTR volatile struct . size(2) Largest target is 1
		 -> button_state_bits(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _sprintf->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    _reload_timer->_WriteTimer0
    _IO_LCD_puts->_write_data
    _IO_LCD_putrs->_write_data
    _IO_LCD_configureIO->_write_port
    _IO_LCD_SetCursor->_write_cmd
    _IO_LCD_Init->_write_cmd
    _IO_Buttons_getButton->_scan_buttons

Critical Paths under _ISR in COMRAM

    i2_reload_timer->i2_WriteTimer0
    _IO_Buttons_ISR->i2_scan_buttons

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   66093
                                             60 BANK0     25    25      0
                       _Delay10KTCYx
             _IO_Buttons_configureIO
               _IO_Buttons_getButton
             _IO_Encoder_configureIO
                _IO_Encoder_getCount
                        _IO_LCD_Init
                   _IO_LCD_SetCursor
                 _IO_LCD_configureIO
                       _IO_LCD_putrs
                        _IO_LCD_puts
                 _IO_LED_configureIO
              _TMR_SysTick_configure
                        _WriteTimer3
                            ___ftmul
                           ___lwtoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   55113
                                             22 BANK0     38    31      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12881
                                             53 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   12602
                                             53 COMRAM     3     0      3
                                              0 BANK0      7     7      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3004
                                             32 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5376
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1985
                                             24 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                             18 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                             18 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2643
                                             26 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             31 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             18 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                              4 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4475
                                             16 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4111
                                             56 COMRAM     3     3      0
                                              7 BANK0      9     3      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                             18 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2572
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2464
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _WriteTimer3                                          4     2      2     196
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _TMR_SysTick_configure                                1     1      0     288
                                             22 COMRAM     1     1      0
        TMR_SysTick@enable_interrupt
                       _reload_timer
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) TMR_SysTick@enable_interrupt                          0     0      0     133
                       _reload_timer
 ---------------------------------------------------------------------------------
 (2) _reload_timer                                         0     0      0     133
                        _WriteTimer0
 ---------------------------------------------------------------------------------
 (3) _WriteTimer0                                          4     2      2     133
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _IO_LED_configureIO                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_LCD_puts                                          3     1      2     394
                                             21 COMRAM     3     1      2
                         _write_data
 ---------------------------------------------------------------------------------
 (1) _IO_LCD_putrs                                         5     3      2     586
                                             21 COMRAM     5     3      2
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _write_data                                           3     3      0     176
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _IO_LCD_configureIO                                   0     0      0      88
                         _write_port
 ---------------------------------------------------------------------------------
 (2) _write_port                                           2     2      0      88
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _IO_LCD_SetCursor                                     2     1      1     670
                                             21 COMRAM     2     1      1
                          _write_cmd
 ---------------------------------------------------------------------------------
 (1) _IO_LCD_Init                                          1     1      0     176
                                             21 COMRAM     1     1      0
                          _write_cmd
 ---------------------------------------------------------------------------------
 (2) _write_cmd                                            3     3      0     176
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _IO_Encoder_getCount                                  4     2      2      23
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _IO_Encoder_configureIO                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Buttons_getButton                                 1     1      0      22
                                             19 COMRAM     1     1      0
                       _scan_buttons
 ---------------------------------------------------------------------------------
 (2) _scan_buttons                                         1     1      0       0
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _IO_Buttons_configureIO                               2     1      1     152
                                             18 COMRAM     2     1      1
                  _disable_interrupt
                   _enable_interrupt
 ---------------------------------------------------------------------------------
 (2) _enable_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _disable_interrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay10KTCYx                                         2     2      0      22
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0      93
                                              4 COMRAM    14    14      0
                     _IO_Buttons_ISR
                     _IO_Encoder_ISR
                    _TMR_SysTick_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR_SysTick_ISR                                      0     0      0      93
                     i2_reload_timer
 ---------------------------------------------------------------------------------
 (7) i2_reload_timer                                       0     0      0      93
                      i2_WriteTimer0
 ---------------------------------------------------------------------------------
 (8) i2_WriteTimer0                                        4     2      2      93
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _IO_Encoder_ISR                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IO_Buttons_ISR                                       0     0      0       0
                i2_disable_interrupt
                 i2_enable_interrupt
                     i2_scan_buttons
 ---------------------------------------------------------------------------------
 (7) i2_scan_buttons                                       1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) i2_enable_interrupt                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i2_disable_interrupt                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay10KTCYx
   _IO_Buttons_configureIO
     _disable_interrupt
     _enable_interrupt
   _IO_Buttons_getButton
     _scan_buttons
   _IO_Encoder_configureIO
   _IO_Encoder_getCount
   _IO_LCD_Init
     _write_cmd
   _IO_LCD_SetCursor
     _write_cmd
   _IO_LCD_configureIO
     _write_port
   _IO_LCD_putrs
     _write_data
   _IO_LCD_puts
     _write_data
   _IO_LED_configureIO
   _TMR_SysTick_configure
     TMR_SysTick@enable_interrupt
       _reload_timer
         _WriteTimer0
     _reload_timer
       _WriteTimer0
     _start_timer
   _WriteTimer3
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _ISR (ROOT)
   _IO_Buttons_ISR
     i2_disable_interrupt
     i2_enable_interrupt
     i2_scan_buttons
   _IO_Encoder_ISR
   _TMR_SysTick_ISR
     i2_reload_timer
       i2_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     55      56       5       53.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      4C       1       80.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      32        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 13 23:26:05 2017

             __size_ofi2_enable_interrupt 001C                                        l38 3834  
                            ___awdiv@sign 001E                       ___wmul@multiplicand 0023  
                             __CFG_BORV$3 000000                            i2_reload_timer 3928  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                             __CFG_OSC$HS 000000                              __CFG_CP4$OFF 000000  
                            __CFG_CP5$OFF 000000                              ___ftadd@exp1 006F  
                            ___ftadd@exp2 006E                              __CFG_CP6$OFF 000000  
                            __CFG_CP7$OFF 000000                              ___ftadd@sign 006D  
                                     l361 2720                                       l468 17E0  
                                     l805 2558                                       l814 2582  
                                     l735 2B84                                       l832 29CE  
                                     l833 29F6                                       l914 337C  
                                     l924 3544                                       l790 2428  
                                     l767 30BC                                       l839 2A5C  
                                     l864 37B2                                       l794 245E  
                                     l796 2486                              __CFG_CPB$OFF 000000  
                            __CFG_CPD$OFF 000000                                       _ISR 0008  
                    __size_of_WriteTimer0 0012                      __size_of_WriteTimer3 0012  
                             _start_timer 3968                              ___awmod@sign 0018  
                                     wreg 000FE8                             IO_LCD_putrs@i 001A  
                            __CFG_MODE$MC 000000                              __CFG_LVP$OFF 000000  
                                    ?_ISR 0001                              __CFG_WDT$OFF 000000  
                                    l3120 2A32                                      l3202 310C  
                                    l3212 3168                                      l3300 3536  
                                    l3116 2A22                                      l3206 313C  
                                    l3142 2AAA                                      l3126 2A4A  
                                    l3070 37FA                                      l4120 2436  
                                    l3136 2A8C                                      l3128 2A56  
                                    l3080 2968                                      l3404 33E4  
                                    l3500 3628                                      l4132 247C  
                                    l3180 2B5A                                      l3164 2B1C  
                                    l3156 2AEC                                      l4212 2E60  
                                    l3502 3634                                      l4150 24F8  
                                    l4142 24BE                                      l4126 246C  
                                    l3086 2994                                      l4302 34D8  
                                    l4222 2E88                                      l4080 3056  
                                    l4160 253E                                      l4152 2506  
                                    l3272 332E                                      l3176 2B4A  
                                    l4208 2E50                                      l4320 22BA  
                                    l3530 38BE                                      l3370 3744  
                                    l3506 3640                                      l4090 30B2  
                                    l4082 3074                                      l4074 303E  
                                    l4162 254C                                      l4154 2512  
                                    l4402 28C4                                      l3274 333A  
                                    l3186 2B72                                      l4250 32C2  
                                    l4306 34E6                                      l4218 2E78  
                                    l3508 365A                                      l4148 24EA  
                                    l4420 292A                                      l4412 28F4  
                                    l3284 336E                                      l3276 333E  
                                    l3292 3502                                      l3188 2B7E  
                                    l4252 32CA                                      l4244 32AC  
                                    l3366 373C                                      l3390 33C0  
                                    l3382 33A8                                      l4086 308A  
                                    l4078 304C                                      l4414 2904  
                                    l4406 28D8                                      l3294 350E  
                                    l4270 3302                                      l4262 32EA  
                                    l4254 32CE                                      l4238 329C  
                                    l4342 1E54                                      l4502 12EC  
                                    l3480 36EC                                      l4088 30A8  
                                    l4168 25AC                                      l4416 290E  
                                    l3296 3512                                      l4328 2388  
                                    l4360 207C                                      l4352 1F36  
                                    l4600 16EC                                      l3394 33CC  
                                    l3386 33B4                                      l3378 339C  
                                    l4178 25FA                                      l4426 355C  
                                    l4266 32F4                                      l4290 34AE  
                                    l4282 3494                                      l4194 2E1E  
                                    l4610 1794                                      l4530 1428  
                                    l4442 10E0                                      l3492 35E2  
                                    l3484 3704                                      l4428 3568  
                                    l4292 34B6                                      l4188 2DF6  
                                    l4348 1F0A                                      l4700 1AFA  
                                    l4532 143E                                      l4444 10F6  
                                    l4436 10C0                                      l3398 33D8  
                                    l4374 3684                                      l4294 34BA  
                                    l4286 34A0                                      l4366 2132  
                                    l4630 1814                                      l4622 17E4  
                                    l4542 14CE                                      l4534 146E  
                                    l4526 1402                                      l4518 139A  
                                    l4454 1138                                      l4462 11B4  
                                    l2936 382E                                      l3496 3612  
                                    l3488 35B8                                      l4384 2832  
                                    l4712 1B74                                      l4616 17AE  
                                    l4608 1786                                      l4560 15B8  
                                    l4536 1484                                      l4480 1250  
                                    l4472 1220                                      l4448 1100  
                                    l4800 26A4                                      l3498 361C  
                                    l4298 34CE                                      l4730 1BE4  
                                    l4714 1B7E                                      l4706 1B32  
                                    l4634 1866                                      l4618 17C2  
                                    l4562 15BE                                      l4546 14F4  
                                    l4474 123A                                      l4740 1CAA  
                                    l4724 1BB6                                      l4708 1B3C  
                                    l4652 1980                                      l4644 1958  
                                    l4556 1552                                      l4492 12A6  
                                    l4484 1258                                      l4468 11E0  
                                    l4812 26D6                                      l4734 1C74  
                                    l4718 1B90                                      l4646 1966  
                                    l4582 1682                                      l4574 160A  
                                    l4662 19CE                                      l4486 128C  
                                    l4478 124A                                      l2992 387A  
                                    l4736 1C7A                                      l4672 1A1C  
                                    l4656 19A6                                      l4592 16A4  
                                    l4840 2744                                      l4690 1A96  
                                    l4674 1A22                                      l4586 168A  
                                    l4594 16B8                                      l4578 165A  
                                    l4746 1CD0                                      l4818 26E8  
                ??_IO_Encoder_configureIO 0013                                      l2996 3880  
                                    l4748 1CF2                                      l4694 1AC6  
                                    l4686 1A6E                                      l4598 16E4  
              _buttons_interrupt_priority 003E                                      STR_1 1077  
                                    STR_2 1086                                      STR_3 109B  
                                    STR_4 1093                                      STR_5 109B  
                                    STR_6 10AA                                      STR_7 10A3  
                                    u3005 2CC2                                      u3015 2CDC  
                                    u3025 2D00                                      u3035 2BA2  
                                    u3045 2BBC                                      u3055 2BE0  
                                    u3171 294C                                      u3191 2978  
                                    u5200 2858                                      u5205 284E  
                                    u2910 2F26                                      u6007 31CC  
                                    u6017 31DC                                      u2930 2F46  
                                    u2850 2EDA                                      u3730 33A4  
                                    u6027 31E8                                      u2908 2F0E  
                                    u3740 33B0                                      u6037 2D38  
                                    u5181 280E                                      u2950 2F5E  
                                    u2870 2EF0                                      u3750 33BC  
                                    u6047 2D42                                      u4711 23E2  
                                    u2928 2F28                                      u3760 33C8  
                                    u5360 1332                                      u6057 2DBC  
                                    u4721 23FA                                      u2890 2F0C  
                                    u3770 33D4                                      u6067 2DC6  
                                    u2948 2F48                                      u2868 2EDC  
                                    u3780 33E0                                      u6077 38C4  
                                    u5365 1326                                      u2968 2F60  
                                    u2888 2EF2                                      u5560 17D8  
                                    u4921 2DDE                                      u4941 2E06  
                                    i2l38 3850                                      u5907 2C9C  
                                    u5917 2CA6                                      u5927 2CAE  
                                    u5937 365C                                      u5947 3172  
                                    u5957 3186                                      u5967 3198  
                                    u5887 2C18                                      u5977 31A4  
                                    u5897 2C22                                      u5987 31B0  
                                    u5997 31BC                           ?i2_scan_buttons 0001  
                                    _done 00B5                                      _main 2620  
                            ___ftpack@arg 0013                              ___ftpack@exp 0016  
                       _disable_interrupt 3944                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      fsr1l 000FE1  
                                    indf2 000FDF                                      fsr2l 000FD9  
                                    btemp 004D                    __size_ofi2_WriteTimer0 0012  
                 __size_of_IO_Buttons_ISR 000E                                      pclat 000FFA  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0016                             __CFG_IESO$OFF 000000  
                      ?_disable_interrupt 0001                            IO_LCD_puts@str 0016  
                            _sprintf$2348 0083                            write_data@data 0015  
                           __CFG_MCLRE$ON 000000                              ___ftmul@cntr 0034  
                            ___param_bank 000010                              ___ftmul@sign 0035  
                                   ??_ISR 0005                    __end_ofi2_reload_timer 3936  
                            ___fttol@exp1 0072                              ___fttol@lval 006E  
                  ?_TMR_SysTick_configure 0001                 __size_of_enable_interrupt 001C  
                     ??_disable_interrupt 0013                             __CFG_WAIT$OFF 000000  
                                   ?_main 0001                           __end_of___awdiv 330C  
                         __end_of___ftadd 2620                           __end_of___awmod 34F0  
                         __end_of___ftneg 37C0                           __end_of___lldiv 338E  
                         __end_of___ftmul 2EC2                                     _T0CON 000FD5  
                         ___awdiv@divisor 001B                           __end_of___llmod 3556  
                         __end_of___ftsub 36AE                           __end_of___fttol 293C  
                                   _T3CON 000FB1                   ?_IO_Buttons_configureIO 0013  
                                   i2l357 324C                           ___awdiv@counter 001D  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TMR3H 000FB3                                     _TMR3L 000FB2  
                                   _PORTB 000F81                     __size_of_Delay10KTCYx 0016  
                           __CFG_PWRT$OFF 000000                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                           __CFG_WRT3$OFF 000000                             __CFG_WRT4$OFF 000000  
                           __CFG_WRT5$OFF 000000                              ___lltoft@exp 0023  
                           __CFG_WRT6$OFF 000000                             __CFG_WRT7$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                            __CFG_EBTR4$OFF 000000  
                          __CFG_EBTR5$OFF 000000                            __CFG_EBTR6$OFF 000000  
                          __CFG_EBTR7$OFF 000000                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                                     _enc_A 0040  
                                   _enc_B 0042                              ?_IO_LCD_Init 0001  
                         __end_of_dpowers 1029                                     _scale 1D00  
                         __end_of_isdigit 3802                             ___ftpack@sign 0017  
                            ?_IO_LCD_puts 0016                  __end_of_IO_LCD_SetCursor 3662  
               __end_of_disable_interrupt 3950                                     tablat 000FF5  
                                   status 000FD8                           __end_of_sprintf 1D00  
                         IO_LCD_putrs@str 0016      IO_Buttons_configureIO@use_interrupts 0014  
                         __initialization 3856                              __end_of_main 27F8  
                         ?i2_reload_timer 0001                              _Delay10KTCYx 38BC  
                          _IO_Encoder_ISR 36AE            __end_of_IO_Buttons_configureIO 374E  
                                  ??_main 003C                            write_port@data 0014  
                           ___fttol@sign1 006D                             i2_WriteTimer0 3908  
                           __activetblptr 000003                      __size_of__tdiv_to_l_ 0132  
                      _IO_LED_configureIO 38F6               __end_ofi2_disable_interrupt 3968  
                        ___llmod@dividend 0020                                    ?_scale 0036  
                                  _CCPR3H 000FB9                                    _CCPR3L 000FB8  
                        ___awdiv@dividend 0019                          __end_of___ftpack 30DC  
                        __end_of___lltoft 35B2           __size_of_IO_Encoder_configureIO 001C  
                         __CFG_BBSIZ$BB2K 000000                                    i2l3326 384A  
                                  i2l3422 36E0                       ?_IO_LED_configureIO 0001  
                                  i2l3418 36D8                                    i2l3960 323A  
                        __end_of___lwtoft 37E4              ?TMR_SysTick@enable_interrupt 0001  
             __end_of_IO_Encoder_getCount 38A4                            __CFG_XINST$OFF 000000  
                        __end_of__powers_ 1077                                    ___ftge 30DC  
                  __end_of_IO_Encoder_ISR 36E6                                    ___wmul 3776  
                               ??___awdiv 001D                                 ??___ftadd 0039  
                          __CFG_STVREN$ON 000000                                 ??___awmod 0017  
                               ??___ftneg 0016                                 ??___lldiv 001B  
                               ??___ftmul 002D                                 ??___llmod 0028  
                               ??___ftsub 003C                                 ??___fttol 0068  
                    ??_IO_LED_configureIO 0013                                    _fround 215E  
                                  clear_0 3860                          ___awdiv@quotient 001F  
                         ___awmod@divisor 0015                            ?i2_WriteTimer0 0001  
                         ___awmod@counter 0017                             ?_IO_LCD_putrs 0016  
                   ___ftmul@f3_as_product 0031                                 ??_isdigit 0013  
IO_Buttons_configureIO@interrupt_priority 0013                              __mediumconst 0000  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                                 ??_sprintf 007D  
              __size_of_disable_interrupt 000C                             ?_scan_buttons 0001  
                              __accesstop 0060                   __end_of__initialization 3866  
                              ___ftadd@f1 0067                                ___ftadd@f2 006A  
                          _IO_Buttons_ISR 3936                                ___ftge@ff1 0013  
                              ___ftge@ff2 0016             ??TMR_SysTick@enable_interrupt 0017  
                           ___rparam_used 000001                         _button_state_bits 0049  
                              ___ftneg@f1 0013                                ___ftmul@f1 0027  
                              ___ftmul@f2 002A                                ___ftsub@f1 0070  
                              ___ftsub@f2 0073                                ___fttol@f1 0064  
                          __pcstackCOMRAM 0001                           ?_IO_Encoder_ISR 0001  
                              ___lltoft@c 001B              __end_of_IO_Buttons_getButton 340C  
                  _IO_Encoder_configureIO 3802               __size_of_IO_LCD_configureIO 0018  
                           __end_of_scale 215E                          _enable_interrupt 381E  
                          ??_IO_LCD_putrs 0018                                ___lwtoft@c 001B  
                              __div_to_l_ 2A6E                              ?_start_timer 0001  
                        ??i2_scan_buttons 0001                           __div_to_l_@exp1 001E  
                         __div_to_l_@cntr 001D                                   ??_scale 0039  
                         __div_to_l_@quot 0019                              sprintf@width 0097  
                          ??_scan_buttons 0013                                __pbssBANK0 00B5  
                  __end_of_IO_Buttons_ISR 3944                      __size_of_IO_LCD_Init 0090  
                     IO_LCD_SetCursor@col 0016                       IO_LCD_SetCursor@row 0017  
                __size_of_TMR_SysTick_ISR 000C                      __size_of_IO_LCD_puts 0036  
                              __pnvCOMRAM 004A                             __div_to_l_@f1 0013  
                           __div_to_l_@f2 0016                                _enc_A_prev 0041  
                 ??_TMR_SysTick_configure 0017                _systick_interrupt_priority 004C  
              __end_ofi2_enable_interrupt 3856                             ?_reload_timer 0001  
                                 ?___ftge 0013                                   ?___wmul 0021  
                         ??i2_WriteTimer0 0003                                   _CCP3CON 000FB7  
                        WriteTimer0@timer 0015                             ??_WriteTimer0 0015  
                                 ?_fround 0036                             ??_WriteTimer3 0015  
                        WriteTimer3@timer 0015                                 ?___ftpack 0013  
                               ?___lltoft 001B      __size_ofTMR_SysTick@enable_interrupt 001A  
                               ?___lwtoft 001B                           ?_IO_Buttons_ISR 0001  
                       ?_IO_LCD_SetCursor 0016                        ??_IO_LCD_SetCursor 0017  
                     i2WriteTimer0@timer0 0001                          ??i2_reload_timer 0005  
                      __size_of_write_cmd 0118                         __end_of__npowers_ 1050  
                                 __Hparam 0000                                _scale$2347 0060  
                                 __Lparam 0000                            ??_reload_timer 0017  
                         __size_of___ftge 0090                                   ___awdiv 3288  
                                 ___ftadd 23D0                                   ___awmod 3480  
                                 ___ftneg 379C                                   ___lldiv 330C  
                         __size_of___wmul 0026                                   ___ftmul 2DCE  
                                 ___llmod 34F0                                   ___ftsub 3662  
                                 ___fttol 27F8                              __psmallconst 1000  
                                 __pcinit 3856                                ??___ftpack 0018  
                         __size_of_fround 0272                                   __ramtop 1000  
                              ??___lltoft 001F                                   __ptext0 2620  
                                 __ptext1 10B0                                   __ptext2 1D00  
                                 __ptext3 37E4                                   __ptext4 215E  
                                 __ptext5 3776                                   __ptext6 2DCE  
                                 __ptext7 3480                                   __ptext8 3288  
                                 __ptext9 293C                                ??___lwtoft 001E  
                               _T0CONbits 000FD5                              __size_of_ISR 3280  
                             ?__div_to_l_ 0013                                   _counter 003C  
                                 _dpowers 1001                                   _isdigit 37E4  
                               _T3CONbits 000FB1                          ___awmod@dividend 0013  
                     __end_of_WriteTimer0 38F6                       __end_of_WriteTimer3 38E4  
                                 _sprintf 10B0                            __pintcode_body 31FC  
                    end_of_initialization 3866                      _IO_Buttons_getButton 338E  
                                 int_func 31FC                      __end_of_IO_LCD_putrs 360E  
                         ___lldiv@divisor 0017                           ___lldiv@counter 001F  
                     main@timer_reg_value 00B3                         ??_TMR_SysTick_ISR 0005  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                            __tdiv_to_l_@f1 0013  
                          __tdiv_to_l_@f2 0016                      __end_of_scan_buttons 2F78  
                           ??__tdiv_to_l_ 0019                                 _PORTBbits 000F81  
                               _PORTGbits 000F86                         __end_of_write_cmd 2DCE  
                               _TRISBbits 000F93                                 _TRISDbits 000F95  
                               _TRISGbits 000F98                                 _TRISHbits 000F99  
                               _TRISJbits 000F9A                      __size_of_start_timer 0004  
                   ?_IO_Buttons_getButton 0001                  __end_of_enable_interrupt 383A  
                            IO_LCD_puts@i 0018                              write_cmd@cmd 0015  
            __size_ofi2_disable_interrupt 000C                          ??_IO_Encoder_ISR 0001  
                     __size_of__div_to_l_ 0128                   ?_IO_Encoder_configureIO 0001  
                             ___ftmul@exp 0030                            __end_of___ftge 316C  
            __size_of_IO_Encoder_getCount 001A                            __end_of___wmul 379C  
             __size_of_IO_LED_configureIO 0012                                _write_data 2B96  
                             _WriteTimer0 38E4                               _WriteTimer3 38D2  
                              _write_port 340C                            __end_of_fround 23D0  
                     start_initialization 3856                               __end_of_ISR 3288  
                     __end_of__tdiv_to_l_ 2A6E                      __end_of_reload_timer 3928  
                  _buttons_use_interrupts 003F                           ___llmod@divisor 0024  
                         ___llmod@counter 0028            __end_of_IO_Encoder_configureIO 381E  
              __end_of_IO_LCD_configureIO 38BC                  ??_IO_Buttons_configureIO 0014  
                                ??___ftge 0019                                  ??___wmul 0025  
          __size_of_TMR_SysTick_configure 0028             __end_of_TMR_SysTick_configure 3776  
                        __CFG_LPT1OSC$OFF 000000                                  ??_fround 0039  
                           sprintf@tmpval 008C                                fround@prec 0066  
                       __size_of___ftpack 00AE                        i2_enable_interrupt 383A  
                       __size_of___lltoft 005C                               __pbssCOMRAM 003C  
                       __size_of___lwtoft 0024                          ??_IO_Buttons_ISR 0002  
                           __pcstackBANK0 0060                             ??_IO_LCD_Init 0016  
                  ??_IO_Buttons_getButton 0014                              _isdigit$1890 0014  
                   __size_of_IO_LCD_putrs 005C                             ??_IO_LCD_puts 0018  
                     ?i2_enable_interrupt 0001       __end_ofTMR_SysTick@enable_interrupt 388A  
             TMR_SysTick@enable_interrupt 3870                               sprintf@flag 0092  
                             sprintf@fval 0094                               sprintf@prec 0099  
                   __size_of_scan_buttons 00B6                         __CFG_CCP2MX$PORTC 000000  
                               __pintcode 0008                                  ?___awdiv 0019  
                                ?___ftadd 0067                                  ?___awmod 0013  
                                ?___ftneg 0013                      ??i2_enable_interrupt 0001  
                                ?___lldiv 0013                                  ?___ftmul 0027  
                                ?___llmod 0020                                  ?___ftsub 0070  
                               __npowers_ 1029                                  ?___fttol 0064  
                           ?_Delay10KTCYx 0001                 __size_of_IO_LCD_SetCursor 0054  
                               _enc_state 0043                               ?_write_data 0001  
                             ?_write_port 0001                     __end_ofi2_WriteTimer0 391A  
                             __tdiv_to_l_ 293C                                 _lcd_state 0046  
                            ??__div_to_l_ 0019                              _IO_LCD_putrs 35B2  
                             __smallconst 1000                         WriteTimer0@timer0 0013  
                                ?_isdigit 0001                        i2WriteTimer0@timer 0003  
                       WriteTimer3@timer3 0013                        _systick_tmr_reload 004A  
                                ?_sprintf 0076                            __size_of_scale 045E  
                         _TMR_SysTick_ISR 3950                              _scan_buttons 2EC2  
                          ___wmul@product 0025                                  _LATDbits 000F8C  
                     __end_of_IO_LCD_Init 31FC                                  _LATGbits 000F8F  
                                _LATHbits 000F90                                  _LATJbits 000F91  
                                _IPR3bits 000FA5                                  _PIE3bits 000FA3  
                 __size_ofi2_scan_buttons 00B6                       __end_of_IO_LCD_puts 371C  
                                i2u360_40 2FA6                        __end_of__div_to_l_ 2B96  
                                i2u362_40 2FC2                                  i2u361_48 2FA8  
                                i2u364_40 2FDC                                  i2u363_48 2FC4  
                                _PIR3bits 000FA4                                  i2u366_40 2FFC  
                                i2u365_48 2FDE                                  i2u358_40 2F90  
                                i2u368_40 3014                                  i2u367_48 2FFE  
                                i2u359_48 2F92                                  i2u369_48 3016  
                   __CFG_DATABW$DATA16BIT 000000                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000           __size_of_IO_Buttons_configureIO 0032  
                          ??_Delay10KTCYx 0013                         __CFG_ECCPMX$PORTE 000000  
                       ___wmul@multiplier 0021                       i2_disable_interrupt 395C  
                         main@duration_us 00B0                     __size_of_reload_timer 000E  
                        Delay10KTCYx@unit 0014                                 _write_cmd 2CB6  
                             _INTCON2bits 000FF1                       _IO_Encoder_getCount 388A  
                       ?_enable_interrupt 0001                       __size_of_write_data 0120  
                    ?i2_disable_interrupt 0001                       __size_of_write_port 0074  
                      ??_enable_interrupt 0013                                  __Hrparam 0000  
                                __Lrparam 0000                        __CFG_BOREN$SBORDIS 000000  
                            _reload_timer 391A                      ?_IO_Encoder_getCount 0013  
                        __size_of___awdiv 0084                          __size_of___ftadd 0250  
                        __size_of___awmod 0070                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                          __size_of___ftmul 00F4  
                        __size_of___llmod 0066                          __size_of___ftsub 004C  
                        __size_of___fttol 0144                              ?_WriteTimer0 0013  
                            ?_WriteTimer3 0013                                  ___ftpack 302E  
                 __size_ofi2_reload_timer 000E                               _fround$2345 0063  
                             _fround$2346 0060                                  ___lltoft 3556  
                                ___lwtoft 37C0                             ??_start_timer 0013  
                              sprintf@exp 0090                                sprintf@val 0088  
                        __size_of_isdigit 001E                   __end_of_TMR_SysTick_ISR 395C  
                  _IO_Buttons_configureIO 371C                                  __ptext10 2A6E  
                                __ptext11 3556                                  __ptext20 302E  
                                __ptext12 34F0                                  __ptext21 38D2  
                                __ptext13 330C                                  __ptext30 2B96  
                                __ptext22 374E                                  __ptext14 27F8  
                                __ptext31 38A4                                  __ptext23 3968  
                                __ptext15 3662                                  __ptext40 371C  
                                __ptext32 340C                                  __ptext24 3870  
                                __ptext16 23D0                                  __ptext41 381E  
                                __ptext33 360E                                  __ptext25 391A  
                                __ptext17 379C                                  __ptext50 2F78  
                                __ptext42 3944                                  __ptext34 316C  
                                __ptext26 38E4                                  __ptext18 30DC  
                                __ptext51 383A                                  __ptext43 38BC  
                                __ptext35 2CB6                                  __ptext27 38F6  
                                __ptext19 37C0                                  __ptext52 395C  
                                __ptext36 388A                                  __ptext28 36E6  
                                __ptext45 3950                                  __ptext37 3802  
                                __ptext29 35B2                                  __ptext46 3928  
                                __ptext38 338E                                  __ptext47 3908  
                                __ptext39 2EC2                                  __ptext48 36AE  
                                __ptext49 3936                               _IO_LCD_Init 316C  
                                __powers_ 1050                                ?_write_cmd 0001  
                        __size_of_sprintf 0C50                               _IO_LCD_puts 36E6  
                   ??i2_disable_interrupt 0001   TMR_SysTick_configure@interrupt_priority 0017  
                           __size_of_main 01D8                IO_Buttons_getButton@button 0014  
              __end_of_IO_LED_configureIO 3908                                  int$flags 004D  
                   ??_IO_Encoder_getCount 0015                          _IO_LCD_SetCursor 360E  
                                main@buff 009C                     __CFG_ADDRBW$ADDR20BIT 000000  
                      _IO_LCD_configureIO 38A4                                _INTCONbits 000FF2  
                                isdigit@c 0015                                  scale@scl 0063  
                IO_Encoder_getCount@count 0015                      __end_of_Delay10KTCYx 38D2  
                     ?_IO_LCD_configureIO 0001                       __end_of_start_timer 396C  
                                intlevel2 0000                                 sprintf@ap 0086  
                        __tdiv_to_l_@exp1 0021                          __tdiv_to_l_@cntr 0020  
                               sprintf@sp 0076                          __tdiv_to_l_@quot 001C  
                        ___lldiv@dividend 0013                            i2_scan_buttons 2F78  
                    ??_IO_LCD_configureIO 0015                              ??_write_data 0013  
                 __size_of_IO_Encoder_ISR 0038                              ??_write_port 0013  
                   _TMR_SysTick_configure 374E                              ?__tdiv_to_l_ 0013  
                                sprintf@c 009B                                  sprintf@f 0078  
                        ___lldiv@quotient 001B                          ?_TMR_SysTick_ISR 0001  
                             ??_write_cmd 0013             __size_of_IO_Buttons_getButton 007E  
                  __end_ofi2_scan_buttons 302E                        __end_of_write_data 2CB6  
                      __end_of_write_port 3480  
